Created by PLY version 3.2 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> file
Rule 1     file -> decls
Rule 2     empty -> <empty>
Rule 3     decls -> declsx
Rule 4     declsx -> decl declsx
Rule 5     declsx -> empty
Rule 6     decl -> PROTOCOL STRING SEMI
Rule 7     decl -> INCLUDE STRING SEMI
Rule 8     decl -> MACHINE ( ident pairs ) : params { decls }
Rule 9     decl -> ACTION ( ident pairs ) statements
Rule 10    decl -> IN_PORT ( ident , type , var pairs ) statements
Rule 11    decl -> OUT_PORT ( ident , type , var pairs ) SEMI
Rule 12    decl -> TRANS ( idents , idents , ident pairs ) idents
Rule 13    decl -> TRANS ( idents , idents pairs ) idents
Rule 14    decl -> TRANS ( idents , idents , ident pairs ) idents idents
Rule 15    decl -> TRANS ( idents , idents pairs ) idents idents
Rule 16    decl -> EXTERN_TYPE ( type pairs ) SEMI
Rule 17    decl -> GLOBAL ( type pairs ) { type_members }
Rule 18    decl -> STRUCT ( type pairs ) { type_members }
Rule 19    decl -> ENUM ( type pairs ) { type_enums }
Rule 20    decl -> STATE_DECL ( type pairs ) { type_states }
Rule 21    decl -> type ident pairs SEMI
Rule 22    decl -> func_decl
Rule 23    func_decl -> void ident ( params ) pairs SEMI
Rule 24    func_decl -> type ident ( params ) pairs SEMI
Rule 25    decl -> func_def
Rule 26    func_def -> void ident ( params ) pairs statements
Rule 27    func_def -> type ident ( params ) pairs statements
Rule 28    type_members -> type_member type_members
Rule 29    type_members -> empty
Rule 30    type_member -> type_or_void ident ( types ) pairs SEMI
Rule 31    type_member -> type_or_void ident ( params ) pairs statements
Rule 32    type_member -> type_or_void ident pairs SEMI
Rule 33    type_member -> type_or_void ident ASSIGN expr SEMI
Rule 34    type_enums -> type_enum type_enums
Rule 35    type_enums -> empty
Rule 36    type_enum -> ident pairs SEMI
Rule 37    type_states -> type_state type_states
Rule 38    type_states -> empty
Rule 39    type_state -> ident , enumeration pairs SEMI
Rule 40    types -> type , types
Rule 41    types -> type
Rule 42    types -> empty
Rule 43    typestr -> typestr DOUBLE_COLON ident
Rule 44    typestr -> ident
Rule 45    type -> typestr
Rule 46    void -> VOID
Rule 47    type_or_void -> type
Rule 48    type_or_void -> void
Rule 49    params -> param , params
Rule 50    params -> param
Rule 51    params -> empty
Rule 52    param -> type ident
Rule 53    param -> type STAR ident
Rule 54    param -> type STAR ident = STRING
Rule 55    param -> type ident = NUMBER
Rule 56    param -> type ident = LIT_BOOL
Rule 57    param -> type ident = STRING
Rule 58    idents -> { identx }
Rule 59    idents -> ident
Rule 60    identx -> ident SEMI identx
Rule 61    identx -> ident , identx
Rule 62    identx -> ident identx
Rule 63    identx -> empty
Rule 64    ident -> IDENT
Rule 65    pairs -> , pairsx
Rule 66    pairs -> empty
Rule 67    pairsx -> pair , pairsx
Rule 68    pairsx -> pair
Rule 69    pair -> ident = STRING
Rule 70    pair -> ident = ident
Rule 71    pair -> ident = NUMBER
Rule 72    pair -> STRING
Rule 73    statements -> { statements_inner }
Rule 74    statements -> { }
Rule 75    statements_inner -> statement statements_inner
Rule 76    statements_inner -> statement
Rule 77    exprs -> expr , exprs
Rule 78    exprs -> expr
Rule 79    exprs -> empty
Rule 80    statement -> expr SEMI
Rule 81    statement -> expr ASSIGN expr SEMI
Rule 82    statement -> ENQUEUE ( var , type pairs ) statements
Rule 83    statement -> STALL_AND_WAIT ( var , var ) SEMI
Rule 84    statement -> PEEK ( var , type pairs ) statements
Rule 85    statement -> COPY_HEAD ( var , var pairs ) SEMI
Rule 86    statement -> CHECK_ALLOCATE ( var ) SEMI
Rule 87    statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI
Rule 88    aexpr -> STATIC_CAST ( type , expr )
Rule 89    aexpr -> STATIC_CAST ( type , STRING , expr )
Rule 90    statement -> RETURN expr SEMI
Rule 91    statement -> if_statement
Rule 92    if_statement -> IF ( expr ) statements
Rule 93    if_statement -> IF ( expr ) statements ELSE statements
Rule 94    if_statement -> IF ( expr ) statements ELSE if_statement
Rule 95    aexpr -> var
Rule 96    aexpr -> type ident
Rule 97    aexpr -> literal
Rule 98    aexpr -> enumeration
Rule 99    aexpr -> ident ( exprs )
Rule 100   aexpr -> NEW type
Rule 101   aexpr -> OOD
Rule 102   aexpr -> aexpr DOT ident
Rule 103   aexpr -> aexpr DOT ident ( exprs )
Rule 104   aexpr -> aexpr [ exprs ]
Rule 105   aexpr -> type DOUBLE_COLON ident ( exprs )
Rule 106   expr -> aexpr
Rule 107   expr -> expr STAR expr
Rule 108   expr -> expr SLASH expr
Rule 109   expr -> expr PLUS expr
Rule 110   expr -> expr DASH expr
Rule 111   expr -> expr LT expr
Rule 112   expr -> expr GT expr
Rule 113   expr -> expr LE expr
Rule 114   expr -> expr GE expr
Rule 115   expr -> expr EQ expr
Rule 116   expr -> expr NE expr
Rule 117   expr -> expr AND expr
Rule 118   expr -> expr OR expr
Rule 119   expr -> expr RIGHTSHIFT expr
Rule 120   expr -> expr LEFTSHIFT expr
Rule 121   expr -> NOT expr
Rule 122   expr -> DASH expr
Rule 123   aexpr -> ( expr )
Rule 124   aexpr -> IS_VALID ( var )
Rule 125   aexpr -> IS_INVALID ( var )
Rule 126   literal -> STRING
Rule 127   literal -> NUMBER
Rule 128   literal -> FLOATNUMBER
Rule 129   literal -> LIT_BOOL
Rule 130   enumeration -> ident : ident
Rule 131   var -> ident

Terminals, with rules where they appear

(                    : 8 9 10 11 12 13 14 15 16 17 18 19 20 23 24 26 27 30 31 82 83 84 85 86 87 88 89 92 93 94 99 103 105 123 124 125
)                    : 8 9 10 11 12 13 14 15 16 17 18 19 20 23 24 26 27 30 31 82 83 84 85 86 87 88 89 92 93 94 99 103 105 123 124 125
,                    : 10 10 11 11 12 12 13 14 14 15 39 40 49 61 65 67 77 82 83 84 85 87 87 88 89 89
:                    : 8 130
=                    : 54 55 56 57 69 70 71
ACTION               : 9
AND                  : 117
ASSIGN               : 33 81
CHECK_ALLOCATE       : 86
CHECK_STOP_SLOTS     : 87
COPY_HEAD            : 85
DASH                 : 110 122
DOT                  : 102 103
DOUBLE_COLON         : 43 105
ELSE                 : 93 94
ENQUEUE              : 82
ENUM                 : 19
EQ                   : 115
EXTERN_TYPE          : 16
FLOATNUMBER          : 128
GE                   : 114
GLOBAL               : 17
GT                   : 112
IDENT                : 64
IF                   : 92 93 94
INCLUDE              : 7
IN_PORT              : 10
IS_INVALID           : 125
IS_VALID             : 124
LE                   : 113
LEFTSHIFT            : 120
LIT_BOOL             : 56 129
LT                   : 111
MACHINE              : 8
NE                   : 116
NEW                  : 100
NOT                  : 121
NUMBER               : 55 71 127
OOD                  : 101
OR                   : 118
OUT_PORT             : 11
PEEK                 : 84
PLUS                 : 109
PROTOCOL             : 6
RETURN               : 90
RIGHTSHIFT           : 119
SEMI                 : 6 7 11 16 21 23 24 30 32 33 36 39 60 80 81 83 85 86 87 90
SLASH                : 108
STALL_AND_WAIT       : 83
STAR                 : 53 54 107
STATE_DECL           : 20
STATIC_CAST          : 88 89
STRING               : 6 7 54 57 69 72 87 87 89 126
STRUCT               : 18
TRANS                : 12 13 14 15
VOID                 : 46
[                    : 104
]                    : 104
error                : 
{                    : 8 17 18 19 20 58 73 74
}                    : 8 17 18 19 20 58 73 74

Nonterminals, with rules where they appear

aexpr                : 102 103 104 106
decl                 : 4
decls                : 1 8
declsx               : 3 4
empty                : 5 29 35 38 42 51 63 66 79
enumeration          : 39 98
expr                 : 33 77 78 80 81 81 88 89 90 92 93 94 107 107 108 108 109 109 110 110 111 111 112 112 113 113 114 114 115 115 116 116 117 117 118 118 119 119 120 120 121 122 123
exprs                : 77 99 103 104 105
file                 : 0
func_decl            : 22
func_def             : 25
ident                : 8 9 10 11 12 14 21 23 24 26 27 30 31 32 33 36 39 43 44 52 53 54 55 56 57 59 60 61 62 69 70 70 71 96 99 102 103 105 130 130 131
idents               : 12 12 12 13 13 13 14 14 14 14 15 15 15 15
identx               : 58 60 61 62
if_statement         : 91 94
literal              : 97
pair                 : 67 68
pairs                : 8 9 10 11 12 13 14 15 16 17 18 19 20 21 23 24 26 27 30 31 32 36 39 82 84 85
pairsx               : 65 67
param                : 49 50
params               : 8 23 24 26 27 31 49
statement            : 75 76
statements           : 9 10 26 27 31 82 84 92 93 93 94
statements_inner     : 73 75
type                 : 10 11 16 17 18 19 20 21 24 27 40 41 47 52 53 54 55 56 57 82 84 88 89 96 100 105
type_enum            : 34
type_enums           : 19 34
type_member          : 28
type_members         : 17 18 28
type_or_void         : 30 31 32 33
type_state           : 37
type_states          : 20 37
types                : 30 40
typestr              : 43 45
var                  : 10 11 82 83 83 84 85 85 86 87 95 124 125
void                 : 23 26 48

Parsing method: LALR

state 0

    (0) S' -> . file
    (1) file -> . decls
    (3) decls -> . declsx
    (4) declsx -> . decl declsx
    (5) declsx -> . empty
    (6) decl -> . PROTOCOL STRING SEMI
    (7) decl -> . INCLUDE STRING SEMI
    (8) decl -> . MACHINE ( ident pairs ) : params { decls }
    (9) decl -> . ACTION ( ident pairs ) statements
    (10) decl -> . IN_PORT ( ident , type , var pairs ) statements
    (11) decl -> . OUT_PORT ( ident , type , var pairs ) SEMI
    (12) decl -> . TRANS ( idents , idents , ident pairs ) idents
    (13) decl -> . TRANS ( idents , idents pairs ) idents
    (14) decl -> . TRANS ( idents , idents , ident pairs ) idents idents
    (15) decl -> . TRANS ( idents , idents pairs ) idents idents
    (16) decl -> . EXTERN_TYPE ( type pairs ) SEMI
    (17) decl -> . GLOBAL ( type pairs ) { type_members }
    (18) decl -> . STRUCT ( type pairs ) { type_members }
    (19) decl -> . ENUM ( type pairs ) { type_enums }
    (20) decl -> . STATE_DECL ( type pairs ) { type_states }
    (21) decl -> . type ident pairs SEMI
    (22) decl -> . func_decl
    (25) decl -> . func_def
    (2) empty -> .
    (45) type -> . typestr
    (23) func_decl -> . void ident ( params ) pairs SEMI
    (24) func_decl -> . type ident ( params ) pairs SEMI
    (26) func_def -> . void ident ( params ) pairs statements
    (27) func_def -> . type ident ( params ) pairs statements
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident
    (46) void -> . VOID
    (64) ident -> . IDENT

    PROTOCOL        shift and go to state 13
    INCLUDE         shift and go to state 20
    MACHINE         shift and go to state 17
    ACTION          shift and go to state 9
    IN_PORT         shift and go to state 25
    OUT_PORT        shift and go to state 8
    TRANS           shift and go to state 7
    EXTERN_TYPE     shift and go to state 18
    GLOBAL          shift and go to state 3
    STRUCT          shift and go to state 22
    ENUM            shift and go to state 16
    STATE_DECL      shift and go to state 23
    $end            reduce using rule 2 (empty -> .)
    VOID            shift and go to state 2
    IDENT           shift and go to state 4

    decl                           shift and go to state 1
    ident                          shift and go to state 21
    func_def                       shift and go to state 14
    void                           shift and go to state 15
    declsx                         shift and go to state 12
    file                           shift and go to state 5
    func_decl                      shift and go to state 6
    decls                          shift and go to state 24
    type                           shift and go to state 10
    typestr                        shift and go to state 19
    empty                          shift and go to state 11

state 1

    (4) declsx -> decl . declsx
    (4) declsx -> . decl declsx
    (5) declsx -> . empty
    (6) decl -> . PROTOCOL STRING SEMI
    (7) decl -> . INCLUDE STRING SEMI
    (8) decl -> . MACHINE ( ident pairs ) : params { decls }
    (9) decl -> . ACTION ( ident pairs ) statements
    (10) decl -> . IN_PORT ( ident , type , var pairs ) statements
    (11) decl -> . OUT_PORT ( ident , type , var pairs ) SEMI
    (12) decl -> . TRANS ( idents , idents , ident pairs ) idents
    (13) decl -> . TRANS ( idents , idents pairs ) idents
    (14) decl -> . TRANS ( idents , idents , ident pairs ) idents idents
    (15) decl -> . TRANS ( idents , idents pairs ) idents idents
    (16) decl -> . EXTERN_TYPE ( type pairs ) SEMI
    (17) decl -> . GLOBAL ( type pairs ) { type_members }
    (18) decl -> . STRUCT ( type pairs ) { type_members }
    (19) decl -> . ENUM ( type pairs ) { type_enums }
    (20) decl -> . STATE_DECL ( type pairs ) { type_states }
    (21) decl -> . type ident pairs SEMI
    (22) decl -> . func_decl
    (25) decl -> . func_def
    (2) empty -> .
    (45) type -> . typestr
    (23) func_decl -> . void ident ( params ) pairs SEMI
    (24) func_decl -> . type ident ( params ) pairs SEMI
    (26) func_def -> . void ident ( params ) pairs statements
    (27) func_def -> . type ident ( params ) pairs statements
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident
    (46) void -> . VOID
    (64) ident -> . IDENT

    PROTOCOL        shift and go to state 13
    INCLUDE         shift and go to state 20
    MACHINE         shift and go to state 17
    ACTION          shift and go to state 9
    IN_PORT         shift and go to state 25
    OUT_PORT        shift and go to state 8
    TRANS           shift and go to state 7
    EXTERN_TYPE     shift and go to state 18
    GLOBAL          shift and go to state 3
    STRUCT          shift and go to state 22
    ENUM            shift and go to state 16
    STATE_DECL      shift and go to state 23
    $end            reduce using rule 2 (empty -> .)
    }               reduce using rule 2 (empty -> .)
    VOID            shift and go to state 2
    IDENT           shift and go to state 4

    decl                           shift and go to state 1
    ident                          shift and go to state 21
    func_def                       shift and go to state 14
    void                           shift and go to state 15
    declsx                         shift and go to state 26
    func_decl                      shift and go to state 6
    type                           shift and go to state 10
    typestr                        shift and go to state 19
    empty                          shift and go to state 11

state 2

    (46) void -> VOID .

    IDENT           reduce using rule 46 (void -> VOID .)


state 3

    (17) decl -> GLOBAL . ( type pairs ) { type_members }

    (               shift and go to state 27


state 4

    (64) ident -> IDENT .

    =               reduce using rule 64 (ident -> IDENT .)
    {               reduce using rule 64 (ident -> IDENT .)
    IDENT           reduce using rule 64 (ident -> IDENT .)
    PROTOCOL        reduce using rule 64 (ident -> IDENT .)
    INCLUDE         reduce using rule 64 (ident -> IDENT .)
    MACHINE         reduce using rule 64 (ident -> IDENT .)
    ACTION          reduce using rule 64 (ident -> IDENT .)
    IN_PORT         reduce using rule 64 (ident -> IDENT .)
    OUT_PORT        reduce using rule 64 (ident -> IDENT .)
    TRANS           reduce using rule 64 (ident -> IDENT .)
    EXTERN_TYPE     reduce using rule 64 (ident -> IDENT .)
    GLOBAL          reduce using rule 64 (ident -> IDENT .)
    STRUCT          reduce using rule 64 (ident -> IDENT .)
    ENUM            reduce using rule 64 (ident -> IDENT .)
    STATE_DECL      reduce using rule 64 (ident -> IDENT .)
    VOID            reduce using rule 64 (ident -> IDENT .)
    $end            reduce using rule 64 (ident -> IDENT .)
    }               reduce using rule 64 (ident -> IDENT .)
    SEMI            reduce using rule 64 (ident -> IDENT .)
    ,               reduce using rule 64 (ident -> IDENT .)
    (               reduce using rule 64 (ident -> IDENT .)
    DOT             reduce using rule 64 (ident -> IDENT .)
    [               reduce using rule 64 (ident -> IDENT .)
    ASSIGN          reduce using rule 64 (ident -> IDENT .)
    STAR            reduce using rule 64 (ident -> IDENT .)
    SLASH           reduce using rule 64 (ident -> IDENT .)
    PLUS            reduce using rule 64 (ident -> IDENT .)
    DASH            reduce using rule 64 (ident -> IDENT .)
    LT              reduce using rule 64 (ident -> IDENT .)
    GT              reduce using rule 64 (ident -> IDENT .)
    LE              reduce using rule 64 (ident -> IDENT .)
    GE              reduce using rule 64 (ident -> IDENT .)
    EQ              reduce using rule 64 (ident -> IDENT .)
    NE              reduce using rule 64 (ident -> IDENT .)
    AND             reduce using rule 64 (ident -> IDENT .)
    OR              reduce using rule 64 (ident -> IDENT .)
    RIGHTSHIFT      reduce using rule 64 (ident -> IDENT .)
    LEFTSHIFT       reduce using rule 64 (ident -> IDENT .)
    )               reduce using rule 64 (ident -> IDENT .)
    ]               reduce using rule 64 (ident -> IDENT .)
    DOUBLE_COLON    reduce using rule 64 (ident -> IDENT .)
    :               reduce using rule 64 (ident -> IDENT .)


state 5

    (0) S' -> file .



state 6

    (22) decl -> func_decl .

    PROTOCOL        reduce using rule 22 (decl -> func_decl .)
    INCLUDE         reduce using rule 22 (decl -> func_decl .)
    MACHINE         reduce using rule 22 (decl -> func_decl .)
    ACTION          reduce using rule 22 (decl -> func_decl .)
    IN_PORT         reduce using rule 22 (decl -> func_decl .)
    OUT_PORT        reduce using rule 22 (decl -> func_decl .)
    TRANS           reduce using rule 22 (decl -> func_decl .)
    EXTERN_TYPE     reduce using rule 22 (decl -> func_decl .)
    GLOBAL          reduce using rule 22 (decl -> func_decl .)
    STRUCT          reduce using rule 22 (decl -> func_decl .)
    ENUM            reduce using rule 22 (decl -> func_decl .)
    STATE_DECL      reduce using rule 22 (decl -> func_decl .)
    VOID            reduce using rule 22 (decl -> func_decl .)
    IDENT           reduce using rule 22 (decl -> func_decl .)
    }               reduce using rule 22 (decl -> func_decl .)
    $end            reduce using rule 22 (decl -> func_decl .)


state 7

    (12) decl -> TRANS . ( idents , idents , ident pairs ) idents
    (13) decl -> TRANS . ( idents , idents pairs ) idents
    (14) decl -> TRANS . ( idents , idents , ident pairs ) idents idents
    (15) decl -> TRANS . ( idents , idents pairs ) idents idents

    (               shift and go to state 28


state 8

    (11) decl -> OUT_PORT . ( ident , type , var pairs ) SEMI

    (               shift and go to state 29


state 9

    (9) decl -> ACTION . ( ident pairs ) statements

    (               shift and go to state 30


state 10

    (21) decl -> type . ident pairs SEMI
    (24) func_decl -> type . ident ( params ) pairs SEMI
    (27) func_def -> type . ident ( params ) pairs statements
    (64) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 31

state 11

    (5) declsx -> empty .

    $end            reduce using rule 5 (declsx -> empty .)
    }               reduce using rule 5 (declsx -> empty .)


state 12

    (3) decls -> declsx .

    }               reduce using rule 3 (decls -> declsx .)
    $end            reduce using rule 3 (decls -> declsx .)


state 13

    (6) decl -> PROTOCOL . STRING SEMI

    STRING          shift and go to state 32


state 14

    (25) decl -> func_def .

    PROTOCOL        reduce using rule 25 (decl -> func_def .)
    INCLUDE         reduce using rule 25 (decl -> func_def .)
    MACHINE         reduce using rule 25 (decl -> func_def .)
    ACTION          reduce using rule 25 (decl -> func_def .)
    IN_PORT         reduce using rule 25 (decl -> func_def .)
    OUT_PORT        reduce using rule 25 (decl -> func_def .)
    TRANS           reduce using rule 25 (decl -> func_def .)
    EXTERN_TYPE     reduce using rule 25 (decl -> func_def .)
    GLOBAL          reduce using rule 25 (decl -> func_def .)
    STRUCT          reduce using rule 25 (decl -> func_def .)
    ENUM            reduce using rule 25 (decl -> func_def .)
    STATE_DECL      reduce using rule 25 (decl -> func_def .)
    VOID            reduce using rule 25 (decl -> func_def .)
    IDENT           reduce using rule 25 (decl -> func_def .)
    }               reduce using rule 25 (decl -> func_def .)
    $end            reduce using rule 25 (decl -> func_def .)


state 15

    (23) func_decl -> void . ident ( params ) pairs SEMI
    (26) func_def -> void . ident ( params ) pairs statements
    (64) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 33

state 16

    (19) decl -> ENUM . ( type pairs ) { type_enums }

    (               shift and go to state 34


state 17

    (8) decl -> MACHINE . ( ident pairs ) : params { decls }

    (               shift and go to state 35


state 18

    (16) decl -> EXTERN_TYPE . ( type pairs ) SEMI

    (               shift and go to state 36


state 19

    (45) type -> typestr .
    (43) typestr -> typestr . DOUBLE_COLON ident

  ! shift/reduce conflict for DOUBLE_COLON resolved as shift
    IDENT           reduce using rule 45 (type -> typestr .)
    ,               reduce using rule 45 (type -> typestr .)
    )               reduce using rule 45 (type -> typestr .)
    DOT             reduce using rule 45 (type -> typestr .)
    [               reduce using rule 45 (type -> typestr .)
    SEMI            reduce using rule 45 (type -> typestr .)
    ASSIGN          reduce using rule 45 (type -> typestr .)
    STAR            reduce using rule 45 (type -> typestr .)
    SLASH           reduce using rule 45 (type -> typestr .)
    PLUS            reduce using rule 45 (type -> typestr .)
    DASH            reduce using rule 45 (type -> typestr .)
    LT              reduce using rule 45 (type -> typestr .)
    GT              reduce using rule 45 (type -> typestr .)
    LE              reduce using rule 45 (type -> typestr .)
    GE              reduce using rule 45 (type -> typestr .)
    EQ              reduce using rule 45 (type -> typestr .)
    NE              reduce using rule 45 (type -> typestr .)
    AND             reduce using rule 45 (type -> typestr .)
    OR              reduce using rule 45 (type -> typestr .)
    RIGHTSHIFT      reduce using rule 45 (type -> typestr .)
    LEFTSHIFT       reduce using rule 45 (type -> typestr .)
    ]               reduce using rule 45 (type -> typestr .)
    DOUBLE_COLON    shift and go to state 37

  ! DOUBLE_COLON    [ reduce using rule 45 (type -> typestr .) ]


state 20

    (7) decl -> INCLUDE . STRING SEMI

    STRING          shift and go to state 38


state 21

    (44) typestr -> ident .

    DOUBLE_COLON    reduce using rule 44 (typestr -> ident .)
    ,               reduce using rule 44 (typestr -> ident .)
    )               reduce using rule 44 (typestr -> ident .)
    IDENT           reduce using rule 44 (typestr -> ident .)
    STAR            reduce using rule 44 (typestr -> ident .)
    DOT             reduce using rule 44 (typestr -> ident .)
    [               reduce using rule 44 (typestr -> ident .)
    SEMI            reduce using rule 44 (typestr -> ident .)
    ASSIGN          reduce using rule 44 (typestr -> ident .)
    SLASH           reduce using rule 44 (typestr -> ident .)
    PLUS            reduce using rule 44 (typestr -> ident .)
    DASH            reduce using rule 44 (typestr -> ident .)
    LT              reduce using rule 44 (typestr -> ident .)
    GT              reduce using rule 44 (typestr -> ident .)
    LE              reduce using rule 44 (typestr -> ident .)
    GE              reduce using rule 44 (typestr -> ident .)
    EQ              reduce using rule 44 (typestr -> ident .)
    NE              reduce using rule 44 (typestr -> ident .)
    AND             reduce using rule 44 (typestr -> ident .)
    OR              reduce using rule 44 (typestr -> ident .)
    RIGHTSHIFT      reduce using rule 44 (typestr -> ident .)
    LEFTSHIFT       reduce using rule 44 (typestr -> ident .)
    ]               reduce using rule 44 (typestr -> ident .)


state 22

    (18) decl -> STRUCT . ( type pairs ) { type_members }

    (               shift and go to state 39


state 23

    (20) decl -> STATE_DECL . ( type pairs ) { type_states }

    (               shift and go to state 40


state 24

    (1) file -> decls .

    $end            reduce using rule 1 (file -> decls .)


state 25

    (10) decl -> IN_PORT . ( ident , type , var pairs ) statements

    (               shift and go to state 41


state 26

    (4) declsx -> decl declsx .

    $end            reduce using rule 4 (declsx -> decl declsx .)
    }               reduce using rule 4 (declsx -> decl declsx .)


state 27

    (17) decl -> GLOBAL ( . type pairs ) { type_members }
    (45) type -> . typestr
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident
    (64) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 21
    type                           shift and go to state 42
    typestr                        shift and go to state 19

state 28

    (12) decl -> TRANS ( . idents , idents , ident pairs ) idents
    (13) decl -> TRANS ( . idents , idents pairs ) idents
    (14) decl -> TRANS ( . idents , idents , ident pairs ) idents idents
    (15) decl -> TRANS ( . idents , idents pairs ) idents idents
    (58) idents -> . { identx }
    (59) idents -> . ident
    (64) ident -> . IDENT

    {               shift and go to state 45
    IDENT           shift and go to state 4

    ident                          shift and go to state 43
    idents                         shift and go to state 44

state 29

    (11) decl -> OUT_PORT ( . ident , type , var pairs ) SEMI
    (64) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 46

state 30

    (9) decl -> ACTION ( . ident pairs ) statements
    (64) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 47

state 31

    (21) decl -> type ident . pairs SEMI
    (24) func_decl -> type ident . ( params ) pairs SEMI
    (27) func_def -> type ident . ( params ) pairs statements
    (65) pairs -> . , pairsx
    (66) pairs -> . empty
    (2) empty -> .

    (               shift and go to state 49
    ,               shift and go to state 50
    SEMI            reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 48
    empty                          shift and go to state 51

state 32

    (6) decl -> PROTOCOL STRING . SEMI

    SEMI            shift and go to state 52


state 33

    (23) func_decl -> void ident . ( params ) pairs SEMI
    (26) func_def -> void ident . ( params ) pairs statements

    (               shift and go to state 53


state 34

    (19) decl -> ENUM ( . type pairs ) { type_enums }
    (45) type -> . typestr
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident
    (64) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 21
    type                           shift and go to state 54
    typestr                        shift and go to state 19

state 35

    (8) decl -> MACHINE ( . ident pairs ) : params { decls }
    (64) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 55

state 36

    (16) decl -> EXTERN_TYPE ( . type pairs ) SEMI
    (45) type -> . typestr
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident
    (64) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 21
    type                           shift and go to state 56
    typestr                        shift and go to state 19

state 37

    (43) typestr -> typestr DOUBLE_COLON . ident
    (64) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 57

state 38

    (7) decl -> INCLUDE STRING . SEMI

    SEMI            shift and go to state 58


state 39

    (18) decl -> STRUCT ( . type pairs ) { type_members }
    (45) type -> . typestr
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident
    (64) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 21
    type                           shift and go to state 59
    typestr                        shift and go to state 19

state 40

    (20) decl -> STATE_DECL ( . type pairs ) { type_states }
    (45) type -> . typestr
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident
    (64) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 21
    type                           shift and go to state 60
    typestr                        shift and go to state 19

state 41

    (10) decl -> IN_PORT ( . ident , type , var pairs ) statements
    (64) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 61

state 42

    (17) decl -> GLOBAL ( type . pairs ) { type_members }
    (65) pairs -> . , pairsx
    (66) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 50
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 62
    empty                          shift and go to state 51

state 43

    (59) idents -> ident .

    ,               reduce using rule 59 (idents -> ident .)
    )               reduce using rule 59 (idents -> ident .)
    {               reduce using rule 59 (idents -> ident .)
    IDENT           reduce using rule 59 (idents -> ident .)
    PROTOCOL        reduce using rule 59 (idents -> ident .)
    INCLUDE         reduce using rule 59 (idents -> ident .)
    MACHINE         reduce using rule 59 (idents -> ident .)
    ACTION          reduce using rule 59 (idents -> ident .)
    IN_PORT         reduce using rule 59 (idents -> ident .)
    OUT_PORT        reduce using rule 59 (idents -> ident .)
    TRANS           reduce using rule 59 (idents -> ident .)
    EXTERN_TYPE     reduce using rule 59 (idents -> ident .)
    GLOBAL          reduce using rule 59 (idents -> ident .)
    STRUCT          reduce using rule 59 (idents -> ident .)
    ENUM            reduce using rule 59 (idents -> ident .)
    STATE_DECL      reduce using rule 59 (idents -> ident .)
    VOID            reduce using rule 59 (idents -> ident .)
    $end            reduce using rule 59 (idents -> ident .)
    }               reduce using rule 59 (idents -> ident .)


state 44

    (12) decl -> TRANS ( idents . , idents , ident pairs ) idents
    (13) decl -> TRANS ( idents . , idents pairs ) idents
    (14) decl -> TRANS ( idents . , idents , ident pairs ) idents idents
    (15) decl -> TRANS ( idents . , idents pairs ) idents idents

    ,               shift and go to state 63


state 45

    (58) idents -> { . identx }
    (60) identx -> . ident SEMI identx
    (61) identx -> . ident , identx
    (62) identx -> . ident identx
    (63) identx -> . empty
    (64) ident -> . IDENT
    (2) empty -> .

    IDENT           shift and go to state 4
    }               reduce using rule 2 (empty -> .)

    ident                          shift and go to state 64
    identx                         shift and go to state 65
    empty                          shift and go to state 66

state 46

    (11) decl -> OUT_PORT ( ident . , type , var pairs ) SEMI

    ,               shift and go to state 67


state 47

    (9) decl -> ACTION ( ident . pairs ) statements
    (65) pairs -> . , pairsx
    (66) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 50
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 68
    empty                          shift and go to state 51

state 48

    (21) decl -> type ident pairs . SEMI

    SEMI            shift and go to state 69


state 49

    (24) func_decl -> type ident ( . params ) pairs SEMI
    (27) func_def -> type ident ( . params ) pairs statements
    (49) params -> . param , params
    (50) params -> . param
    (51) params -> . empty
    (52) param -> . type ident
    (53) param -> . type STAR ident
    (54) param -> . type STAR ident = STRING
    (55) param -> . type ident = NUMBER
    (56) param -> . type ident = LIT_BOOL
    (57) param -> . type ident = STRING
    (2) empty -> .
    (45) type -> . typestr
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident
    (64) ident -> . IDENT

    )               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 4

    ident                          shift and go to state 21
    param                          shift and go to state 70
    params                         shift and go to state 71
    typestr                        shift and go to state 19
    type                           shift and go to state 72
    empty                          shift and go to state 73

state 50

    (65) pairs -> , . pairsx
    (67) pairsx -> . pair , pairsx
    (68) pairsx -> . pair
    (69) pair -> . ident = STRING
    (70) pair -> . ident = ident
    (71) pair -> . ident = NUMBER
    (72) pair -> . STRING
    (64) ident -> . IDENT

    STRING          shift and go to state 75
    IDENT           shift and go to state 4

    pair                           shift and go to state 77
    ident                          shift and go to state 74
    pairsx                         shift and go to state 76

state 51

    (66) pairs -> empty .

    )               reduce using rule 66 (pairs -> empty .)
    SEMI            reduce using rule 66 (pairs -> empty .)
    {               reduce using rule 66 (pairs -> empty .)


state 52

    (6) decl -> PROTOCOL STRING SEMI .

    PROTOCOL        reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    INCLUDE         reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    MACHINE         reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    ACTION          reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    IN_PORT         reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    OUT_PORT        reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    TRANS           reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    EXTERN_TYPE     reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    GLOBAL          reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    STRUCT          reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    ENUM            reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    STATE_DECL      reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    VOID            reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    IDENT           reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    }               reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    $end            reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)


state 53

    (23) func_decl -> void ident ( . params ) pairs SEMI
    (26) func_def -> void ident ( . params ) pairs statements
    (49) params -> . param , params
    (50) params -> . param
    (51) params -> . empty
    (52) param -> . type ident
    (53) param -> . type STAR ident
    (54) param -> . type STAR ident = STRING
    (55) param -> . type ident = NUMBER
    (56) param -> . type ident = LIT_BOOL
    (57) param -> . type ident = STRING
    (2) empty -> .
    (45) type -> . typestr
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident
    (64) ident -> . IDENT

    )               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 4

    ident                          shift and go to state 21
    param                          shift and go to state 70
    params                         shift and go to state 78
    typestr                        shift and go to state 19
    type                           shift and go to state 72
    empty                          shift and go to state 73

state 54

    (19) decl -> ENUM ( type . pairs ) { type_enums }
    (65) pairs -> . , pairsx
    (66) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 50
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 79
    empty                          shift and go to state 51

state 55

    (8) decl -> MACHINE ( ident . pairs ) : params { decls }
    (65) pairs -> . , pairsx
    (66) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 50
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 80
    empty                          shift and go to state 51

state 56

    (16) decl -> EXTERN_TYPE ( type . pairs ) SEMI
    (65) pairs -> . , pairsx
    (66) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 50
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 81
    empty                          shift and go to state 51

state 57

    (43) typestr -> typestr DOUBLE_COLON ident .

    DOUBLE_COLON    reduce using rule 43 (typestr -> typestr DOUBLE_COLON ident .)
    IDENT           reduce using rule 43 (typestr -> typestr DOUBLE_COLON ident .)
    ,               reduce using rule 43 (typestr -> typestr DOUBLE_COLON ident .)
    )               reduce using rule 43 (typestr -> typestr DOUBLE_COLON ident .)
    STAR            reduce using rule 43 (typestr -> typestr DOUBLE_COLON ident .)
    DOT             reduce using rule 43 (typestr -> typestr DOUBLE_COLON ident .)
    [               reduce using rule 43 (typestr -> typestr DOUBLE_COLON ident .)
    SEMI            reduce using rule 43 (typestr -> typestr DOUBLE_COLON ident .)
    ASSIGN          reduce using rule 43 (typestr -> typestr DOUBLE_COLON ident .)
    SLASH           reduce using rule 43 (typestr -> typestr DOUBLE_COLON ident .)
    PLUS            reduce using rule 43 (typestr -> typestr DOUBLE_COLON ident .)
    DASH            reduce using rule 43 (typestr -> typestr DOUBLE_COLON ident .)
    LT              reduce using rule 43 (typestr -> typestr DOUBLE_COLON ident .)
    GT              reduce using rule 43 (typestr -> typestr DOUBLE_COLON ident .)
    LE              reduce using rule 43 (typestr -> typestr DOUBLE_COLON ident .)
    GE              reduce using rule 43 (typestr -> typestr DOUBLE_COLON ident .)
    EQ              reduce using rule 43 (typestr -> typestr DOUBLE_COLON ident .)
    NE              reduce using rule 43 (typestr -> typestr DOUBLE_COLON ident .)
    AND             reduce using rule 43 (typestr -> typestr DOUBLE_COLON ident .)
    OR              reduce using rule 43 (typestr -> typestr DOUBLE_COLON ident .)
    RIGHTSHIFT      reduce using rule 43 (typestr -> typestr DOUBLE_COLON ident .)
    LEFTSHIFT       reduce using rule 43 (typestr -> typestr DOUBLE_COLON ident .)
    ]               reduce using rule 43 (typestr -> typestr DOUBLE_COLON ident .)


state 58

    (7) decl -> INCLUDE STRING SEMI .

    PROTOCOL        reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    INCLUDE         reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    MACHINE         reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    ACTION          reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    IN_PORT         reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    OUT_PORT        reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    TRANS           reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    EXTERN_TYPE     reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    GLOBAL          reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    STRUCT          reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    ENUM            reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    STATE_DECL      reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    VOID            reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    IDENT           reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    }               reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    $end            reduce using rule 7 (decl -> INCLUDE STRING SEMI .)


state 59

    (18) decl -> STRUCT ( type . pairs ) { type_members }
    (65) pairs -> . , pairsx
    (66) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 50
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 82
    empty                          shift and go to state 51

state 60

    (20) decl -> STATE_DECL ( type . pairs ) { type_states }
    (65) pairs -> . , pairsx
    (66) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 50
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 83
    empty                          shift and go to state 51

state 61

    (10) decl -> IN_PORT ( ident . , type , var pairs ) statements

    ,               shift and go to state 84


state 62

    (17) decl -> GLOBAL ( type pairs . ) { type_members }

    )               shift and go to state 85


state 63

    (12) decl -> TRANS ( idents , . idents , ident pairs ) idents
    (13) decl -> TRANS ( idents , . idents pairs ) idents
    (14) decl -> TRANS ( idents , . idents , ident pairs ) idents idents
    (15) decl -> TRANS ( idents , . idents pairs ) idents idents
    (58) idents -> . { identx }
    (59) idents -> . ident
    (64) ident -> . IDENT

    {               shift and go to state 45
    IDENT           shift and go to state 4

    ident                          shift and go to state 43
    idents                         shift and go to state 86

state 64

    (60) identx -> ident . SEMI identx
    (61) identx -> ident . , identx
    (62) identx -> ident . identx
    (60) identx -> . ident SEMI identx
    (61) identx -> . ident , identx
    (62) identx -> . ident identx
    (63) identx -> . empty
    (64) ident -> . IDENT
    (2) empty -> .

    SEMI            shift and go to state 87
    ,               shift and go to state 89
    IDENT           shift and go to state 4
    }               reduce using rule 2 (empty -> .)

    ident                          shift and go to state 64
    identx                         shift and go to state 88
    empty                          shift and go to state 66

state 65

    (58) idents -> { identx . }

    }               shift and go to state 90


state 66

    (63) identx -> empty .

    }               reduce using rule 63 (identx -> empty .)


state 67

    (11) decl -> OUT_PORT ( ident , . type , var pairs ) SEMI
    (45) type -> . typestr
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident
    (64) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 21
    type                           shift and go to state 91
    typestr                        shift and go to state 19

state 68

    (9) decl -> ACTION ( ident pairs . ) statements

    )               shift and go to state 92


state 69

    (21) decl -> type ident pairs SEMI .

    PROTOCOL        reduce using rule 21 (decl -> type ident pairs SEMI .)
    INCLUDE         reduce using rule 21 (decl -> type ident pairs SEMI .)
    MACHINE         reduce using rule 21 (decl -> type ident pairs SEMI .)
    ACTION          reduce using rule 21 (decl -> type ident pairs SEMI .)
    IN_PORT         reduce using rule 21 (decl -> type ident pairs SEMI .)
    OUT_PORT        reduce using rule 21 (decl -> type ident pairs SEMI .)
    TRANS           reduce using rule 21 (decl -> type ident pairs SEMI .)
    EXTERN_TYPE     reduce using rule 21 (decl -> type ident pairs SEMI .)
    GLOBAL          reduce using rule 21 (decl -> type ident pairs SEMI .)
    STRUCT          reduce using rule 21 (decl -> type ident pairs SEMI .)
    ENUM            reduce using rule 21 (decl -> type ident pairs SEMI .)
    STATE_DECL      reduce using rule 21 (decl -> type ident pairs SEMI .)
    VOID            reduce using rule 21 (decl -> type ident pairs SEMI .)
    IDENT           reduce using rule 21 (decl -> type ident pairs SEMI .)
    }               reduce using rule 21 (decl -> type ident pairs SEMI .)
    $end            reduce using rule 21 (decl -> type ident pairs SEMI .)


state 70

    (49) params -> param . , params
    (50) params -> param .

    ,               shift and go to state 93
    )               reduce using rule 50 (params -> param .)
    {               reduce using rule 50 (params -> param .)


state 71

    (24) func_decl -> type ident ( params . ) pairs SEMI
    (27) func_def -> type ident ( params . ) pairs statements

    )               shift and go to state 94


state 72

    (52) param -> type . ident
    (53) param -> type . STAR ident
    (54) param -> type . STAR ident = STRING
    (55) param -> type . ident = NUMBER
    (56) param -> type . ident = LIT_BOOL
    (57) param -> type . ident = STRING
    (64) ident -> . IDENT

    STAR            shift and go to state 96
    IDENT           shift and go to state 4

    ident                          shift and go to state 95

state 73

    (51) params -> empty .

    )               reduce using rule 51 (params -> empty .)
    {               reduce using rule 51 (params -> empty .)


state 74

    (69) pair -> ident . = STRING
    (70) pair -> ident . = ident
    (71) pair -> ident . = NUMBER

    =               shift and go to state 97


state 75

    (72) pair -> STRING .

    ,               reduce using rule 72 (pair -> STRING .)
    SEMI            reduce using rule 72 (pair -> STRING .)
    )               reduce using rule 72 (pair -> STRING .)
    {               reduce using rule 72 (pair -> STRING .)


state 76

    (65) pairs -> , pairsx .

    )               reduce using rule 65 (pairs -> , pairsx .)
    SEMI            reduce using rule 65 (pairs -> , pairsx .)
    {               reduce using rule 65 (pairs -> , pairsx .)


state 77

    (67) pairsx -> pair . , pairsx
    (68) pairsx -> pair .

    ,               shift and go to state 98
    SEMI            reduce using rule 68 (pairsx -> pair .)
    )               reduce using rule 68 (pairsx -> pair .)
    {               reduce using rule 68 (pairsx -> pair .)


state 78

    (23) func_decl -> void ident ( params . ) pairs SEMI
    (26) func_def -> void ident ( params . ) pairs statements

    )               shift and go to state 99


state 79

    (19) decl -> ENUM ( type pairs . ) { type_enums }

    )               shift and go to state 100


state 80

    (8) decl -> MACHINE ( ident pairs . ) : params { decls }

    )               shift and go to state 101


state 81

    (16) decl -> EXTERN_TYPE ( type pairs . ) SEMI

    )               shift and go to state 102


state 82

    (18) decl -> STRUCT ( type pairs . ) { type_members }

    )               shift and go to state 103


state 83

    (20) decl -> STATE_DECL ( type pairs . ) { type_states }

    )               shift and go to state 104


state 84

    (10) decl -> IN_PORT ( ident , . type , var pairs ) statements
    (45) type -> . typestr
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident
    (64) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 21
    typestr                        shift and go to state 19
    type                           shift and go to state 105

state 85

    (17) decl -> GLOBAL ( type pairs ) . { type_members }

    {               shift and go to state 106


state 86

    (12) decl -> TRANS ( idents , idents . , ident pairs ) idents
    (13) decl -> TRANS ( idents , idents . pairs ) idents
    (14) decl -> TRANS ( idents , idents . , ident pairs ) idents idents
    (15) decl -> TRANS ( idents , idents . pairs ) idents idents
    (65) pairs -> . , pairsx
    (66) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 108
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 107
    empty                          shift and go to state 51

state 87

    (60) identx -> ident SEMI . identx
    (60) identx -> . ident SEMI identx
    (61) identx -> . ident , identx
    (62) identx -> . ident identx
    (63) identx -> . empty
    (64) ident -> . IDENT
    (2) empty -> .

    IDENT           shift and go to state 4
    }               reduce using rule 2 (empty -> .)

    ident                          shift and go to state 64
    identx                         shift and go to state 109
    empty                          shift and go to state 66

state 88

    (62) identx -> ident identx .

    }               reduce using rule 62 (identx -> ident identx .)


state 89

    (61) identx -> ident , . identx
    (60) identx -> . ident SEMI identx
    (61) identx -> . ident , identx
    (62) identx -> . ident identx
    (63) identx -> . empty
    (64) ident -> . IDENT
    (2) empty -> .

    IDENT           shift and go to state 4
    }               reduce using rule 2 (empty -> .)

    ident                          shift and go to state 64
    identx                         shift and go to state 110
    empty                          shift and go to state 66

state 90

    (58) idents -> { identx } .

    ,               reduce using rule 58 (idents -> { identx } .)
    )               reduce using rule 58 (idents -> { identx } .)
    {               reduce using rule 58 (idents -> { identx } .)
    IDENT           reduce using rule 58 (idents -> { identx } .)
    PROTOCOL        reduce using rule 58 (idents -> { identx } .)
    INCLUDE         reduce using rule 58 (idents -> { identx } .)
    MACHINE         reduce using rule 58 (idents -> { identx } .)
    ACTION          reduce using rule 58 (idents -> { identx } .)
    IN_PORT         reduce using rule 58 (idents -> { identx } .)
    OUT_PORT        reduce using rule 58 (idents -> { identx } .)
    TRANS           reduce using rule 58 (idents -> { identx } .)
    EXTERN_TYPE     reduce using rule 58 (idents -> { identx } .)
    GLOBAL          reduce using rule 58 (idents -> { identx } .)
    STRUCT          reduce using rule 58 (idents -> { identx } .)
    ENUM            reduce using rule 58 (idents -> { identx } .)
    STATE_DECL      reduce using rule 58 (idents -> { identx } .)
    VOID            reduce using rule 58 (idents -> { identx } .)
    $end            reduce using rule 58 (idents -> { identx } .)
    }               reduce using rule 58 (idents -> { identx } .)


state 91

    (11) decl -> OUT_PORT ( ident , type . , var pairs ) SEMI

    ,               shift and go to state 111


state 92

    (9) decl -> ACTION ( ident pairs ) . statements
    (73) statements -> . { statements_inner }
    (74) statements -> . { }

    {               shift and go to state 113

    statements                     shift and go to state 112

state 93

    (49) params -> param , . params
    (49) params -> . param , params
    (50) params -> . param
    (51) params -> . empty
    (52) param -> . type ident
    (53) param -> . type STAR ident
    (54) param -> . type STAR ident = STRING
    (55) param -> . type ident = NUMBER
    (56) param -> . type ident = LIT_BOOL
    (57) param -> . type ident = STRING
    (2) empty -> .
    (45) type -> . typestr
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident
    (64) ident -> . IDENT

    )               reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 4

    ident                          shift and go to state 21
    param                          shift and go to state 70
    params                         shift and go to state 114
    typestr                        shift and go to state 19
    type                           shift and go to state 72
    empty                          shift and go to state 73

state 94

    (24) func_decl -> type ident ( params ) . pairs SEMI
    (27) func_def -> type ident ( params ) . pairs statements
    (65) pairs -> . , pairsx
    (66) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 50
    SEMI            reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 115
    empty                          shift and go to state 51

state 95

    (52) param -> type ident .
    (55) param -> type ident . = NUMBER
    (56) param -> type ident . = LIT_BOOL
    (57) param -> type ident . = STRING

    ,               reduce using rule 52 (param -> type ident .)
    )               reduce using rule 52 (param -> type ident .)
    {               reduce using rule 52 (param -> type ident .)
    =               shift and go to state 116


state 96

    (53) param -> type STAR . ident
    (54) param -> type STAR . ident = STRING
    (64) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 117

state 97

    (69) pair -> ident = . STRING
    (70) pair -> ident = . ident
    (71) pair -> ident = . NUMBER
    (64) ident -> . IDENT

    STRING          shift and go to state 119
    NUMBER          shift and go to state 120
    IDENT           shift and go to state 4

    ident                          shift and go to state 118

state 98

    (67) pairsx -> pair , . pairsx
    (67) pairsx -> . pair , pairsx
    (68) pairsx -> . pair
    (69) pair -> . ident = STRING
    (70) pair -> . ident = ident
    (71) pair -> . ident = NUMBER
    (72) pair -> . STRING
    (64) ident -> . IDENT

    STRING          shift and go to state 75
    IDENT           shift and go to state 4

    pair                           shift and go to state 77
    ident                          shift and go to state 74
    pairsx                         shift and go to state 121

state 99

    (23) func_decl -> void ident ( params ) . pairs SEMI
    (26) func_def -> void ident ( params ) . pairs statements
    (65) pairs -> . , pairsx
    (66) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 50
    SEMI            reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 122
    empty                          shift and go to state 51

state 100

    (19) decl -> ENUM ( type pairs ) . { type_enums }

    {               shift and go to state 123


state 101

    (8) decl -> MACHINE ( ident pairs ) . : params { decls }

    :               shift and go to state 124


state 102

    (16) decl -> EXTERN_TYPE ( type pairs ) . SEMI

    SEMI            shift and go to state 125


state 103

    (18) decl -> STRUCT ( type pairs ) . { type_members }

    {               shift and go to state 126


state 104

    (20) decl -> STATE_DECL ( type pairs ) . { type_states }

    {               shift and go to state 127


state 105

    (10) decl -> IN_PORT ( ident , type . , var pairs ) statements

    ,               shift and go to state 128


state 106

    (17) decl -> GLOBAL ( type pairs ) { . type_members }
    (28) type_members -> . type_member type_members
    (29) type_members -> . empty
    (30) type_member -> . type_or_void ident ( types ) pairs SEMI
    (31) type_member -> . type_or_void ident ( params ) pairs statements
    (32) type_member -> . type_or_void ident pairs SEMI
    (33) type_member -> . type_or_void ident ASSIGN expr SEMI
    (2) empty -> .
    (47) type_or_void -> . type
    (48) type_or_void -> . void
    (45) type -> . typestr
    (46) void -> . VOID
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident
    (64) ident -> . IDENT

    }               reduce using rule 2 (empty -> .)
    VOID            shift and go to state 2
    IDENT           shift and go to state 4

    typestr                        shift and go to state 19
    ident                          shift and go to state 21
    void                           shift and go to state 134
    type_members                   shift and go to state 129
    type_member                    shift and go to state 130
    type                           shift and go to state 132
    type_or_void                   shift and go to state 131
    empty                          shift and go to state 133

state 107

    (13) decl -> TRANS ( idents , idents pairs . ) idents
    (15) decl -> TRANS ( idents , idents pairs . ) idents idents

    )               shift and go to state 135


state 108

    (12) decl -> TRANS ( idents , idents , . ident pairs ) idents
    (14) decl -> TRANS ( idents , idents , . ident pairs ) idents idents
    (65) pairs -> , . pairsx
    (64) ident -> . IDENT
    (67) pairsx -> . pair , pairsx
    (68) pairsx -> . pair
    (69) pair -> . ident = STRING
    (70) pair -> . ident = ident
    (71) pair -> . ident = NUMBER
    (72) pair -> . STRING

    IDENT           shift and go to state 4
    STRING          shift and go to state 75

    pairsx                         shift and go to state 76
    pair                           shift and go to state 77
    ident                          shift and go to state 136

state 109

    (60) identx -> ident SEMI identx .

    }               reduce using rule 60 (identx -> ident SEMI identx .)


state 110

    (61) identx -> ident , identx .

    }               reduce using rule 61 (identx -> ident , identx .)


state 111

    (11) decl -> OUT_PORT ( ident , type , . var pairs ) SEMI
    (131) var -> . ident
    (64) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 138
    ident                          shift and go to state 137

state 112

    (9) decl -> ACTION ( ident pairs ) statements .

    PROTOCOL        reduce using rule 9 (decl -> ACTION ( ident pairs ) statements .)
    INCLUDE         reduce using rule 9 (decl -> ACTION ( ident pairs ) statements .)
    MACHINE         reduce using rule 9 (decl -> ACTION ( ident pairs ) statements .)
    ACTION          reduce using rule 9 (decl -> ACTION ( ident pairs ) statements .)
    IN_PORT         reduce using rule 9 (decl -> ACTION ( ident pairs ) statements .)
    OUT_PORT        reduce using rule 9 (decl -> ACTION ( ident pairs ) statements .)
    TRANS           reduce using rule 9 (decl -> ACTION ( ident pairs ) statements .)
    EXTERN_TYPE     reduce using rule 9 (decl -> ACTION ( ident pairs ) statements .)
    GLOBAL          reduce using rule 9 (decl -> ACTION ( ident pairs ) statements .)
    STRUCT          reduce using rule 9 (decl -> ACTION ( ident pairs ) statements .)
    ENUM            reduce using rule 9 (decl -> ACTION ( ident pairs ) statements .)
    STATE_DECL      reduce using rule 9 (decl -> ACTION ( ident pairs ) statements .)
    VOID            reduce using rule 9 (decl -> ACTION ( ident pairs ) statements .)
    IDENT           reduce using rule 9 (decl -> ACTION ( ident pairs ) statements .)
    }               reduce using rule 9 (decl -> ACTION ( ident pairs ) statements .)
    $end            reduce using rule 9 (decl -> ACTION ( ident pairs ) statements .)


state 113

    (73) statements -> { . statements_inner }
    (74) statements -> { . }
    (75) statements_inner -> . statement statements_inner
    (76) statements_inner -> . statement
    (80) statement -> . expr SEMI
    (81) statement -> . expr ASSIGN expr SEMI
    (82) statement -> . ENQUEUE ( var , type pairs ) statements
    (83) statement -> . STALL_AND_WAIT ( var , var ) SEMI
    (84) statement -> . PEEK ( var , type pairs ) statements
    (85) statement -> . COPY_HEAD ( var , var pairs ) SEMI
    (86) statement -> . CHECK_ALLOCATE ( var ) SEMI
    (87) statement -> . CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI
    (90) statement -> . RETURN expr SEMI
    (91) statement -> . if_statement
    (106) expr -> . aexpr
    (107) expr -> . expr STAR expr
    (108) expr -> . expr SLASH expr
    (109) expr -> . expr PLUS expr
    (110) expr -> . expr DASH expr
    (111) expr -> . expr LT expr
    (112) expr -> . expr GT expr
    (113) expr -> . expr LE expr
    (114) expr -> . expr GE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr AND expr
    (118) expr -> . expr OR expr
    (119) expr -> . expr RIGHTSHIFT expr
    (120) expr -> . expr LEFTSHIFT expr
    (121) expr -> . NOT expr
    (122) expr -> . DASH expr
    (92) if_statement -> . IF ( expr ) statements
    (93) if_statement -> . IF ( expr ) statements ELSE statements
    (94) if_statement -> . IF ( expr ) statements ELSE if_statement
    (88) aexpr -> . STATIC_CAST ( type , expr )
    (89) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (95) aexpr -> . var
    (96) aexpr -> . type ident
    (97) aexpr -> . literal
    (98) aexpr -> . enumeration
    (99) aexpr -> . ident ( exprs )
    (100) aexpr -> . NEW type
    (101) aexpr -> . OOD
    (102) aexpr -> . aexpr DOT ident
    (103) aexpr -> . aexpr DOT ident ( exprs )
    (104) aexpr -> . aexpr [ exprs ]
    (105) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (123) aexpr -> . ( expr )
    (124) aexpr -> . IS_VALID ( var )
    (125) aexpr -> . IS_INVALID ( var )
    (131) var -> . ident
    (45) type -> . typestr
    (126) literal -> . STRING
    (127) literal -> . NUMBER
    (128) literal -> . FLOATNUMBER
    (129) literal -> . LIT_BOOL
    (130) enumeration -> . ident : ident
    (64) ident -> . IDENT
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident

    }               shift and go to state 169
    ENQUEUE         shift and go to state 151
    STALL_AND_WAIT  shift and go to state 158
    PEEK            shift and go to state 139
    COPY_HEAD       shift and go to state 152
    CHECK_ALLOCATE  shift and go to state 147
    CHECK_STOP_SLOTS shift and go to state 167
    RETURN          shift and go to state 140
    NOT             shift and go to state 168
    DASH            shift and go to state 160
    IF              shift and go to state 161
    STATIC_CAST     shift and go to state 146
    NEW             shift and go to state 144
    OOD             shift and go to state 162
    (               shift and go to state 148
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 149
    STRING          shift and go to state 157
    NUMBER          shift and go to state 142
    FLOATNUMBER     shift and go to state 141
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 163
    expr                           shift and go to state 164
    enumeration                    shift and go to state 150
    literal                        shift and go to state 159
    statements_inner               shift and go to state 143
    statement                      shift and go to state 153
    var                            shift and go to state 154
    typestr                        shift and go to state 19
    if_statement                   shift and go to state 155
    type                           shift and go to state 156
    aexpr                          shift and go to state 145

state 114

    (49) params -> param , params .

    )               reduce using rule 49 (params -> param , params .)
    {               reduce using rule 49 (params -> param , params .)


state 115

    (24) func_decl -> type ident ( params ) pairs . SEMI
    (27) func_def -> type ident ( params ) pairs . statements
    (73) statements -> . { statements_inner }
    (74) statements -> . { }

    SEMI            shift and go to state 171
    {               shift and go to state 113

    statements                     shift and go to state 170

state 116

    (55) param -> type ident = . NUMBER
    (56) param -> type ident = . LIT_BOOL
    (57) param -> type ident = . STRING

    NUMBER          shift and go to state 173
    LIT_BOOL        shift and go to state 174
    STRING          shift and go to state 172


state 117

    (53) param -> type STAR ident .
    (54) param -> type STAR ident . = STRING

    ,               reduce using rule 53 (param -> type STAR ident .)
    )               reduce using rule 53 (param -> type STAR ident .)
    {               reduce using rule 53 (param -> type STAR ident .)
    =               shift and go to state 175


state 118

    (70) pair -> ident = ident .

    ,               reduce using rule 70 (pair -> ident = ident .)
    SEMI            reduce using rule 70 (pair -> ident = ident .)
    )               reduce using rule 70 (pair -> ident = ident .)
    {               reduce using rule 70 (pair -> ident = ident .)


state 119

    (69) pair -> ident = STRING .

    ,               reduce using rule 69 (pair -> ident = STRING .)
    SEMI            reduce using rule 69 (pair -> ident = STRING .)
    )               reduce using rule 69 (pair -> ident = STRING .)
    {               reduce using rule 69 (pair -> ident = STRING .)


state 120

    (71) pair -> ident = NUMBER .

    ,               reduce using rule 71 (pair -> ident = NUMBER .)
    SEMI            reduce using rule 71 (pair -> ident = NUMBER .)
    )               reduce using rule 71 (pair -> ident = NUMBER .)
    {               reduce using rule 71 (pair -> ident = NUMBER .)


state 121

    (67) pairsx -> pair , pairsx .

    SEMI            reduce using rule 67 (pairsx -> pair , pairsx .)
    )               reduce using rule 67 (pairsx -> pair , pairsx .)
    {               reduce using rule 67 (pairsx -> pair , pairsx .)


state 122

    (23) func_decl -> void ident ( params ) pairs . SEMI
    (26) func_def -> void ident ( params ) pairs . statements
    (73) statements -> . { statements_inner }
    (74) statements -> . { }

    SEMI            shift and go to state 177
    {               shift and go to state 113

    statements                     shift and go to state 176

state 123

    (19) decl -> ENUM ( type pairs ) { . type_enums }
    (34) type_enums -> . type_enum type_enums
    (35) type_enums -> . empty
    (36) type_enum -> . ident pairs SEMI
    (2) empty -> .
    (64) ident -> . IDENT

    }               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 4

    ident                          shift and go to state 178
    type_enums                     shift and go to state 179
    type_enum                      shift and go to state 180
    empty                          shift and go to state 181

state 124

    (8) decl -> MACHINE ( ident pairs ) : . params { decls }
    (49) params -> . param , params
    (50) params -> . param
    (51) params -> . empty
    (52) param -> . type ident
    (53) param -> . type STAR ident
    (54) param -> . type STAR ident = STRING
    (55) param -> . type ident = NUMBER
    (56) param -> . type ident = LIT_BOOL
    (57) param -> . type ident = STRING
    (2) empty -> .
    (45) type -> . typestr
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident
    (64) ident -> . IDENT

    {               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 4

    ident                          shift and go to state 21
    param                          shift and go to state 70
    params                         shift and go to state 182
    type                           shift and go to state 72
    typestr                        shift and go to state 19
    empty                          shift and go to state 73

state 125

    (16) decl -> EXTERN_TYPE ( type pairs ) SEMI .

    PROTOCOL        reduce using rule 16 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    INCLUDE         reduce using rule 16 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    MACHINE         reduce using rule 16 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    ACTION          reduce using rule 16 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    IN_PORT         reduce using rule 16 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    OUT_PORT        reduce using rule 16 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    TRANS           reduce using rule 16 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    EXTERN_TYPE     reduce using rule 16 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    GLOBAL          reduce using rule 16 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    STRUCT          reduce using rule 16 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    ENUM            reduce using rule 16 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    STATE_DECL      reduce using rule 16 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    VOID            reduce using rule 16 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    IDENT           reduce using rule 16 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    }               reduce using rule 16 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    $end            reduce using rule 16 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)


state 126

    (18) decl -> STRUCT ( type pairs ) { . type_members }
    (28) type_members -> . type_member type_members
    (29) type_members -> . empty
    (30) type_member -> . type_or_void ident ( types ) pairs SEMI
    (31) type_member -> . type_or_void ident ( params ) pairs statements
    (32) type_member -> . type_or_void ident pairs SEMI
    (33) type_member -> . type_or_void ident ASSIGN expr SEMI
    (2) empty -> .
    (47) type_or_void -> . type
    (48) type_or_void -> . void
    (45) type -> . typestr
    (46) void -> . VOID
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident
    (64) ident -> . IDENT

    }               reduce using rule 2 (empty -> .)
    VOID            shift and go to state 2
    IDENT           shift and go to state 4

    typestr                        shift and go to state 19
    ident                          shift and go to state 21
    void                           shift and go to state 134
    type_members                   shift and go to state 183
    type_member                    shift and go to state 130
    type                           shift and go to state 132
    type_or_void                   shift and go to state 131
    empty                          shift and go to state 133

state 127

    (20) decl -> STATE_DECL ( type pairs ) { . type_states }
    (37) type_states -> . type_state type_states
    (38) type_states -> . empty
    (39) type_state -> . ident , enumeration pairs SEMI
    (2) empty -> .
    (64) ident -> . IDENT

    }               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 4

    ident                          shift and go to state 184
    type_states                    shift and go to state 185
    type_state                     shift and go to state 186
    empty                          shift and go to state 187

state 128

    (10) decl -> IN_PORT ( ident , type , . var pairs ) statements
    (131) var -> . ident
    (64) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 188
    ident                          shift and go to state 137

state 129

    (17) decl -> GLOBAL ( type pairs ) { type_members . }

    }               shift and go to state 189


state 130

    (28) type_members -> type_member . type_members
    (28) type_members -> . type_member type_members
    (29) type_members -> . empty
    (30) type_member -> . type_or_void ident ( types ) pairs SEMI
    (31) type_member -> . type_or_void ident ( params ) pairs statements
    (32) type_member -> . type_or_void ident pairs SEMI
    (33) type_member -> . type_or_void ident ASSIGN expr SEMI
    (2) empty -> .
    (47) type_or_void -> . type
    (48) type_or_void -> . void
    (45) type -> . typestr
    (46) void -> . VOID
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident
    (64) ident -> . IDENT

    }               reduce using rule 2 (empty -> .)
    VOID            shift and go to state 2
    IDENT           shift and go to state 4

    typestr                        shift and go to state 19
    ident                          shift and go to state 21
    void                           shift and go to state 134
    type_members                   shift and go to state 190
    empty                          shift and go to state 133
    type_member                    shift and go to state 130
    type                           shift and go to state 132
    type_or_void                   shift and go to state 131

state 131

    (30) type_member -> type_or_void . ident ( types ) pairs SEMI
    (31) type_member -> type_or_void . ident ( params ) pairs statements
    (32) type_member -> type_or_void . ident pairs SEMI
    (33) type_member -> type_or_void . ident ASSIGN expr SEMI
    (64) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 191

state 132

    (47) type_or_void -> type .

    IDENT           reduce using rule 47 (type_or_void -> type .)


state 133

    (29) type_members -> empty .

    }               reduce using rule 29 (type_members -> empty .)


state 134

    (48) type_or_void -> void .

    IDENT           reduce using rule 48 (type_or_void -> void .)


state 135

    (13) decl -> TRANS ( idents , idents pairs ) . idents
    (15) decl -> TRANS ( idents , idents pairs ) . idents idents
    (58) idents -> . { identx }
    (59) idents -> . ident
    (64) ident -> . IDENT

    {               shift and go to state 45
    IDENT           shift and go to state 4

    ident                          shift and go to state 43
    idents                         shift and go to state 192

state 136

    (12) decl -> TRANS ( idents , idents , ident . pairs ) idents
    (14) decl -> TRANS ( idents , idents , ident . pairs ) idents idents
    (69) pair -> ident . = STRING
    (70) pair -> ident . = ident
    (71) pair -> ident . = NUMBER
    (65) pairs -> . , pairsx
    (66) pairs -> . empty
    (2) empty -> .

    =               shift and go to state 97
    ,               shift and go to state 50
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 193
    empty                          shift and go to state 51

state 137

    (131) var -> ident .

    )               reduce using rule 131 (var -> ident .)
    ,               reduce using rule 131 (var -> ident .)


state 138

    (11) decl -> OUT_PORT ( ident , type , var . pairs ) SEMI
    (65) pairs -> . , pairsx
    (66) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 50
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 194
    empty                          shift and go to state 51

state 139

    (84) statement -> PEEK . ( var , type pairs ) statements

    (               shift and go to state 195


state 140

    (90) statement -> RETURN . expr SEMI
    (106) expr -> . aexpr
    (107) expr -> . expr STAR expr
    (108) expr -> . expr SLASH expr
    (109) expr -> . expr PLUS expr
    (110) expr -> . expr DASH expr
    (111) expr -> . expr LT expr
    (112) expr -> . expr GT expr
    (113) expr -> . expr LE expr
    (114) expr -> . expr GE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr AND expr
    (118) expr -> . expr OR expr
    (119) expr -> . expr RIGHTSHIFT expr
    (120) expr -> . expr LEFTSHIFT expr
    (121) expr -> . NOT expr
    (122) expr -> . DASH expr
    (88) aexpr -> . STATIC_CAST ( type , expr )
    (89) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (95) aexpr -> . var
    (96) aexpr -> . type ident
    (97) aexpr -> . literal
    (98) aexpr -> . enumeration
    (99) aexpr -> . ident ( exprs )
    (100) aexpr -> . NEW type
    (101) aexpr -> . OOD
    (102) aexpr -> . aexpr DOT ident
    (103) aexpr -> . aexpr DOT ident ( exprs )
    (104) aexpr -> . aexpr [ exprs ]
    (105) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (123) aexpr -> . ( expr )
    (124) aexpr -> . IS_VALID ( var )
    (125) aexpr -> . IS_INVALID ( var )
    (131) var -> . ident
    (45) type -> . typestr
    (126) literal -> . STRING
    (127) literal -> . NUMBER
    (128) literal -> . FLOATNUMBER
    (129) literal -> . LIT_BOOL
    (130) enumeration -> . ident : ident
    (64) ident -> . IDENT
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 160
    STATIC_CAST     shift and go to state 146
    NEW             shift and go to state 144
    OOD             shift and go to state 162
    (               shift and go to state 148
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 149
    STRING          shift and go to state 157
    NUMBER          shift and go to state 142
    FLOATNUMBER     shift and go to state 141
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 163
    expr                           shift and go to state 196
    enumeration                    shift and go to state 150
    literal                        shift and go to state 159
    var                            shift and go to state 154
    typestr                        shift and go to state 19
    type                           shift and go to state 156
    aexpr                          shift and go to state 145

state 141

    (128) literal -> FLOATNUMBER .

    DOT             reduce using rule 128 (literal -> FLOATNUMBER .)
    [               reduce using rule 128 (literal -> FLOATNUMBER .)
    STAR            reduce using rule 128 (literal -> FLOATNUMBER .)
    SLASH           reduce using rule 128 (literal -> FLOATNUMBER .)
    PLUS            reduce using rule 128 (literal -> FLOATNUMBER .)
    DASH            reduce using rule 128 (literal -> FLOATNUMBER .)
    LT              reduce using rule 128 (literal -> FLOATNUMBER .)
    GT              reduce using rule 128 (literal -> FLOATNUMBER .)
    LE              reduce using rule 128 (literal -> FLOATNUMBER .)
    GE              reduce using rule 128 (literal -> FLOATNUMBER .)
    EQ              reduce using rule 128 (literal -> FLOATNUMBER .)
    NE              reduce using rule 128 (literal -> FLOATNUMBER .)
    AND             reduce using rule 128 (literal -> FLOATNUMBER .)
    OR              reduce using rule 128 (literal -> FLOATNUMBER .)
    RIGHTSHIFT      reduce using rule 128 (literal -> FLOATNUMBER .)
    LEFTSHIFT       reduce using rule 128 (literal -> FLOATNUMBER .)
    SEMI            reduce using rule 128 (literal -> FLOATNUMBER .)
    ASSIGN          reduce using rule 128 (literal -> FLOATNUMBER .)
    )               reduce using rule 128 (literal -> FLOATNUMBER .)
    ,               reduce using rule 128 (literal -> FLOATNUMBER .)
    ]               reduce using rule 128 (literal -> FLOATNUMBER .)


state 142

    (127) literal -> NUMBER .

    DOT             reduce using rule 127 (literal -> NUMBER .)
    [               reduce using rule 127 (literal -> NUMBER .)
    STAR            reduce using rule 127 (literal -> NUMBER .)
    SLASH           reduce using rule 127 (literal -> NUMBER .)
    PLUS            reduce using rule 127 (literal -> NUMBER .)
    DASH            reduce using rule 127 (literal -> NUMBER .)
    LT              reduce using rule 127 (literal -> NUMBER .)
    GT              reduce using rule 127 (literal -> NUMBER .)
    LE              reduce using rule 127 (literal -> NUMBER .)
    GE              reduce using rule 127 (literal -> NUMBER .)
    EQ              reduce using rule 127 (literal -> NUMBER .)
    NE              reduce using rule 127 (literal -> NUMBER .)
    AND             reduce using rule 127 (literal -> NUMBER .)
    OR              reduce using rule 127 (literal -> NUMBER .)
    RIGHTSHIFT      reduce using rule 127 (literal -> NUMBER .)
    LEFTSHIFT       reduce using rule 127 (literal -> NUMBER .)
    SEMI            reduce using rule 127 (literal -> NUMBER .)
    ASSIGN          reduce using rule 127 (literal -> NUMBER .)
    )               reduce using rule 127 (literal -> NUMBER .)
    ,               reduce using rule 127 (literal -> NUMBER .)
    ]               reduce using rule 127 (literal -> NUMBER .)


state 143

    (73) statements -> { statements_inner . }

    }               shift and go to state 197


state 144

    (100) aexpr -> NEW . type
    (45) type -> . typestr
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident
    (64) ident -> . IDENT

    IDENT           shift and go to state 4

    typestr                        shift and go to state 19
    ident                          shift and go to state 21
    type                           shift and go to state 198

state 145

    (106) expr -> aexpr .
    (102) aexpr -> aexpr . DOT ident
    (103) aexpr -> aexpr . DOT ident ( exprs )
    (104) aexpr -> aexpr . [ exprs ]

    SEMI            reduce using rule 106 (expr -> aexpr .)
    STAR            reduce using rule 106 (expr -> aexpr .)
    SLASH           reduce using rule 106 (expr -> aexpr .)
    PLUS            reduce using rule 106 (expr -> aexpr .)
    DASH            reduce using rule 106 (expr -> aexpr .)
    LT              reduce using rule 106 (expr -> aexpr .)
    GT              reduce using rule 106 (expr -> aexpr .)
    LE              reduce using rule 106 (expr -> aexpr .)
    GE              reduce using rule 106 (expr -> aexpr .)
    EQ              reduce using rule 106 (expr -> aexpr .)
    NE              reduce using rule 106 (expr -> aexpr .)
    AND             reduce using rule 106 (expr -> aexpr .)
    OR              reduce using rule 106 (expr -> aexpr .)
    RIGHTSHIFT      reduce using rule 106 (expr -> aexpr .)
    LEFTSHIFT       reduce using rule 106 (expr -> aexpr .)
    ASSIGN          reduce using rule 106 (expr -> aexpr .)
    )               reduce using rule 106 (expr -> aexpr .)
    ,               reduce using rule 106 (expr -> aexpr .)
    ]               reduce using rule 106 (expr -> aexpr .)
    DOT             shift and go to state 200
    [               shift and go to state 199


state 146

    (88) aexpr -> STATIC_CAST . ( type , expr )
    (89) aexpr -> STATIC_CAST . ( type , STRING , expr )

    (               shift and go to state 201


state 147

    (86) statement -> CHECK_ALLOCATE . ( var ) SEMI

    (               shift and go to state 202


state 148

    (123) aexpr -> ( . expr )
    (106) expr -> . aexpr
    (107) expr -> . expr STAR expr
    (108) expr -> . expr SLASH expr
    (109) expr -> . expr PLUS expr
    (110) expr -> . expr DASH expr
    (111) expr -> . expr LT expr
    (112) expr -> . expr GT expr
    (113) expr -> . expr LE expr
    (114) expr -> . expr GE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr AND expr
    (118) expr -> . expr OR expr
    (119) expr -> . expr RIGHTSHIFT expr
    (120) expr -> . expr LEFTSHIFT expr
    (121) expr -> . NOT expr
    (122) expr -> . DASH expr
    (88) aexpr -> . STATIC_CAST ( type , expr )
    (89) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (95) aexpr -> . var
    (96) aexpr -> . type ident
    (97) aexpr -> . literal
    (98) aexpr -> . enumeration
    (99) aexpr -> . ident ( exprs )
    (100) aexpr -> . NEW type
    (101) aexpr -> . OOD
    (102) aexpr -> . aexpr DOT ident
    (103) aexpr -> . aexpr DOT ident ( exprs )
    (104) aexpr -> . aexpr [ exprs ]
    (105) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (123) aexpr -> . ( expr )
    (124) aexpr -> . IS_VALID ( var )
    (125) aexpr -> . IS_INVALID ( var )
    (131) var -> . ident
    (45) type -> . typestr
    (126) literal -> . STRING
    (127) literal -> . NUMBER
    (128) literal -> . FLOATNUMBER
    (129) literal -> . LIT_BOOL
    (130) enumeration -> . ident : ident
    (64) ident -> . IDENT
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 160
    STATIC_CAST     shift and go to state 146
    NEW             shift and go to state 144
    OOD             shift and go to state 162
    (               shift and go to state 148
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 149
    STRING          shift and go to state 157
    NUMBER          shift and go to state 142
    FLOATNUMBER     shift and go to state 141
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 163
    expr                           shift and go to state 203
    enumeration                    shift and go to state 150
    literal                        shift and go to state 159
    var                            shift and go to state 154
    typestr                        shift and go to state 19
    type                           shift and go to state 156
    aexpr                          shift and go to state 145

state 149

    (125) aexpr -> IS_INVALID . ( var )

    (               shift and go to state 204


state 150

    (98) aexpr -> enumeration .

    DOT             reduce using rule 98 (aexpr -> enumeration .)
    [               reduce using rule 98 (aexpr -> enumeration .)
    )               reduce using rule 98 (aexpr -> enumeration .)
    STAR            reduce using rule 98 (aexpr -> enumeration .)
    SLASH           reduce using rule 98 (aexpr -> enumeration .)
    PLUS            reduce using rule 98 (aexpr -> enumeration .)
    DASH            reduce using rule 98 (aexpr -> enumeration .)
    LT              reduce using rule 98 (aexpr -> enumeration .)
    GT              reduce using rule 98 (aexpr -> enumeration .)
    LE              reduce using rule 98 (aexpr -> enumeration .)
    GE              reduce using rule 98 (aexpr -> enumeration .)
    EQ              reduce using rule 98 (aexpr -> enumeration .)
    NE              reduce using rule 98 (aexpr -> enumeration .)
    AND             reduce using rule 98 (aexpr -> enumeration .)
    OR              reduce using rule 98 (aexpr -> enumeration .)
    RIGHTSHIFT      reduce using rule 98 (aexpr -> enumeration .)
    LEFTSHIFT       reduce using rule 98 (aexpr -> enumeration .)
    SEMI            reduce using rule 98 (aexpr -> enumeration .)
    ASSIGN          reduce using rule 98 (aexpr -> enumeration .)
    ,               reduce using rule 98 (aexpr -> enumeration .)
    ]               reduce using rule 98 (aexpr -> enumeration .)


state 151

    (82) statement -> ENQUEUE . ( var , type pairs ) statements

    (               shift and go to state 205


state 152

    (85) statement -> COPY_HEAD . ( var , var pairs ) SEMI

    (               shift and go to state 206


state 153

    (75) statements_inner -> statement . statements_inner
    (76) statements_inner -> statement .
    (75) statements_inner -> . statement statements_inner
    (76) statements_inner -> . statement
    (80) statement -> . expr SEMI
    (81) statement -> . expr ASSIGN expr SEMI
    (82) statement -> . ENQUEUE ( var , type pairs ) statements
    (83) statement -> . STALL_AND_WAIT ( var , var ) SEMI
    (84) statement -> . PEEK ( var , type pairs ) statements
    (85) statement -> . COPY_HEAD ( var , var pairs ) SEMI
    (86) statement -> . CHECK_ALLOCATE ( var ) SEMI
    (87) statement -> . CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI
    (90) statement -> . RETURN expr SEMI
    (91) statement -> . if_statement
    (106) expr -> . aexpr
    (107) expr -> . expr STAR expr
    (108) expr -> . expr SLASH expr
    (109) expr -> . expr PLUS expr
    (110) expr -> . expr DASH expr
    (111) expr -> . expr LT expr
    (112) expr -> . expr GT expr
    (113) expr -> . expr LE expr
    (114) expr -> . expr GE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr AND expr
    (118) expr -> . expr OR expr
    (119) expr -> . expr RIGHTSHIFT expr
    (120) expr -> . expr LEFTSHIFT expr
    (121) expr -> . NOT expr
    (122) expr -> . DASH expr
    (92) if_statement -> . IF ( expr ) statements
    (93) if_statement -> . IF ( expr ) statements ELSE statements
    (94) if_statement -> . IF ( expr ) statements ELSE if_statement
    (88) aexpr -> . STATIC_CAST ( type , expr )
    (89) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (95) aexpr -> . var
    (96) aexpr -> . type ident
    (97) aexpr -> . literal
    (98) aexpr -> . enumeration
    (99) aexpr -> . ident ( exprs )
    (100) aexpr -> . NEW type
    (101) aexpr -> . OOD
    (102) aexpr -> . aexpr DOT ident
    (103) aexpr -> . aexpr DOT ident ( exprs )
    (104) aexpr -> . aexpr [ exprs ]
    (105) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (123) aexpr -> . ( expr )
    (124) aexpr -> . IS_VALID ( var )
    (125) aexpr -> . IS_INVALID ( var )
    (131) var -> . ident
    (45) type -> . typestr
    (126) literal -> . STRING
    (127) literal -> . NUMBER
    (128) literal -> . FLOATNUMBER
    (129) literal -> . LIT_BOOL
    (130) enumeration -> . ident : ident
    (64) ident -> . IDENT
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident

    }               reduce using rule 76 (statements_inner -> statement .)
    ENQUEUE         shift and go to state 151
    STALL_AND_WAIT  shift and go to state 158
    PEEK            shift and go to state 139
    COPY_HEAD       shift and go to state 152
    CHECK_ALLOCATE  shift and go to state 147
    CHECK_STOP_SLOTS shift and go to state 167
    RETURN          shift and go to state 140
    NOT             shift and go to state 168
    DASH            shift and go to state 160
    IF              shift and go to state 161
    STATIC_CAST     shift and go to state 146
    NEW             shift and go to state 144
    OOD             shift and go to state 162
    (               shift and go to state 148
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 149
    STRING          shift and go to state 157
    NUMBER          shift and go to state 142
    FLOATNUMBER     shift and go to state 141
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 163
    expr                           shift and go to state 164
    enumeration                    shift and go to state 150
    literal                        shift and go to state 159
    statements_inner               shift and go to state 207
    statement                      shift and go to state 153
    var                            shift and go to state 154
    typestr                        shift and go to state 19
    if_statement                   shift and go to state 155
    type                           shift and go to state 156
    aexpr                          shift and go to state 145

state 154

    (95) aexpr -> var .

    DOT             reduce using rule 95 (aexpr -> var .)
    [               reduce using rule 95 (aexpr -> var .)
    )               reduce using rule 95 (aexpr -> var .)
    STAR            reduce using rule 95 (aexpr -> var .)
    SLASH           reduce using rule 95 (aexpr -> var .)
    PLUS            reduce using rule 95 (aexpr -> var .)
    DASH            reduce using rule 95 (aexpr -> var .)
    LT              reduce using rule 95 (aexpr -> var .)
    GT              reduce using rule 95 (aexpr -> var .)
    LE              reduce using rule 95 (aexpr -> var .)
    GE              reduce using rule 95 (aexpr -> var .)
    EQ              reduce using rule 95 (aexpr -> var .)
    NE              reduce using rule 95 (aexpr -> var .)
    AND             reduce using rule 95 (aexpr -> var .)
    OR              reduce using rule 95 (aexpr -> var .)
    RIGHTSHIFT      reduce using rule 95 (aexpr -> var .)
    LEFTSHIFT       reduce using rule 95 (aexpr -> var .)
    SEMI            reduce using rule 95 (aexpr -> var .)
    ASSIGN          reduce using rule 95 (aexpr -> var .)
    ,               reduce using rule 95 (aexpr -> var .)
    ]               reduce using rule 95 (aexpr -> var .)


state 155

    (91) statement -> if_statement .

    ENQUEUE         reduce using rule 91 (statement -> if_statement .)
    STALL_AND_WAIT  reduce using rule 91 (statement -> if_statement .)
    PEEK            reduce using rule 91 (statement -> if_statement .)
    COPY_HEAD       reduce using rule 91 (statement -> if_statement .)
    CHECK_ALLOCATE  reduce using rule 91 (statement -> if_statement .)
    CHECK_STOP_SLOTS reduce using rule 91 (statement -> if_statement .)
    RETURN          reduce using rule 91 (statement -> if_statement .)
    NOT             reduce using rule 91 (statement -> if_statement .)
    DASH            reduce using rule 91 (statement -> if_statement .)
    IF              reduce using rule 91 (statement -> if_statement .)
    STATIC_CAST     reduce using rule 91 (statement -> if_statement .)
    NEW             reduce using rule 91 (statement -> if_statement .)
    OOD             reduce using rule 91 (statement -> if_statement .)
    (               reduce using rule 91 (statement -> if_statement .)
    IS_VALID        reduce using rule 91 (statement -> if_statement .)
    IS_INVALID      reduce using rule 91 (statement -> if_statement .)
    STRING          reduce using rule 91 (statement -> if_statement .)
    NUMBER          reduce using rule 91 (statement -> if_statement .)
    FLOATNUMBER     reduce using rule 91 (statement -> if_statement .)
    LIT_BOOL        reduce using rule 91 (statement -> if_statement .)
    IDENT           reduce using rule 91 (statement -> if_statement .)
    }               reduce using rule 91 (statement -> if_statement .)


state 156

    (96) aexpr -> type . ident
    (105) aexpr -> type . DOUBLE_COLON ident ( exprs )
    (64) ident -> . IDENT

    DOUBLE_COLON    shift and go to state 209
    IDENT           shift and go to state 4

    ident                          shift and go to state 208

state 157

    (126) literal -> STRING .

    DOT             reduce using rule 126 (literal -> STRING .)
    [               reduce using rule 126 (literal -> STRING .)
    STAR            reduce using rule 126 (literal -> STRING .)
    SLASH           reduce using rule 126 (literal -> STRING .)
    PLUS            reduce using rule 126 (literal -> STRING .)
    DASH            reduce using rule 126 (literal -> STRING .)
    LT              reduce using rule 126 (literal -> STRING .)
    GT              reduce using rule 126 (literal -> STRING .)
    LE              reduce using rule 126 (literal -> STRING .)
    GE              reduce using rule 126 (literal -> STRING .)
    EQ              reduce using rule 126 (literal -> STRING .)
    NE              reduce using rule 126 (literal -> STRING .)
    AND             reduce using rule 126 (literal -> STRING .)
    OR              reduce using rule 126 (literal -> STRING .)
    RIGHTSHIFT      reduce using rule 126 (literal -> STRING .)
    LEFTSHIFT       reduce using rule 126 (literal -> STRING .)
    SEMI            reduce using rule 126 (literal -> STRING .)
    ASSIGN          reduce using rule 126 (literal -> STRING .)
    )               reduce using rule 126 (literal -> STRING .)
    ,               reduce using rule 126 (literal -> STRING .)
    ]               reduce using rule 126 (literal -> STRING .)


state 158

    (83) statement -> STALL_AND_WAIT . ( var , var ) SEMI

    (               shift and go to state 210


state 159

    (97) aexpr -> literal .

    DOT             reduce using rule 97 (aexpr -> literal .)
    [               reduce using rule 97 (aexpr -> literal .)
    )               reduce using rule 97 (aexpr -> literal .)
    STAR            reduce using rule 97 (aexpr -> literal .)
    SLASH           reduce using rule 97 (aexpr -> literal .)
    PLUS            reduce using rule 97 (aexpr -> literal .)
    DASH            reduce using rule 97 (aexpr -> literal .)
    LT              reduce using rule 97 (aexpr -> literal .)
    GT              reduce using rule 97 (aexpr -> literal .)
    LE              reduce using rule 97 (aexpr -> literal .)
    GE              reduce using rule 97 (aexpr -> literal .)
    EQ              reduce using rule 97 (aexpr -> literal .)
    NE              reduce using rule 97 (aexpr -> literal .)
    AND             reduce using rule 97 (aexpr -> literal .)
    OR              reduce using rule 97 (aexpr -> literal .)
    RIGHTSHIFT      reduce using rule 97 (aexpr -> literal .)
    LEFTSHIFT       reduce using rule 97 (aexpr -> literal .)
    SEMI            reduce using rule 97 (aexpr -> literal .)
    ASSIGN          reduce using rule 97 (aexpr -> literal .)
    ,               reduce using rule 97 (aexpr -> literal .)
    ]               reduce using rule 97 (aexpr -> literal .)


state 160

    (122) expr -> DASH . expr
    (106) expr -> . aexpr
    (107) expr -> . expr STAR expr
    (108) expr -> . expr SLASH expr
    (109) expr -> . expr PLUS expr
    (110) expr -> . expr DASH expr
    (111) expr -> . expr LT expr
    (112) expr -> . expr GT expr
    (113) expr -> . expr LE expr
    (114) expr -> . expr GE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr AND expr
    (118) expr -> . expr OR expr
    (119) expr -> . expr RIGHTSHIFT expr
    (120) expr -> . expr LEFTSHIFT expr
    (121) expr -> . NOT expr
    (122) expr -> . DASH expr
    (88) aexpr -> . STATIC_CAST ( type , expr )
    (89) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (95) aexpr -> . var
    (96) aexpr -> . type ident
    (97) aexpr -> . literal
    (98) aexpr -> . enumeration
    (99) aexpr -> . ident ( exprs )
    (100) aexpr -> . NEW type
    (101) aexpr -> . OOD
    (102) aexpr -> . aexpr DOT ident
    (103) aexpr -> . aexpr DOT ident ( exprs )
    (104) aexpr -> . aexpr [ exprs ]
    (105) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (123) aexpr -> . ( expr )
    (124) aexpr -> . IS_VALID ( var )
    (125) aexpr -> . IS_INVALID ( var )
    (131) var -> . ident
    (45) type -> . typestr
    (126) literal -> . STRING
    (127) literal -> . NUMBER
    (128) literal -> . FLOATNUMBER
    (129) literal -> . LIT_BOOL
    (130) enumeration -> . ident : ident
    (64) ident -> . IDENT
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 160
    STATIC_CAST     shift and go to state 146
    NEW             shift and go to state 144
    OOD             shift and go to state 162
    (               shift and go to state 148
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 149
    STRING          shift and go to state 157
    NUMBER          shift and go to state 142
    FLOATNUMBER     shift and go to state 141
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 163
    expr                           shift and go to state 211
    enumeration                    shift and go to state 150
    literal                        shift and go to state 159
    var                            shift and go to state 154
    typestr                        shift and go to state 19
    type                           shift and go to state 156
    aexpr                          shift and go to state 145

state 161

    (92) if_statement -> IF . ( expr ) statements
    (93) if_statement -> IF . ( expr ) statements ELSE statements
    (94) if_statement -> IF . ( expr ) statements ELSE if_statement

    (               shift and go to state 212


state 162

    (101) aexpr -> OOD .

    DOT             reduce using rule 101 (aexpr -> OOD .)
    [               reduce using rule 101 (aexpr -> OOD .)
    )               reduce using rule 101 (aexpr -> OOD .)
    STAR            reduce using rule 101 (aexpr -> OOD .)
    SLASH           reduce using rule 101 (aexpr -> OOD .)
    PLUS            reduce using rule 101 (aexpr -> OOD .)
    DASH            reduce using rule 101 (aexpr -> OOD .)
    LT              reduce using rule 101 (aexpr -> OOD .)
    GT              reduce using rule 101 (aexpr -> OOD .)
    LE              reduce using rule 101 (aexpr -> OOD .)
    GE              reduce using rule 101 (aexpr -> OOD .)
    EQ              reduce using rule 101 (aexpr -> OOD .)
    NE              reduce using rule 101 (aexpr -> OOD .)
    AND             reduce using rule 101 (aexpr -> OOD .)
    OR              reduce using rule 101 (aexpr -> OOD .)
    RIGHTSHIFT      reduce using rule 101 (aexpr -> OOD .)
    LEFTSHIFT       reduce using rule 101 (aexpr -> OOD .)
    SEMI            reduce using rule 101 (aexpr -> OOD .)
    ASSIGN          reduce using rule 101 (aexpr -> OOD .)
    ,               reduce using rule 101 (aexpr -> OOD .)
    ]               reduce using rule 101 (aexpr -> OOD .)


state 163

    (99) aexpr -> ident . ( exprs )
    (131) var -> ident .
    (130) enumeration -> ident . : ident
    (44) typestr -> ident .

    (               shift and go to state 213
    DOT             reduce using rule 131 (var -> ident .)
    [               reduce using rule 131 (var -> ident .)
    STAR            reduce using rule 131 (var -> ident .)
    SLASH           reduce using rule 131 (var -> ident .)
    PLUS            reduce using rule 131 (var -> ident .)
    DASH            reduce using rule 131 (var -> ident .)
    LT              reduce using rule 131 (var -> ident .)
    GT              reduce using rule 131 (var -> ident .)
    LE              reduce using rule 131 (var -> ident .)
    GE              reduce using rule 131 (var -> ident .)
    EQ              reduce using rule 131 (var -> ident .)
    NE              reduce using rule 131 (var -> ident .)
    AND             reduce using rule 131 (var -> ident .)
    OR              reduce using rule 131 (var -> ident .)
    RIGHTSHIFT      reduce using rule 131 (var -> ident .)
    LEFTSHIFT       reduce using rule 131 (var -> ident .)
    SEMI            reduce using rule 131 (var -> ident .)
    ASSIGN          reduce using rule 131 (var -> ident .)
    )               reduce using rule 131 (var -> ident .)
    ,               reduce using rule 131 (var -> ident .)
    ]               reduce using rule 131 (var -> ident .)
    :               shift and go to state 214
    DOUBLE_COLON    reduce using rule 44 (typestr -> ident .)
    IDENT           reduce using rule 44 (typestr -> ident .)


state 164

    (80) statement -> expr . SEMI
    (81) statement -> expr . ASSIGN expr SEMI
    (107) expr -> expr . STAR expr
    (108) expr -> expr . SLASH expr
    (109) expr -> expr . PLUS expr
    (110) expr -> expr . DASH expr
    (111) expr -> expr . LT expr
    (112) expr -> expr . GT expr
    (113) expr -> expr . LE expr
    (114) expr -> expr . GE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . AND expr
    (118) expr -> expr . OR expr
    (119) expr -> expr . RIGHTSHIFT expr
    (120) expr -> expr . LEFTSHIFT expr

    SEMI            shift and go to state 219
    ASSIGN          shift and go to state 229
    STAR            shift and go to state 218
    SLASH           shift and go to state 226
    PLUS            shift and go to state 225
    DASH            shift and go to state 222
    LT              shift and go to state 223
    GT              shift and go to state 217
    LE              shift and go to state 224
    GE              shift and go to state 220
    EQ              shift and go to state 228
    NE              shift and go to state 221
    AND             shift and go to state 215
    OR              shift and go to state 230
    RIGHTSHIFT      shift and go to state 227
    LEFTSHIFT       shift and go to state 216


state 165

    (129) literal -> LIT_BOOL .

    DOT             reduce using rule 129 (literal -> LIT_BOOL .)
    [               reduce using rule 129 (literal -> LIT_BOOL .)
    STAR            reduce using rule 129 (literal -> LIT_BOOL .)
    SLASH           reduce using rule 129 (literal -> LIT_BOOL .)
    PLUS            reduce using rule 129 (literal -> LIT_BOOL .)
    DASH            reduce using rule 129 (literal -> LIT_BOOL .)
    LT              reduce using rule 129 (literal -> LIT_BOOL .)
    GT              reduce using rule 129 (literal -> LIT_BOOL .)
    LE              reduce using rule 129 (literal -> LIT_BOOL .)
    GE              reduce using rule 129 (literal -> LIT_BOOL .)
    EQ              reduce using rule 129 (literal -> LIT_BOOL .)
    NE              reduce using rule 129 (literal -> LIT_BOOL .)
    AND             reduce using rule 129 (literal -> LIT_BOOL .)
    OR              reduce using rule 129 (literal -> LIT_BOOL .)
    RIGHTSHIFT      reduce using rule 129 (literal -> LIT_BOOL .)
    LEFTSHIFT       reduce using rule 129 (literal -> LIT_BOOL .)
    SEMI            reduce using rule 129 (literal -> LIT_BOOL .)
    ASSIGN          reduce using rule 129 (literal -> LIT_BOOL .)
    )               reduce using rule 129 (literal -> LIT_BOOL .)
    ,               reduce using rule 129 (literal -> LIT_BOOL .)
    ]               reduce using rule 129 (literal -> LIT_BOOL .)


state 166

    (124) aexpr -> IS_VALID . ( var )

    (               shift and go to state 231


state 167

    (87) statement -> CHECK_STOP_SLOTS . ( var , STRING , STRING ) SEMI

    (               shift and go to state 232


state 168

    (121) expr -> NOT . expr
    (106) expr -> . aexpr
    (107) expr -> . expr STAR expr
    (108) expr -> . expr SLASH expr
    (109) expr -> . expr PLUS expr
    (110) expr -> . expr DASH expr
    (111) expr -> . expr LT expr
    (112) expr -> . expr GT expr
    (113) expr -> . expr LE expr
    (114) expr -> . expr GE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr AND expr
    (118) expr -> . expr OR expr
    (119) expr -> . expr RIGHTSHIFT expr
    (120) expr -> . expr LEFTSHIFT expr
    (121) expr -> . NOT expr
    (122) expr -> . DASH expr
    (88) aexpr -> . STATIC_CAST ( type , expr )
    (89) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (95) aexpr -> . var
    (96) aexpr -> . type ident
    (97) aexpr -> . literal
    (98) aexpr -> . enumeration
    (99) aexpr -> . ident ( exprs )
    (100) aexpr -> . NEW type
    (101) aexpr -> . OOD
    (102) aexpr -> . aexpr DOT ident
    (103) aexpr -> . aexpr DOT ident ( exprs )
    (104) aexpr -> . aexpr [ exprs ]
    (105) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (123) aexpr -> . ( expr )
    (124) aexpr -> . IS_VALID ( var )
    (125) aexpr -> . IS_INVALID ( var )
    (131) var -> . ident
    (45) type -> . typestr
    (126) literal -> . STRING
    (127) literal -> . NUMBER
    (128) literal -> . FLOATNUMBER
    (129) literal -> . LIT_BOOL
    (130) enumeration -> . ident : ident
    (64) ident -> . IDENT
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 160
    STATIC_CAST     shift and go to state 146
    NEW             shift and go to state 144
    OOD             shift and go to state 162
    (               shift and go to state 148
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 149
    STRING          shift and go to state 157
    NUMBER          shift and go to state 142
    FLOATNUMBER     shift and go to state 141
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 163
    expr                           shift and go to state 233
    enumeration                    shift and go to state 150
    literal                        shift and go to state 159
    var                            shift and go to state 154
    typestr                        shift and go to state 19
    type                           shift and go to state 156
    aexpr                          shift and go to state 145

state 169

    (74) statements -> { } .

    ELSE            reduce using rule 74 (statements -> { } .)
    ENQUEUE         reduce using rule 74 (statements -> { } .)
    STALL_AND_WAIT  reduce using rule 74 (statements -> { } .)
    PEEK            reduce using rule 74 (statements -> { } .)
    COPY_HEAD       reduce using rule 74 (statements -> { } .)
    CHECK_ALLOCATE  reduce using rule 74 (statements -> { } .)
    CHECK_STOP_SLOTS reduce using rule 74 (statements -> { } .)
    RETURN          reduce using rule 74 (statements -> { } .)
    NOT             reduce using rule 74 (statements -> { } .)
    DASH            reduce using rule 74 (statements -> { } .)
    IF              reduce using rule 74 (statements -> { } .)
    STATIC_CAST     reduce using rule 74 (statements -> { } .)
    NEW             reduce using rule 74 (statements -> { } .)
    OOD             reduce using rule 74 (statements -> { } .)
    (               reduce using rule 74 (statements -> { } .)
    IS_VALID        reduce using rule 74 (statements -> { } .)
    IS_INVALID      reduce using rule 74 (statements -> { } .)
    STRING          reduce using rule 74 (statements -> { } .)
    NUMBER          reduce using rule 74 (statements -> { } .)
    FLOATNUMBER     reduce using rule 74 (statements -> { } .)
    LIT_BOOL        reduce using rule 74 (statements -> { } .)
    IDENT           reduce using rule 74 (statements -> { } .)
    }               reduce using rule 74 (statements -> { } .)
    PROTOCOL        reduce using rule 74 (statements -> { } .)
    INCLUDE         reduce using rule 74 (statements -> { } .)
    MACHINE         reduce using rule 74 (statements -> { } .)
    ACTION          reduce using rule 74 (statements -> { } .)
    IN_PORT         reduce using rule 74 (statements -> { } .)
    OUT_PORT        reduce using rule 74 (statements -> { } .)
    TRANS           reduce using rule 74 (statements -> { } .)
    EXTERN_TYPE     reduce using rule 74 (statements -> { } .)
    GLOBAL          reduce using rule 74 (statements -> { } .)
    STRUCT          reduce using rule 74 (statements -> { } .)
    ENUM            reduce using rule 74 (statements -> { } .)
    STATE_DECL      reduce using rule 74 (statements -> { } .)
    VOID            reduce using rule 74 (statements -> { } .)
    $end            reduce using rule 74 (statements -> { } .)


state 170

    (27) func_def -> type ident ( params ) pairs statements .

    PROTOCOL        reduce using rule 27 (func_def -> type ident ( params ) pairs statements .)
    INCLUDE         reduce using rule 27 (func_def -> type ident ( params ) pairs statements .)
    MACHINE         reduce using rule 27 (func_def -> type ident ( params ) pairs statements .)
    ACTION          reduce using rule 27 (func_def -> type ident ( params ) pairs statements .)
    IN_PORT         reduce using rule 27 (func_def -> type ident ( params ) pairs statements .)
    OUT_PORT        reduce using rule 27 (func_def -> type ident ( params ) pairs statements .)
    TRANS           reduce using rule 27 (func_def -> type ident ( params ) pairs statements .)
    EXTERN_TYPE     reduce using rule 27 (func_def -> type ident ( params ) pairs statements .)
    GLOBAL          reduce using rule 27 (func_def -> type ident ( params ) pairs statements .)
    STRUCT          reduce using rule 27 (func_def -> type ident ( params ) pairs statements .)
    ENUM            reduce using rule 27 (func_def -> type ident ( params ) pairs statements .)
    STATE_DECL      reduce using rule 27 (func_def -> type ident ( params ) pairs statements .)
    VOID            reduce using rule 27 (func_def -> type ident ( params ) pairs statements .)
    IDENT           reduce using rule 27 (func_def -> type ident ( params ) pairs statements .)
    $end            reduce using rule 27 (func_def -> type ident ( params ) pairs statements .)
    }               reduce using rule 27 (func_def -> type ident ( params ) pairs statements .)


state 171

    (24) func_decl -> type ident ( params ) pairs SEMI .

    PROTOCOL        reduce using rule 24 (func_decl -> type ident ( params ) pairs SEMI .)
    INCLUDE         reduce using rule 24 (func_decl -> type ident ( params ) pairs SEMI .)
    MACHINE         reduce using rule 24 (func_decl -> type ident ( params ) pairs SEMI .)
    ACTION          reduce using rule 24 (func_decl -> type ident ( params ) pairs SEMI .)
    IN_PORT         reduce using rule 24 (func_decl -> type ident ( params ) pairs SEMI .)
    OUT_PORT        reduce using rule 24 (func_decl -> type ident ( params ) pairs SEMI .)
    TRANS           reduce using rule 24 (func_decl -> type ident ( params ) pairs SEMI .)
    EXTERN_TYPE     reduce using rule 24 (func_decl -> type ident ( params ) pairs SEMI .)
    GLOBAL          reduce using rule 24 (func_decl -> type ident ( params ) pairs SEMI .)
    STRUCT          reduce using rule 24 (func_decl -> type ident ( params ) pairs SEMI .)
    ENUM            reduce using rule 24 (func_decl -> type ident ( params ) pairs SEMI .)
    STATE_DECL      reduce using rule 24 (func_decl -> type ident ( params ) pairs SEMI .)
    VOID            reduce using rule 24 (func_decl -> type ident ( params ) pairs SEMI .)
    IDENT           reduce using rule 24 (func_decl -> type ident ( params ) pairs SEMI .)
    }               reduce using rule 24 (func_decl -> type ident ( params ) pairs SEMI .)
    $end            reduce using rule 24 (func_decl -> type ident ( params ) pairs SEMI .)


state 172

    (57) param -> type ident = STRING .

    ,               reduce using rule 57 (param -> type ident = STRING .)
    )               reduce using rule 57 (param -> type ident = STRING .)
    {               reduce using rule 57 (param -> type ident = STRING .)


state 173

    (55) param -> type ident = NUMBER .

    ,               reduce using rule 55 (param -> type ident = NUMBER .)
    )               reduce using rule 55 (param -> type ident = NUMBER .)
    {               reduce using rule 55 (param -> type ident = NUMBER .)


state 174

    (56) param -> type ident = LIT_BOOL .

    ,               reduce using rule 56 (param -> type ident = LIT_BOOL .)
    )               reduce using rule 56 (param -> type ident = LIT_BOOL .)
    {               reduce using rule 56 (param -> type ident = LIT_BOOL .)


state 175

    (54) param -> type STAR ident = . STRING

    STRING          shift and go to state 234


state 176

    (26) func_def -> void ident ( params ) pairs statements .

    PROTOCOL        reduce using rule 26 (func_def -> void ident ( params ) pairs statements .)
    INCLUDE         reduce using rule 26 (func_def -> void ident ( params ) pairs statements .)
    MACHINE         reduce using rule 26 (func_def -> void ident ( params ) pairs statements .)
    ACTION          reduce using rule 26 (func_def -> void ident ( params ) pairs statements .)
    IN_PORT         reduce using rule 26 (func_def -> void ident ( params ) pairs statements .)
    OUT_PORT        reduce using rule 26 (func_def -> void ident ( params ) pairs statements .)
    TRANS           reduce using rule 26 (func_def -> void ident ( params ) pairs statements .)
    EXTERN_TYPE     reduce using rule 26 (func_def -> void ident ( params ) pairs statements .)
    GLOBAL          reduce using rule 26 (func_def -> void ident ( params ) pairs statements .)
    STRUCT          reduce using rule 26 (func_def -> void ident ( params ) pairs statements .)
    ENUM            reduce using rule 26 (func_def -> void ident ( params ) pairs statements .)
    STATE_DECL      reduce using rule 26 (func_def -> void ident ( params ) pairs statements .)
    VOID            reduce using rule 26 (func_def -> void ident ( params ) pairs statements .)
    IDENT           reduce using rule 26 (func_def -> void ident ( params ) pairs statements .)
    $end            reduce using rule 26 (func_def -> void ident ( params ) pairs statements .)
    }               reduce using rule 26 (func_def -> void ident ( params ) pairs statements .)


state 177

    (23) func_decl -> void ident ( params ) pairs SEMI .

    PROTOCOL        reduce using rule 23 (func_decl -> void ident ( params ) pairs SEMI .)
    INCLUDE         reduce using rule 23 (func_decl -> void ident ( params ) pairs SEMI .)
    MACHINE         reduce using rule 23 (func_decl -> void ident ( params ) pairs SEMI .)
    ACTION          reduce using rule 23 (func_decl -> void ident ( params ) pairs SEMI .)
    IN_PORT         reduce using rule 23 (func_decl -> void ident ( params ) pairs SEMI .)
    OUT_PORT        reduce using rule 23 (func_decl -> void ident ( params ) pairs SEMI .)
    TRANS           reduce using rule 23 (func_decl -> void ident ( params ) pairs SEMI .)
    EXTERN_TYPE     reduce using rule 23 (func_decl -> void ident ( params ) pairs SEMI .)
    GLOBAL          reduce using rule 23 (func_decl -> void ident ( params ) pairs SEMI .)
    STRUCT          reduce using rule 23 (func_decl -> void ident ( params ) pairs SEMI .)
    ENUM            reduce using rule 23 (func_decl -> void ident ( params ) pairs SEMI .)
    STATE_DECL      reduce using rule 23 (func_decl -> void ident ( params ) pairs SEMI .)
    VOID            reduce using rule 23 (func_decl -> void ident ( params ) pairs SEMI .)
    IDENT           reduce using rule 23 (func_decl -> void ident ( params ) pairs SEMI .)
    }               reduce using rule 23 (func_decl -> void ident ( params ) pairs SEMI .)
    $end            reduce using rule 23 (func_decl -> void ident ( params ) pairs SEMI .)


state 178

    (36) type_enum -> ident . pairs SEMI
    (65) pairs -> . , pairsx
    (66) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 50
    SEMI            reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 235
    empty                          shift and go to state 51

state 179

    (19) decl -> ENUM ( type pairs ) { type_enums . }

    }               shift and go to state 236


state 180

    (34) type_enums -> type_enum . type_enums
    (34) type_enums -> . type_enum type_enums
    (35) type_enums -> . empty
    (36) type_enum -> . ident pairs SEMI
    (2) empty -> .
    (64) ident -> . IDENT

    }               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 4

    type_enum                      shift and go to state 180
    ident                          shift and go to state 178
    empty                          shift and go to state 181
    type_enums                     shift and go to state 237

state 181

    (35) type_enums -> empty .

    }               reduce using rule 35 (type_enums -> empty .)


state 182

    (8) decl -> MACHINE ( ident pairs ) : params . { decls }

    {               shift and go to state 238


state 183

    (18) decl -> STRUCT ( type pairs ) { type_members . }

    }               shift and go to state 239


state 184

    (39) type_state -> ident . , enumeration pairs SEMI

    ,               shift and go to state 240


state 185

    (20) decl -> STATE_DECL ( type pairs ) { type_states . }

    }               shift and go to state 241


state 186

    (37) type_states -> type_state . type_states
    (37) type_states -> . type_state type_states
    (38) type_states -> . empty
    (39) type_state -> . ident , enumeration pairs SEMI
    (2) empty -> .
    (64) ident -> . IDENT

    }               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 4

    ident                          shift and go to state 184
    type_states                    shift and go to state 242
    type_state                     shift and go to state 186
    empty                          shift and go to state 187

state 187

    (38) type_states -> empty .

    }               reduce using rule 38 (type_states -> empty .)


state 188

    (10) decl -> IN_PORT ( ident , type , var . pairs ) statements
    (65) pairs -> . , pairsx
    (66) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 50
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 243
    empty                          shift and go to state 51

state 189

    (17) decl -> GLOBAL ( type pairs ) { type_members } .

    PROTOCOL        reduce using rule 17 (decl -> GLOBAL ( type pairs ) { type_members } .)
    INCLUDE         reduce using rule 17 (decl -> GLOBAL ( type pairs ) { type_members } .)
    MACHINE         reduce using rule 17 (decl -> GLOBAL ( type pairs ) { type_members } .)
    ACTION          reduce using rule 17 (decl -> GLOBAL ( type pairs ) { type_members } .)
    IN_PORT         reduce using rule 17 (decl -> GLOBAL ( type pairs ) { type_members } .)
    OUT_PORT        reduce using rule 17 (decl -> GLOBAL ( type pairs ) { type_members } .)
    TRANS           reduce using rule 17 (decl -> GLOBAL ( type pairs ) { type_members } .)
    EXTERN_TYPE     reduce using rule 17 (decl -> GLOBAL ( type pairs ) { type_members } .)
    GLOBAL          reduce using rule 17 (decl -> GLOBAL ( type pairs ) { type_members } .)
    STRUCT          reduce using rule 17 (decl -> GLOBAL ( type pairs ) { type_members } .)
    ENUM            reduce using rule 17 (decl -> GLOBAL ( type pairs ) { type_members } .)
    STATE_DECL      reduce using rule 17 (decl -> GLOBAL ( type pairs ) { type_members } .)
    VOID            reduce using rule 17 (decl -> GLOBAL ( type pairs ) { type_members } .)
    IDENT           reduce using rule 17 (decl -> GLOBAL ( type pairs ) { type_members } .)
    }               reduce using rule 17 (decl -> GLOBAL ( type pairs ) { type_members } .)
    $end            reduce using rule 17 (decl -> GLOBAL ( type pairs ) { type_members } .)


state 190

    (28) type_members -> type_member type_members .

    }               reduce using rule 28 (type_members -> type_member type_members .)


state 191

    (30) type_member -> type_or_void ident . ( types ) pairs SEMI
    (31) type_member -> type_or_void ident . ( params ) pairs statements
    (32) type_member -> type_or_void ident . pairs SEMI
    (33) type_member -> type_or_void ident . ASSIGN expr SEMI
    (65) pairs -> . , pairsx
    (66) pairs -> . empty
    (2) empty -> .

    (               shift and go to state 245
    ASSIGN          shift and go to state 246
    ,               shift and go to state 50
    SEMI            reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 244
    empty                          shift and go to state 51

state 192

    (13) decl -> TRANS ( idents , idents pairs ) idents .
    (15) decl -> TRANS ( idents , idents pairs ) idents . idents
    (58) idents -> . { identx }
    (59) idents -> . ident
    (64) ident -> . IDENT

  ! shift/reduce conflict for IDENT resolved as shift
    PROTOCOL        reduce using rule 13 (decl -> TRANS ( idents , idents pairs ) idents .)
    INCLUDE         reduce using rule 13 (decl -> TRANS ( idents , idents pairs ) idents .)
    MACHINE         reduce using rule 13 (decl -> TRANS ( idents , idents pairs ) idents .)
    ACTION          reduce using rule 13 (decl -> TRANS ( idents , idents pairs ) idents .)
    IN_PORT         reduce using rule 13 (decl -> TRANS ( idents , idents pairs ) idents .)
    OUT_PORT        reduce using rule 13 (decl -> TRANS ( idents , idents pairs ) idents .)
    TRANS           reduce using rule 13 (decl -> TRANS ( idents , idents pairs ) idents .)
    EXTERN_TYPE     reduce using rule 13 (decl -> TRANS ( idents , idents pairs ) idents .)
    GLOBAL          reduce using rule 13 (decl -> TRANS ( idents , idents pairs ) idents .)
    STRUCT          reduce using rule 13 (decl -> TRANS ( idents , idents pairs ) idents .)
    ENUM            reduce using rule 13 (decl -> TRANS ( idents , idents pairs ) idents .)
    STATE_DECL      reduce using rule 13 (decl -> TRANS ( idents , idents pairs ) idents .)
    VOID            reduce using rule 13 (decl -> TRANS ( idents , idents pairs ) idents .)
    }               reduce using rule 13 (decl -> TRANS ( idents , idents pairs ) idents .)
    $end            reduce using rule 13 (decl -> TRANS ( idents , idents pairs ) idents .)
    {               shift and go to state 45
    IDENT           shift and go to state 4

  ! IDENT           [ reduce using rule 13 (decl -> TRANS ( idents , idents pairs ) idents .) ]

    ident                          shift and go to state 43
    idents                         shift and go to state 247

state 193

    (12) decl -> TRANS ( idents , idents , ident pairs . ) idents
    (14) decl -> TRANS ( idents , idents , ident pairs . ) idents idents

    )               shift and go to state 248


state 194

    (11) decl -> OUT_PORT ( ident , type , var pairs . ) SEMI

    )               shift and go to state 249


state 195

    (84) statement -> PEEK ( . var , type pairs ) statements
    (131) var -> . ident
    (64) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 250
    ident                          shift and go to state 137

state 196

    (90) statement -> RETURN expr . SEMI
    (107) expr -> expr . STAR expr
    (108) expr -> expr . SLASH expr
    (109) expr -> expr . PLUS expr
    (110) expr -> expr . DASH expr
    (111) expr -> expr . LT expr
    (112) expr -> expr . GT expr
    (113) expr -> expr . LE expr
    (114) expr -> expr . GE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . AND expr
    (118) expr -> expr . OR expr
    (119) expr -> expr . RIGHTSHIFT expr
    (120) expr -> expr . LEFTSHIFT expr

    SEMI            shift and go to state 251
    STAR            shift and go to state 218
    SLASH           shift and go to state 226
    PLUS            shift and go to state 225
    DASH            shift and go to state 222
    LT              shift and go to state 223
    GT              shift and go to state 217
    LE              shift and go to state 224
    GE              shift and go to state 220
    EQ              shift and go to state 228
    NE              shift and go to state 221
    AND             shift and go to state 215
    OR              shift and go to state 230
    RIGHTSHIFT      shift and go to state 227
    LEFTSHIFT       shift and go to state 216


state 197

    (73) statements -> { statements_inner } .

    ELSE            reduce using rule 73 (statements -> { statements_inner } .)
    ENQUEUE         reduce using rule 73 (statements -> { statements_inner } .)
    STALL_AND_WAIT  reduce using rule 73 (statements -> { statements_inner } .)
    PEEK            reduce using rule 73 (statements -> { statements_inner } .)
    COPY_HEAD       reduce using rule 73 (statements -> { statements_inner } .)
    CHECK_ALLOCATE  reduce using rule 73 (statements -> { statements_inner } .)
    CHECK_STOP_SLOTS reduce using rule 73 (statements -> { statements_inner } .)
    RETURN          reduce using rule 73 (statements -> { statements_inner } .)
    NOT             reduce using rule 73 (statements -> { statements_inner } .)
    DASH            reduce using rule 73 (statements -> { statements_inner } .)
    IF              reduce using rule 73 (statements -> { statements_inner } .)
    STATIC_CAST     reduce using rule 73 (statements -> { statements_inner } .)
    NEW             reduce using rule 73 (statements -> { statements_inner } .)
    OOD             reduce using rule 73 (statements -> { statements_inner } .)
    (               reduce using rule 73 (statements -> { statements_inner } .)
    IS_VALID        reduce using rule 73 (statements -> { statements_inner } .)
    IS_INVALID      reduce using rule 73 (statements -> { statements_inner } .)
    STRING          reduce using rule 73 (statements -> { statements_inner } .)
    NUMBER          reduce using rule 73 (statements -> { statements_inner } .)
    FLOATNUMBER     reduce using rule 73 (statements -> { statements_inner } .)
    LIT_BOOL        reduce using rule 73 (statements -> { statements_inner } .)
    IDENT           reduce using rule 73 (statements -> { statements_inner } .)
    }               reduce using rule 73 (statements -> { statements_inner } .)
    PROTOCOL        reduce using rule 73 (statements -> { statements_inner } .)
    INCLUDE         reduce using rule 73 (statements -> { statements_inner } .)
    MACHINE         reduce using rule 73 (statements -> { statements_inner } .)
    ACTION          reduce using rule 73 (statements -> { statements_inner } .)
    IN_PORT         reduce using rule 73 (statements -> { statements_inner } .)
    OUT_PORT        reduce using rule 73 (statements -> { statements_inner } .)
    TRANS           reduce using rule 73 (statements -> { statements_inner } .)
    EXTERN_TYPE     reduce using rule 73 (statements -> { statements_inner } .)
    GLOBAL          reduce using rule 73 (statements -> { statements_inner } .)
    STRUCT          reduce using rule 73 (statements -> { statements_inner } .)
    ENUM            reduce using rule 73 (statements -> { statements_inner } .)
    STATE_DECL      reduce using rule 73 (statements -> { statements_inner } .)
    VOID            reduce using rule 73 (statements -> { statements_inner } .)
    $end            reduce using rule 73 (statements -> { statements_inner } .)


state 198

    (100) aexpr -> NEW type .

    DOT             reduce using rule 100 (aexpr -> NEW type .)
    [               reduce using rule 100 (aexpr -> NEW type .)
    )               reduce using rule 100 (aexpr -> NEW type .)
    STAR            reduce using rule 100 (aexpr -> NEW type .)
    SLASH           reduce using rule 100 (aexpr -> NEW type .)
    PLUS            reduce using rule 100 (aexpr -> NEW type .)
    DASH            reduce using rule 100 (aexpr -> NEW type .)
    LT              reduce using rule 100 (aexpr -> NEW type .)
    GT              reduce using rule 100 (aexpr -> NEW type .)
    LE              reduce using rule 100 (aexpr -> NEW type .)
    GE              reduce using rule 100 (aexpr -> NEW type .)
    EQ              reduce using rule 100 (aexpr -> NEW type .)
    NE              reduce using rule 100 (aexpr -> NEW type .)
    AND             reduce using rule 100 (aexpr -> NEW type .)
    OR              reduce using rule 100 (aexpr -> NEW type .)
    RIGHTSHIFT      reduce using rule 100 (aexpr -> NEW type .)
    LEFTSHIFT       reduce using rule 100 (aexpr -> NEW type .)
    SEMI            reduce using rule 100 (aexpr -> NEW type .)
    ASSIGN          reduce using rule 100 (aexpr -> NEW type .)
    ,               reduce using rule 100 (aexpr -> NEW type .)
    ]               reduce using rule 100 (aexpr -> NEW type .)


state 199

    (104) aexpr -> aexpr [ . exprs ]
    (77) exprs -> . expr , exprs
    (78) exprs -> . expr
    (79) exprs -> . empty
    (106) expr -> . aexpr
    (107) expr -> . expr STAR expr
    (108) expr -> . expr SLASH expr
    (109) expr -> . expr PLUS expr
    (110) expr -> . expr DASH expr
    (111) expr -> . expr LT expr
    (112) expr -> . expr GT expr
    (113) expr -> . expr LE expr
    (114) expr -> . expr GE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr AND expr
    (118) expr -> . expr OR expr
    (119) expr -> . expr RIGHTSHIFT expr
    (120) expr -> . expr LEFTSHIFT expr
    (121) expr -> . NOT expr
    (122) expr -> . DASH expr
    (2) empty -> .
    (88) aexpr -> . STATIC_CAST ( type , expr )
    (89) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (95) aexpr -> . var
    (96) aexpr -> . type ident
    (97) aexpr -> . literal
    (98) aexpr -> . enumeration
    (99) aexpr -> . ident ( exprs )
    (100) aexpr -> . NEW type
    (101) aexpr -> . OOD
    (102) aexpr -> . aexpr DOT ident
    (103) aexpr -> . aexpr DOT ident ( exprs )
    (104) aexpr -> . aexpr [ exprs ]
    (105) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (123) aexpr -> . ( expr )
    (124) aexpr -> . IS_VALID ( var )
    (125) aexpr -> . IS_INVALID ( var )
    (131) var -> . ident
    (45) type -> . typestr
    (126) literal -> . STRING
    (127) literal -> . NUMBER
    (128) literal -> . FLOATNUMBER
    (129) literal -> . LIT_BOOL
    (130) enumeration -> . ident : ident
    (64) ident -> . IDENT
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 160
    ]               reduce using rule 2 (empty -> .)
    STATIC_CAST     shift and go to state 146
    NEW             shift and go to state 144
    OOD             shift and go to state 162
    (               shift and go to state 148
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 149
    STRING          shift and go to state 157
    NUMBER          shift and go to state 142
    FLOATNUMBER     shift and go to state 141
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 163
    expr                           shift and go to state 253
    enumeration                    shift and go to state 150
    exprs                          shift and go to state 254
    literal                        shift and go to state 159
    var                            shift and go to state 154
    typestr                        shift and go to state 19
    type                           shift and go to state 156
    aexpr                          shift and go to state 145
    empty                          shift and go to state 252

state 200

    (102) aexpr -> aexpr DOT . ident
    (103) aexpr -> aexpr DOT . ident ( exprs )
    (64) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 255

state 201

    (88) aexpr -> STATIC_CAST ( . type , expr )
    (89) aexpr -> STATIC_CAST ( . type , STRING , expr )
    (45) type -> . typestr
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident
    (64) ident -> . IDENT

    IDENT           shift and go to state 4

    typestr                        shift and go to state 19
    ident                          shift and go to state 21
    type                           shift and go to state 256

state 202

    (86) statement -> CHECK_ALLOCATE ( . var ) SEMI
    (131) var -> . ident
    (64) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 257
    ident                          shift and go to state 137

state 203

    (123) aexpr -> ( expr . )
    (107) expr -> expr . STAR expr
    (108) expr -> expr . SLASH expr
    (109) expr -> expr . PLUS expr
    (110) expr -> expr . DASH expr
    (111) expr -> expr . LT expr
    (112) expr -> expr . GT expr
    (113) expr -> expr . LE expr
    (114) expr -> expr . GE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . AND expr
    (118) expr -> expr . OR expr
    (119) expr -> expr . RIGHTSHIFT expr
    (120) expr -> expr . LEFTSHIFT expr

    )               shift and go to state 258
    STAR            shift and go to state 218
    SLASH           shift and go to state 226
    PLUS            shift and go to state 225
    DASH            shift and go to state 222
    LT              shift and go to state 223
    GT              shift and go to state 217
    LE              shift and go to state 224
    GE              shift and go to state 220
    EQ              shift and go to state 228
    NE              shift and go to state 221
    AND             shift and go to state 215
    OR              shift and go to state 230
    RIGHTSHIFT      shift and go to state 227
    LEFTSHIFT       shift and go to state 216


state 204

    (125) aexpr -> IS_INVALID ( . var )
    (131) var -> . ident
    (64) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 259
    ident                          shift and go to state 137

state 205

    (82) statement -> ENQUEUE ( . var , type pairs ) statements
    (131) var -> . ident
    (64) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 260
    ident                          shift and go to state 137

state 206

    (85) statement -> COPY_HEAD ( . var , var pairs ) SEMI
    (131) var -> . ident
    (64) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 261
    ident                          shift and go to state 137

state 207

    (75) statements_inner -> statement statements_inner .

    }               reduce using rule 75 (statements_inner -> statement statements_inner .)


state 208

    (96) aexpr -> type ident .

    DOT             reduce using rule 96 (aexpr -> type ident .)
    [               reduce using rule 96 (aexpr -> type ident .)
    )               reduce using rule 96 (aexpr -> type ident .)
    STAR            reduce using rule 96 (aexpr -> type ident .)
    SLASH           reduce using rule 96 (aexpr -> type ident .)
    PLUS            reduce using rule 96 (aexpr -> type ident .)
    DASH            reduce using rule 96 (aexpr -> type ident .)
    LT              reduce using rule 96 (aexpr -> type ident .)
    GT              reduce using rule 96 (aexpr -> type ident .)
    LE              reduce using rule 96 (aexpr -> type ident .)
    GE              reduce using rule 96 (aexpr -> type ident .)
    EQ              reduce using rule 96 (aexpr -> type ident .)
    NE              reduce using rule 96 (aexpr -> type ident .)
    AND             reduce using rule 96 (aexpr -> type ident .)
    OR              reduce using rule 96 (aexpr -> type ident .)
    RIGHTSHIFT      reduce using rule 96 (aexpr -> type ident .)
    LEFTSHIFT       reduce using rule 96 (aexpr -> type ident .)
    SEMI            reduce using rule 96 (aexpr -> type ident .)
    ASSIGN          reduce using rule 96 (aexpr -> type ident .)
    ,               reduce using rule 96 (aexpr -> type ident .)
    ]               reduce using rule 96 (aexpr -> type ident .)


state 209

    (105) aexpr -> type DOUBLE_COLON . ident ( exprs )
    (64) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 262

state 210

    (83) statement -> STALL_AND_WAIT ( . var , var ) SEMI
    (131) var -> . ident
    (64) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 263
    ident                          shift and go to state 137

state 211

    (122) expr -> DASH expr .
    (107) expr -> expr . STAR expr
    (108) expr -> expr . SLASH expr
    (109) expr -> expr . PLUS expr
    (110) expr -> expr . DASH expr
    (111) expr -> expr . LT expr
    (112) expr -> expr . GT expr
    (113) expr -> expr . LE expr
    (114) expr -> expr . GE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . AND expr
    (118) expr -> expr . OR expr
    (119) expr -> expr . RIGHTSHIFT expr
    (120) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 122 (expr -> DASH expr .)
    STAR            reduce using rule 122 (expr -> DASH expr .)
    SLASH           reduce using rule 122 (expr -> DASH expr .)
    PLUS            reduce using rule 122 (expr -> DASH expr .)
    DASH            reduce using rule 122 (expr -> DASH expr .)
    LT              reduce using rule 122 (expr -> DASH expr .)
    GT              reduce using rule 122 (expr -> DASH expr .)
    LE              reduce using rule 122 (expr -> DASH expr .)
    GE              reduce using rule 122 (expr -> DASH expr .)
    EQ              reduce using rule 122 (expr -> DASH expr .)
    NE              reduce using rule 122 (expr -> DASH expr .)
    AND             reduce using rule 122 (expr -> DASH expr .)
    OR              reduce using rule 122 (expr -> DASH expr .)
    RIGHTSHIFT      reduce using rule 122 (expr -> DASH expr .)
    LEFTSHIFT       reduce using rule 122 (expr -> DASH expr .)
    ASSIGN          reduce using rule 122 (expr -> DASH expr .)
    )               reduce using rule 122 (expr -> DASH expr .)
    ,               reduce using rule 122 (expr -> DASH expr .)
    ]               reduce using rule 122 (expr -> DASH expr .)

  ! STAR            [ shift and go to state 218 ]
  ! SLASH           [ shift and go to state 226 ]
  ! PLUS            [ shift and go to state 225 ]
  ! DASH            [ shift and go to state 222 ]
  ! LT              [ shift and go to state 223 ]
  ! GT              [ shift and go to state 217 ]
  ! LE              [ shift and go to state 224 ]
  ! GE              [ shift and go to state 220 ]
  ! EQ              [ shift and go to state 228 ]
  ! NE              [ shift and go to state 221 ]
  ! AND             [ shift and go to state 215 ]
  ! OR              [ shift and go to state 230 ]
  ! RIGHTSHIFT      [ shift and go to state 227 ]
  ! LEFTSHIFT       [ shift and go to state 216 ]


state 212

    (92) if_statement -> IF ( . expr ) statements
    (93) if_statement -> IF ( . expr ) statements ELSE statements
    (94) if_statement -> IF ( . expr ) statements ELSE if_statement
    (106) expr -> . aexpr
    (107) expr -> . expr STAR expr
    (108) expr -> . expr SLASH expr
    (109) expr -> . expr PLUS expr
    (110) expr -> . expr DASH expr
    (111) expr -> . expr LT expr
    (112) expr -> . expr GT expr
    (113) expr -> . expr LE expr
    (114) expr -> . expr GE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr AND expr
    (118) expr -> . expr OR expr
    (119) expr -> . expr RIGHTSHIFT expr
    (120) expr -> . expr LEFTSHIFT expr
    (121) expr -> . NOT expr
    (122) expr -> . DASH expr
    (88) aexpr -> . STATIC_CAST ( type , expr )
    (89) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (95) aexpr -> . var
    (96) aexpr -> . type ident
    (97) aexpr -> . literal
    (98) aexpr -> . enumeration
    (99) aexpr -> . ident ( exprs )
    (100) aexpr -> . NEW type
    (101) aexpr -> . OOD
    (102) aexpr -> . aexpr DOT ident
    (103) aexpr -> . aexpr DOT ident ( exprs )
    (104) aexpr -> . aexpr [ exprs ]
    (105) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (123) aexpr -> . ( expr )
    (124) aexpr -> . IS_VALID ( var )
    (125) aexpr -> . IS_INVALID ( var )
    (131) var -> . ident
    (45) type -> . typestr
    (126) literal -> . STRING
    (127) literal -> . NUMBER
    (128) literal -> . FLOATNUMBER
    (129) literal -> . LIT_BOOL
    (130) enumeration -> . ident : ident
    (64) ident -> . IDENT
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 160
    STATIC_CAST     shift and go to state 146
    NEW             shift and go to state 144
    OOD             shift and go to state 162
    (               shift and go to state 148
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 149
    STRING          shift and go to state 157
    NUMBER          shift and go to state 142
    FLOATNUMBER     shift and go to state 141
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 163
    expr                           shift and go to state 264
    enumeration                    shift and go to state 150
    literal                        shift and go to state 159
    var                            shift and go to state 154
    typestr                        shift and go to state 19
    type                           shift and go to state 156
    aexpr                          shift and go to state 145

state 213

    (99) aexpr -> ident ( . exprs )
    (77) exprs -> . expr , exprs
    (78) exprs -> . expr
    (79) exprs -> . empty
    (106) expr -> . aexpr
    (107) expr -> . expr STAR expr
    (108) expr -> . expr SLASH expr
    (109) expr -> . expr PLUS expr
    (110) expr -> . expr DASH expr
    (111) expr -> . expr LT expr
    (112) expr -> . expr GT expr
    (113) expr -> . expr LE expr
    (114) expr -> . expr GE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr AND expr
    (118) expr -> . expr OR expr
    (119) expr -> . expr RIGHTSHIFT expr
    (120) expr -> . expr LEFTSHIFT expr
    (121) expr -> . NOT expr
    (122) expr -> . DASH expr
    (2) empty -> .
    (88) aexpr -> . STATIC_CAST ( type , expr )
    (89) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (95) aexpr -> . var
    (96) aexpr -> . type ident
    (97) aexpr -> . literal
    (98) aexpr -> . enumeration
    (99) aexpr -> . ident ( exprs )
    (100) aexpr -> . NEW type
    (101) aexpr -> . OOD
    (102) aexpr -> . aexpr DOT ident
    (103) aexpr -> . aexpr DOT ident ( exprs )
    (104) aexpr -> . aexpr [ exprs ]
    (105) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (123) aexpr -> . ( expr )
    (124) aexpr -> . IS_VALID ( var )
    (125) aexpr -> . IS_INVALID ( var )
    (131) var -> . ident
    (45) type -> . typestr
    (126) literal -> . STRING
    (127) literal -> . NUMBER
    (128) literal -> . FLOATNUMBER
    (129) literal -> . LIT_BOOL
    (130) enumeration -> . ident : ident
    (64) ident -> . IDENT
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 160
    )               reduce using rule 2 (empty -> .)
    STATIC_CAST     shift and go to state 146
    NEW             shift and go to state 144
    OOD             shift and go to state 162
    (               shift and go to state 148
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 149
    STRING          shift and go to state 157
    NUMBER          shift and go to state 142
    FLOATNUMBER     shift and go to state 141
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 163
    expr                           shift and go to state 253
    enumeration                    shift and go to state 150
    exprs                          shift and go to state 265
    literal                        shift and go to state 159
    var                            shift and go to state 154
    typestr                        shift and go to state 19
    type                           shift and go to state 156
    aexpr                          shift and go to state 145
    empty                          shift and go to state 252

state 214

    (130) enumeration -> ident : . ident
    (64) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 266

state 215

    (117) expr -> expr AND . expr
    (106) expr -> . aexpr
    (107) expr -> . expr STAR expr
    (108) expr -> . expr SLASH expr
    (109) expr -> . expr PLUS expr
    (110) expr -> . expr DASH expr
    (111) expr -> . expr LT expr
    (112) expr -> . expr GT expr
    (113) expr -> . expr LE expr
    (114) expr -> . expr GE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr AND expr
    (118) expr -> . expr OR expr
    (119) expr -> . expr RIGHTSHIFT expr
    (120) expr -> . expr LEFTSHIFT expr
    (121) expr -> . NOT expr
    (122) expr -> . DASH expr
    (88) aexpr -> . STATIC_CAST ( type , expr )
    (89) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (95) aexpr -> . var
    (96) aexpr -> . type ident
    (97) aexpr -> . literal
    (98) aexpr -> . enumeration
    (99) aexpr -> . ident ( exprs )
    (100) aexpr -> . NEW type
    (101) aexpr -> . OOD
    (102) aexpr -> . aexpr DOT ident
    (103) aexpr -> . aexpr DOT ident ( exprs )
    (104) aexpr -> . aexpr [ exprs ]
    (105) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (123) aexpr -> . ( expr )
    (124) aexpr -> . IS_VALID ( var )
    (125) aexpr -> . IS_INVALID ( var )
    (131) var -> . ident
    (45) type -> . typestr
    (126) literal -> . STRING
    (127) literal -> . NUMBER
    (128) literal -> . FLOATNUMBER
    (129) literal -> . LIT_BOOL
    (130) enumeration -> . ident : ident
    (64) ident -> . IDENT
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 160
    STATIC_CAST     shift and go to state 146
    NEW             shift and go to state 144
    OOD             shift and go to state 162
    (               shift and go to state 148
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 149
    STRING          shift and go to state 157
    NUMBER          shift and go to state 142
    FLOATNUMBER     shift and go to state 141
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 163
    expr                           shift and go to state 267
    enumeration                    shift and go to state 150
    literal                        shift and go to state 159
    var                            shift and go to state 154
    typestr                        shift and go to state 19
    type                           shift and go to state 156
    aexpr                          shift and go to state 145

state 216

    (120) expr -> expr LEFTSHIFT . expr
    (106) expr -> . aexpr
    (107) expr -> . expr STAR expr
    (108) expr -> . expr SLASH expr
    (109) expr -> . expr PLUS expr
    (110) expr -> . expr DASH expr
    (111) expr -> . expr LT expr
    (112) expr -> . expr GT expr
    (113) expr -> . expr LE expr
    (114) expr -> . expr GE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr AND expr
    (118) expr -> . expr OR expr
    (119) expr -> . expr RIGHTSHIFT expr
    (120) expr -> . expr LEFTSHIFT expr
    (121) expr -> . NOT expr
    (122) expr -> . DASH expr
    (88) aexpr -> . STATIC_CAST ( type , expr )
    (89) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (95) aexpr -> . var
    (96) aexpr -> . type ident
    (97) aexpr -> . literal
    (98) aexpr -> . enumeration
    (99) aexpr -> . ident ( exprs )
    (100) aexpr -> . NEW type
    (101) aexpr -> . OOD
    (102) aexpr -> . aexpr DOT ident
    (103) aexpr -> . aexpr DOT ident ( exprs )
    (104) aexpr -> . aexpr [ exprs ]
    (105) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (123) aexpr -> . ( expr )
    (124) aexpr -> . IS_VALID ( var )
    (125) aexpr -> . IS_INVALID ( var )
    (131) var -> . ident
    (45) type -> . typestr
    (126) literal -> . STRING
    (127) literal -> . NUMBER
    (128) literal -> . FLOATNUMBER
    (129) literal -> . LIT_BOOL
    (130) enumeration -> . ident : ident
    (64) ident -> . IDENT
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 160
    STATIC_CAST     shift and go to state 146
    NEW             shift and go to state 144
    OOD             shift and go to state 162
    (               shift and go to state 148
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 149
    STRING          shift and go to state 157
    NUMBER          shift and go to state 142
    FLOATNUMBER     shift and go to state 141
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 163
    expr                           shift and go to state 268
    enumeration                    shift and go to state 150
    literal                        shift and go to state 159
    var                            shift and go to state 154
    typestr                        shift and go to state 19
    type                           shift and go to state 156
    aexpr                          shift and go to state 145

state 217

    (112) expr -> expr GT . expr
    (106) expr -> . aexpr
    (107) expr -> . expr STAR expr
    (108) expr -> . expr SLASH expr
    (109) expr -> . expr PLUS expr
    (110) expr -> . expr DASH expr
    (111) expr -> . expr LT expr
    (112) expr -> . expr GT expr
    (113) expr -> . expr LE expr
    (114) expr -> . expr GE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr AND expr
    (118) expr -> . expr OR expr
    (119) expr -> . expr RIGHTSHIFT expr
    (120) expr -> . expr LEFTSHIFT expr
    (121) expr -> . NOT expr
    (122) expr -> . DASH expr
    (88) aexpr -> . STATIC_CAST ( type , expr )
    (89) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (95) aexpr -> . var
    (96) aexpr -> . type ident
    (97) aexpr -> . literal
    (98) aexpr -> . enumeration
    (99) aexpr -> . ident ( exprs )
    (100) aexpr -> . NEW type
    (101) aexpr -> . OOD
    (102) aexpr -> . aexpr DOT ident
    (103) aexpr -> . aexpr DOT ident ( exprs )
    (104) aexpr -> . aexpr [ exprs ]
    (105) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (123) aexpr -> . ( expr )
    (124) aexpr -> . IS_VALID ( var )
    (125) aexpr -> . IS_INVALID ( var )
    (131) var -> . ident
    (45) type -> . typestr
    (126) literal -> . STRING
    (127) literal -> . NUMBER
    (128) literal -> . FLOATNUMBER
    (129) literal -> . LIT_BOOL
    (130) enumeration -> . ident : ident
    (64) ident -> . IDENT
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 160
    STATIC_CAST     shift and go to state 146
    NEW             shift and go to state 144
    OOD             shift and go to state 162
    (               shift and go to state 148
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 149
    STRING          shift and go to state 157
    NUMBER          shift and go to state 142
    FLOATNUMBER     shift and go to state 141
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 163
    expr                           shift and go to state 269
    enumeration                    shift and go to state 150
    literal                        shift and go to state 159
    var                            shift and go to state 154
    typestr                        shift and go to state 19
    type                           shift and go to state 156
    aexpr                          shift and go to state 145

state 218

    (107) expr -> expr STAR . expr
    (106) expr -> . aexpr
    (107) expr -> . expr STAR expr
    (108) expr -> . expr SLASH expr
    (109) expr -> . expr PLUS expr
    (110) expr -> . expr DASH expr
    (111) expr -> . expr LT expr
    (112) expr -> . expr GT expr
    (113) expr -> . expr LE expr
    (114) expr -> . expr GE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr AND expr
    (118) expr -> . expr OR expr
    (119) expr -> . expr RIGHTSHIFT expr
    (120) expr -> . expr LEFTSHIFT expr
    (121) expr -> . NOT expr
    (122) expr -> . DASH expr
    (88) aexpr -> . STATIC_CAST ( type , expr )
    (89) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (95) aexpr -> . var
    (96) aexpr -> . type ident
    (97) aexpr -> . literal
    (98) aexpr -> . enumeration
    (99) aexpr -> . ident ( exprs )
    (100) aexpr -> . NEW type
    (101) aexpr -> . OOD
    (102) aexpr -> . aexpr DOT ident
    (103) aexpr -> . aexpr DOT ident ( exprs )
    (104) aexpr -> . aexpr [ exprs ]
    (105) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (123) aexpr -> . ( expr )
    (124) aexpr -> . IS_VALID ( var )
    (125) aexpr -> . IS_INVALID ( var )
    (131) var -> . ident
    (45) type -> . typestr
    (126) literal -> . STRING
    (127) literal -> . NUMBER
    (128) literal -> . FLOATNUMBER
    (129) literal -> . LIT_BOOL
    (130) enumeration -> . ident : ident
    (64) ident -> . IDENT
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 160
    STATIC_CAST     shift and go to state 146
    NEW             shift and go to state 144
    OOD             shift and go to state 162
    (               shift and go to state 148
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 149
    STRING          shift and go to state 157
    NUMBER          shift and go to state 142
    FLOATNUMBER     shift and go to state 141
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 163
    expr                           shift and go to state 270
    enumeration                    shift and go to state 150
    literal                        shift and go to state 159
    var                            shift and go to state 154
    typestr                        shift and go to state 19
    type                           shift and go to state 156
    aexpr                          shift and go to state 145

state 219

    (80) statement -> expr SEMI .

    ENQUEUE         reduce using rule 80 (statement -> expr SEMI .)
    STALL_AND_WAIT  reduce using rule 80 (statement -> expr SEMI .)
    PEEK            reduce using rule 80 (statement -> expr SEMI .)
    COPY_HEAD       reduce using rule 80 (statement -> expr SEMI .)
    CHECK_ALLOCATE  reduce using rule 80 (statement -> expr SEMI .)
    CHECK_STOP_SLOTS reduce using rule 80 (statement -> expr SEMI .)
    RETURN          reduce using rule 80 (statement -> expr SEMI .)
    NOT             reduce using rule 80 (statement -> expr SEMI .)
    DASH            reduce using rule 80 (statement -> expr SEMI .)
    IF              reduce using rule 80 (statement -> expr SEMI .)
    STATIC_CAST     reduce using rule 80 (statement -> expr SEMI .)
    NEW             reduce using rule 80 (statement -> expr SEMI .)
    OOD             reduce using rule 80 (statement -> expr SEMI .)
    (               reduce using rule 80 (statement -> expr SEMI .)
    IS_VALID        reduce using rule 80 (statement -> expr SEMI .)
    IS_INVALID      reduce using rule 80 (statement -> expr SEMI .)
    STRING          reduce using rule 80 (statement -> expr SEMI .)
    NUMBER          reduce using rule 80 (statement -> expr SEMI .)
    FLOATNUMBER     reduce using rule 80 (statement -> expr SEMI .)
    LIT_BOOL        reduce using rule 80 (statement -> expr SEMI .)
    IDENT           reduce using rule 80 (statement -> expr SEMI .)
    }               reduce using rule 80 (statement -> expr SEMI .)


state 220

    (114) expr -> expr GE . expr
    (106) expr -> . aexpr
    (107) expr -> . expr STAR expr
    (108) expr -> . expr SLASH expr
    (109) expr -> . expr PLUS expr
    (110) expr -> . expr DASH expr
    (111) expr -> . expr LT expr
    (112) expr -> . expr GT expr
    (113) expr -> . expr LE expr
    (114) expr -> . expr GE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr AND expr
    (118) expr -> . expr OR expr
    (119) expr -> . expr RIGHTSHIFT expr
    (120) expr -> . expr LEFTSHIFT expr
    (121) expr -> . NOT expr
    (122) expr -> . DASH expr
    (88) aexpr -> . STATIC_CAST ( type , expr )
    (89) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (95) aexpr -> . var
    (96) aexpr -> . type ident
    (97) aexpr -> . literal
    (98) aexpr -> . enumeration
    (99) aexpr -> . ident ( exprs )
    (100) aexpr -> . NEW type
    (101) aexpr -> . OOD
    (102) aexpr -> . aexpr DOT ident
    (103) aexpr -> . aexpr DOT ident ( exprs )
    (104) aexpr -> . aexpr [ exprs ]
    (105) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (123) aexpr -> . ( expr )
    (124) aexpr -> . IS_VALID ( var )
    (125) aexpr -> . IS_INVALID ( var )
    (131) var -> . ident
    (45) type -> . typestr
    (126) literal -> . STRING
    (127) literal -> . NUMBER
    (128) literal -> . FLOATNUMBER
    (129) literal -> . LIT_BOOL
    (130) enumeration -> . ident : ident
    (64) ident -> . IDENT
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 160
    STATIC_CAST     shift and go to state 146
    NEW             shift and go to state 144
    OOD             shift and go to state 162
    (               shift and go to state 148
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 149
    STRING          shift and go to state 157
    NUMBER          shift and go to state 142
    FLOATNUMBER     shift and go to state 141
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 163
    expr                           shift and go to state 271
    enumeration                    shift and go to state 150
    literal                        shift and go to state 159
    var                            shift and go to state 154
    typestr                        shift and go to state 19
    type                           shift and go to state 156
    aexpr                          shift and go to state 145

state 221

    (116) expr -> expr NE . expr
    (106) expr -> . aexpr
    (107) expr -> . expr STAR expr
    (108) expr -> . expr SLASH expr
    (109) expr -> . expr PLUS expr
    (110) expr -> . expr DASH expr
    (111) expr -> . expr LT expr
    (112) expr -> . expr GT expr
    (113) expr -> . expr LE expr
    (114) expr -> . expr GE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr AND expr
    (118) expr -> . expr OR expr
    (119) expr -> . expr RIGHTSHIFT expr
    (120) expr -> . expr LEFTSHIFT expr
    (121) expr -> . NOT expr
    (122) expr -> . DASH expr
    (88) aexpr -> . STATIC_CAST ( type , expr )
    (89) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (95) aexpr -> . var
    (96) aexpr -> . type ident
    (97) aexpr -> . literal
    (98) aexpr -> . enumeration
    (99) aexpr -> . ident ( exprs )
    (100) aexpr -> . NEW type
    (101) aexpr -> . OOD
    (102) aexpr -> . aexpr DOT ident
    (103) aexpr -> . aexpr DOT ident ( exprs )
    (104) aexpr -> . aexpr [ exprs ]
    (105) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (123) aexpr -> . ( expr )
    (124) aexpr -> . IS_VALID ( var )
    (125) aexpr -> . IS_INVALID ( var )
    (131) var -> . ident
    (45) type -> . typestr
    (126) literal -> . STRING
    (127) literal -> . NUMBER
    (128) literal -> . FLOATNUMBER
    (129) literal -> . LIT_BOOL
    (130) enumeration -> . ident : ident
    (64) ident -> . IDENT
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 160
    STATIC_CAST     shift and go to state 146
    NEW             shift and go to state 144
    OOD             shift and go to state 162
    (               shift and go to state 148
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 149
    STRING          shift and go to state 157
    NUMBER          shift and go to state 142
    FLOATNUMBER     shift and go to state 141
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 163
    expr                           shift and go to state 272
    enumeration                    shift and go to state 150
    literal                        shift and go to state 159
    var                            shift and go to state 154
    typestr                        shift and go to state 19
    type                           shift and go to state 156
    aexpr                          shift and go to state 145

state 222

    (110) expr -> expr DASH . expr
    (106) expr -> . aexpr
    (107) expr -> . expr STAR expr
    (108) expr -> . expr SLASH expr
    (109) expr -> . expr PLUS expr
    (110) expr -> . expr DASH expr
    (111) expr -> . expr LT expr
    (112) expr -> . expr GT expr
    (113) expr -> . expr LE expr
    (114) expr -> . expr GE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr AND expr
    (118) expr -> . expr OR expr
    (119) expr -> . expr RIGHTSHIFT expr
    (120) expr -> . expr LEFTSHIFT expr
    (121) expr -> . NOT expr
    (122) expr -> . DASH expr
    (88) aexpr -> . STATIC_CAST ( type , expr )
    (89) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (95) aexpr -> . var
    (96) aexpr -> . type ident
    (97) aexpr -> . literal
    (98) aexpr -> . enumeration
    (99) aexpr -> . ident ( exprs )
    (100) aexpr -> . NEW type
    (101) aexpr -> . OOD
    (102) aexpr -> . aexpr DOT ident
    (103) aexpr -> . aexpr DOT ident ( exprs )
    (104) aexpr -> . aexpr [ exprs ]
    (105) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (123) aexpr -> . ( expr )
    (124) aexpr -> . IS_VALID ( var )
    (125) aexpr -> . IS_INVALID ( var )
    (131) var -> . ident
    (45) type -> . typestr
    (126) literal -> . STRING
    (127) literal -> . NUMBER
    (128) literal -> . FLOATNUMBER
    (129) literal -> . LIT_BOOL
    (130) enumeration -> . ident : ident
    (64) ident -> . IDENT
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 160
    STATIC_CAST     shift and go to state 146
    NEW             shift and go to state 144
    OOD             shift and go to state 162
    (               shift and go to state 148
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 149
    STRING          shift and go to state 157
    NUMBER          shift and go to state 142
    FLOATNUMBER     shift and go to state 141
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 163
    expr                           shift and go to state 273
    enumeration                    shift and go to state 150
    literal                        shift and go to state 159
    var                            shift and go to state 154
    typestr                        shift and go to state 19
    type                           shift and go to state 156
    aexpr                          shift and go to state 145

state 223

    (111) expr -> expr LT . expr
    (106) expr -> . aexpr
    (107) expr -> . expr STAR expr
    (108) expr -> . expr SLASH expr
    (109) expr -> . expr PLUS expr
    (110) expr -> . expr DASH expr
    (111) expr -> . expr LT expr
    (112) expr -> . expr GT expr
    (113) expr -> . expr LE expr
    (114) expr -> . expr GE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr AND expr
    (118) expr -> . expr OR expr
    (119) expr -> . expr RIGHTSHIFT expr
    (120) expr -> . expr LEFTSHIFT expr
    (121) expr -> . NOT expr
    (122) expr -> . DASH expr
    (88) aexpr -> . STATIC_CAST ( type , expr )
    (89) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (95) aexpr -> . var
    (96) aexpr -> . type ident
    (97) aexpr -> . literal
    (98) aexpr -> . enumeration
    (99) aexpr -> . ident ( exprs )
    (100) aexpr -> . NEW type
    (101) aexpr -> . OOD
    (102) aexpr -> . aexpr DOT ident
    (103) aexpr -> . aexpr DOT ident ( exprs )
    (104) aexpr -> . aexpr [ exprs ]
    (105) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (123) aexpr -> . ( expr )
    (124) aexpr -> . IS_VALID ( var )
    (125) aexpr -> . IS_INVALID ( var )
    (131) var -> . ident
    (45) type -> . typestr
    (126) literal -> . STRING
    (127) literal -> . NUMBER
    (128) literal -> . FLOATNUMBER
    (129) literal -> . LIT_BOOL
    (130) enumeration -> . ident : ident
    (64) ident -> . IDENT
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 160
    STATIC_CAST     shift and go to state 146
    NEW             shift and go to state 144
    OOD             shift and go to state 162
    (               shift and go to state 148
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 149
    STRING          shift and go to state 157
    NUMBER          shift and go to state 142
    FLOATNUMBER     shift and go to state 141
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 163
    expr                           shift and go to state 274
    enumeration                    shift and go to state 150
    literal                        shift and go to state 159
    var                            shift and go to state 154
    typestr                        shift and go to state 19
    type                           shift and go to state 156
    aexpr                          shift and go to state 145

state 224

    (113) expr -> expr LE . expr
    (106) expr -> . aexpr
    (107) expr -> . expr STAR expr
    (108) expr -> . expr SLASH expr
    (109) expr -> . expr PLUS expr
    (110) expr -> . expr DASH expr
    (111) expr -> . expr LT expr
    (112) expr -> . expr GT expr
    (113) expr -> . expr LE expr
    (114) expr -> . expr GE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr AND expr
    (118) expr -> . expr OR expr
    (119) expr -> . expr RIGHTSHIFT expr
    (120) expr -> . expr LEFTSHIFT expr
    (121) expr -> . NOT expr
    (122) expr -> . DASH expr
    (88) aexpr -> . STATIC_CAST ( type , expr )
    (89) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (95) aexpr -> . var
    (96) aexpr -> . type ident
    (97) aexpr -> . literal
    (98) aexpr -> . enumeration
    (99) aexpr -> . ident ( exprs )
    (100) aexpr -> . NEW type
    (101) aexpr -> . OOD
    (102) aexpr -> . aexpr DOT ident
    (103) aexpr -> . aexpr DOT ident ( exprs )
    (104) aexpr -> . aexpr [ exprs ]
    (105) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (123) aexpr -> . ( expr )
    (124) aexpr -> . IS_VALID ( var )
    (125) aexpr -> . IS_INVALID ( var )
    (131) var -> . ident
    (45) type -> . typestr
    (126) literal -> . STRING
    (127) literal -> . NUMBER
    (128) literal -> . FLOATNUMBER
    (129) literal -> . LIT_BOOL
    (130) enumeration -> . ident : ident
    (64) ident -> . IDENT
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 160
    STATIC_CAST     shift and go to state 146
    NEW             shift and go to state 144
    OOD             shift and go to state 162
    (               shift and go to state 148
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 149
    STRING          shift and go to state 157
    NUMBER          shift and go to state 142
    FLOATNUMBER     shift and go to state 141
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 163
    expr                           shift and go to state 275
    enumeration                    shift and go to state 150
    literal                        shift and go to state 159
    var                            shift and go to state 154
    typestr                        shift and go to state 19
    type                           shift and go to state 156
    aexpr                          shift and go to state 145

state 225

    (109) expr -> expr PLUS . expr
    (106) expr -> . aexpr
    (107) expr -> . expr STAR expr
    (108) expr -> . expr SLASH expr
    (109) expr -> . expr PLUS expr
    (110) expr -> . expr DASH expr
    (111) expr -> . expr LT expr
    (112) expr -> . expr GT expr
    (113) expr -> . expr LE expr
    (114) expr -> . expr GE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr AND expr
    (118) expr -> . expr OR expr
    (119) expr -> . expr RIGHTSHIFT expr
    (120) expr -> . expr LEFTSHIFT expr
    (121) expr -> . NOT expr
    (122) expr -> . DASH expr
    (88) aexpr -> . STATIC_CAST ( type , expr )
    (89) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (95) aexpr -> . var
    (96) aexpr -> . type ident
    (97) aexpr -> . literal
    (98) aexpr -> . enumeration
    (99) aexpr -> . ident ( exprs )
    (100) aexpr -> . NEW type
    (101) aexpr -> . OOD
    (102) aexpr -> . aexpr DOT ident
    (103) aexpr -> . aexpr DOT ident ( exprs )
    (104) aexpr -> . aexpr [ exprs ]
    (105) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (123) aexpr -> . ( expr )
    (124) aexpr -> . IS_VALID ( var )
    (125) aexpr -> . IS_INVALID ( var )
    (131) var -> . ident
    (45) type -> . typestr
    (126) literal -> . STRING
    (127) literal -> . NUMBER
    (128) literal -> . FLOATNUMBER
    (129) literal -> . LIT_BOOL
    (130) enumeration -> . ident : ident
    (64) ident -> . IDENT
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 160
    STATIC_CAST     shift and go to state 146
    NEW             shift and go to state 144
    OOD             shift and go to state 162
    (               shift and go to state 148
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 149
    STRING          shift and go to state 157
    NUMBER          shift and go to state 142
    FLOATNUMBER     shift and go to state 141
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 163
    expr                           shift and go to state 276
    enumeration                    shift and go to state 150
    literal                        shift and go to state 159
    var                            shift and go to state 154
    typestr                        shift and go to state 19
    type                           shift and go to state 156
    aexpr                          shift and go to state 145

state 226

    (108) expr -> expr SLASH . expr
    (106) expr -> . aexpr
    (107) expr -> . expr STAR expr
    (108) expr -> . expr SLASH expr
    (109) expr -> . expr PLUS expr
    (110) expr -> . expr DASH expr
    (111) expr -> . expr LT expr
    (112) expr -> . expr GT expr
    (113) expr -> . expr LE expr
    (114) expr -> . expr GE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr AND expr
    (118) expr -> . expr OR expr
    (119) expr -> . expr RIGHTSHIFT expr
    (120) expr -> . expr LEFTSHIFT expr
    (121) expr -> . NOT expr
    (122) expr -> . DASH expr
    (88) aexpr -> . STATIC_CAST ( type , expr )
    (89) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (95) aexpr -> . var
    (96) aexpr -> . type ident
    (97) aexpr -> . literal
    (98) aexpr -> . enumeration
    (99) aexpr -> . ident ( exprs )
    (100) aexpr -> . NEW type
    (101) aexpr -> . OOD
    (102) aexpr -> . aexpr DOT ident
    (103) aexpr -> . aexpr DOT ident ( exprs )
    (104) aexpr -> . aexpr [ exprs ]
    (105) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (123) aexpr -> . ( expr )
    (124) aexpr -> . IS_VALID ( var )
    (125) aexpr -> . IS_INVALID ( var )
    (131) var -> . ident
    (45) type -> . typestr
    (126) literal -> . STRING
    (127) literal -> . NUMBER
    (128) literal -> . FLOATNUMBER
    (129) literal -> . LIT_BOOL
    (130) enumeration -> . ident : ident
    (64) ident -> . IDENT
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 160
    STATIC_CAST     shift and go to state 146
    NEW             shift and go to state 144
    OOD             shift and go to state 162
    (               shift and go to state 148
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 149
    STRING          shift and go to state 157
    NUMBER          shift and go to state 142
    FLOATNUMBER     shift and go to state 141
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 163
    expr                           shift and go to state 277
    enumeration                    shift and go to state 150
    literal                        shift and go to state 159
    var                            shift and go to state 154
    typestr                        shift and go to state 19
    type                           shift and go to state 156
    aexpr                          shift and go to state 145

state 227

    (119) expr -> expr RIGHTSHIFT . expr
    (106) expr -> . aexpr
    (107) expr -> . expr STAR expr
    (108) expr -> . expr SLASH expr
    (109) expr -> . expr PLUS expr
    (110) expr -> . expr DASH expr
    (111) expr -> . expr LT expr
    (112) expr -> . expr GT expr
    (113) expr -> . expr LE expr
    (114) expr -> . expr GE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr AND expr
    (118) expr -> . expr OR expr
    (119) expr -> . expr RIGHTSHIFT expr
    (120) expr -> . expr LEFTSHIFT expr
    (121) expr -> . NOT expr
    (122) expr -> . DASH expr
    (88) aexpr -> . STATIC_CAST ( type , expr )
    (89) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (95) aexpr -> . var
    (96) aexpr -> . type ident
    (97) aexpr -> . literal
    (98) aexpr -> . enumeration
    (99) aexpr -> . ident ( exprs )
    (100) aexpr -> . NEW type
    (101) aexpr -> . OOD
    (102) aexpr -> . aexpr DOT ident
    (103) aexpr -> . aexpr DOT ident ( exprs )
    (104) aexpr -> . aexpr [ exprs ]
    (105) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (123) aexpr -> . ( expr )
    (124) aexpr -> . IS_VALID ( var )
    (125) aexpr -> . IS_INVALID ( var )
    (131) var -> . ident
    (45) type -> . typestr
    (126) literal -> . STRING
    (127) literal -> . NUMBER
    (128) literal -> . FLOATNUMBER
    (129) literal -> . LIT_BOOL
    (130) enumeration -> . ident : ident
    (64) ident -> . IDENT
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 160
    STATIC_CAST     shift and go to state 146
    NEW             shift and go to state 144
    OOD             shift and go to state 162
    (               shift and go to state 148
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 149
    STRING          shift and go to state 157
    NUMBER          shift and go to state 142
    FLOATNUMBER     shift and go to state 141
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 163
    expr                           shift and go to state 278
    enumeration                    shift and go to state 150
    literal                        shift and go to state 159
    var                            shift and go to state 154
    typestr                        shift and go to state 19
    type                           shift and go to state 156
    aexpr                          shift and go to state 145

state 228

    (115) expr -> expr EQ . expr
    (106) expr -> . aexpr
    (107) expr -> . expr STAR expr
    (108) expr -> . expr SLASH expr
    (109) expr -> . expr PLUS expr
    (110) expr -> . expr DASH expr
    (111) expr -> . expr LT expr
    (112) expr -> . expr GT expr
    (113) expr -> . expr LE expr
    (114) expr -> . expr GE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr AND expr
    (118) expr -> . expr OR expr
    (119) expr -> . expr RIGHTSHIFT expr
    (120) expr -> . expr LEFTSHIFT expr
    (121) expr -> . NOT expr
    (122) expr -> . DASH expr
    (88) aexpr -> . STATIC_CAST ( type , expr )
    (89) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (95) aexpr -> . var
    (96) aexpr -> . type ident
    (97) aexpr -> . literal
    (98) aexpr -> . enumeration
    (99) aexpr -> . ident ( exprs )
    (100) aexpr -> . NEW type
    (101) aexpr -> . OOD
    (102) aexpr -> . aexpr DOT ident
    (103) aexpr -> . aexpr DOT ident ( exprs )
    (104) aexpr -> . aexpr [ exprs ]
    (105) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (123) aexpr -> . ( expr )
    (124) aexpr -> . IS_VALID ( var )
    (125) aexpr -> . IS_INVALID ( var )
    (131) var -> . ident
    (45) type -> . typestr
    (126) literal -> . STRING
    (127) literal -> . NUMBER
    (128) literal -> . FLOATNUMBER
    (129) literal -> . LIT_BOOL
    (130) enumeration -> . ident : ident
    (64) ident -> . IDENT
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 160
    STATIC_CAST     shift and go to state 146
    NEW             shift and go to state 144
    OOD             shift and go to state 162
    (               shift and go to state 148
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 149
    STRING          shift and go to state 157
    NUMBER          shift and go to state 142
    FLOATNUMBER     shift and go to state 141
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 163
    expr                           shift and go to state 279
    enumeration                    shift and go to state 150
    literal                        shift and go to state 159
    var                            shift and go to state 154
    typestr                        shift and go to state 19
    type                           shift and go to state 156
    aexpr                          shift and go to state 145

state 229

    (81) statement -> expr ASSIGN . expr SEMI
    (106) expr -> . aexpr
    (107) expr -> . expr STAR expr
    (108) expr -> . expr SLASH expr
    (109) expr -> . expr PLUS expr
    (110) expr -> . expr DASH expr
    (111) expr -> . expr LT expr
    (112) expr -> . expr GT expr
    (113) expr -> . expr LE expr
    (114) expr -> . expr GE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr AND expr
    (118) expr -> . expr OR expr
    (119) expr -> . expr RIGHTSHIFT expr
    (120) expr -> . expr LEFTSHIFT expr
    (121) expr -> . NOT expr
    (122) expr -> . DASH expr
    (88) aexpr -> . STATIC_CAST ( type , expr )
    (89) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (95) aexpr -> . var
    (96) aexpr -> . type ident
    (97) aexpr -> . literal
    (98) aexpr -> . enumeration
    (99) aexpr -> . ident ( exprs )
    (100) aexpr -> . NEW type
    (101) aexpr -> . OOD
    (102) aexpr -> . aexpr DOT ident
    (103) aexpr -> . aexpr DOT ident ( exprs )
    (104) aexpr -> . aexpr [ exprs ]
    (105) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (123) aexpr -> . ( expr )
    (124) aexpr -> . IS_VALID ( var )
    (125) aexpr -> . IS_INVALID ( var )
    (131) var -> . ident
    (45) type -> . typestr
    (126) literal -> . STRING
    (127) literal -> . NUMBER
    (128) literal -> . FLOATNUMBER
    (129) literal -> . LIT_BOOL
    (130) enumeration -> . ident : ident
    (64) ident -> . IDENT
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 160
    STATIC_CAST     shift and go to state 146
    NEW             shift and go to state 144
    OOD             shift and go to state 162
    (               shift and go to state 148
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 149
    STRING          shift and go to state 157
    NUMBER          shift and go to state 142
    FLOATNUMBER     shift and go to state 141
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 163
    expr                           shift and go to state 280
    enumeration                    shift and go to state 150
    literal                        shift and go to state 159
    var                            shift and go to state 154
    typestr                        shift and go to state 19
    type                           shift and go to state 156
    aexpr                          shift and go to state 145

state 230

    (118) expr -> expr OR . expr
    (106) expr -> . aexpr
    (107) expr -> . expr STAR expr
    (108) expr -> . expr SLASH expr
    (109) expr -> . expr PLUS expr
    (110) expr -> . expr DASH expr
    (111) expr -> . expr LT expr
    (112) expr -> . expr GT expr
    (113) expr -> . expr LE expr
    (114) expr -> . expr GE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr AND expr
    (118) expr -> . expr OR expr
    (119) expr -> . expr RIGHTSHIFT expr
    (120) expr -> . expr LEFTSHIFT expr
    (121) expr -> . NOT expr
    (122) expr -> . DASH expr
    (88) aexpr -> . STATIC_CAST ( type , expr )
    (89) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (95) aexpr -> . var
    (96) aexpr -> . type ident
    (97) aexpr -> . literal
    (98) aexpr -> . enumeration
    (99) aexpr -> . ident ( exprs )
    (100) aexpr -> . NEW type
    (101) aexpr -> . OOD
    (102) aexpr -> . aexpr DOT ident
    (103) aexpr -> . aexpr DOT ident ( exprs )
    (104) aexpr -> . aexpr [ exprs ]
    (105) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (123) aexpr -> . ( expr )
    (124) aexpr -> . IS_VALID ( var )
    (125) aexpr -> . IS_INVALID ( var )
    (131) var -> . ident
    (45) type -> . typestr
    (126) literal -> . STRING
    (127) literal -> . NUMBER
    (128) literal -> . FLOATNUMBER
    (129) literal -> . LIT_BOOL
    (130) enumeration -> . ident : ident
    (64) ident -> . IDENT
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 160
    STATIC_CAST     shift and go to state 146
    NEW             shift and go to state 144
    OOD             shift and go to state 162
    (               shift and go to state 148
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 149
    STRING          shift and go to state 157
    NUMBER          shift and go to state 142
    FLOATNUMBER     shift and go to state 141
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 163
    expr                           shift and go to state 281
    enumeration                    shift and go to state 150
    literal                        shift and go to state 159
    var                            shift and go to state 154
    typestr                        shift and go to state 19
    type                           shift and go to state 156
    aexpr                          shift and go to state 145

state 231

    (124) aexpr -> IS_VALID ( . var )
    (131) var -> . ident
    (64) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 282
    ident                          shift and go to state 137

state 232

    (87) statement -> CHECK_STOP_SLOTS ( . var , STRING , STRING ) SEMI
    (131) var -> . ident
    (64) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 283
    ident                          shift and go to state 137

state 233

    (121) expr -> NOT expr .
    (107) expr -> expr . STAR expr
    (108) expr -> expr . SLASH expr
    (109) expr -> expr . PLUS expr
    (110) expr -> expr . DASH expr
    (111) expr -> expr . LT expr
    (112) expr -> expr . GT expr
    (113) expr -> expr . LE expr
    (114) expr -> expr . GE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . AND expr
    (118) expr -> expr . OR expr
    (119) expr -> expr . RIGHTSHIFT expr
    (120) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 121 (expr -> NOT expr .)
    STAR            reduce using rule 121 (expr -> NOT expr .)
    SLASH           reduce using rule 121 (expr -> NOT expr .)
    PLUS            reduce using rule 121 (expr -> NOT expr .)
    DASH            reduce using rule 121 (expr -> NOT expr .)
    LT              reduce using rule 121 (expr -> NOT expr .)
    GT              reduce using rule 121 (expr -> NOT expr .)
    LE              reduce using rule 121 (expr -> NOT expr .)
    GE              reduce using rule 121 (expr -> NOT expr .)
    EQ              reduce using rule 121 (expr -> NOT expr .)
    NE              reduce using rule 121 (expr -> NOT expr .)
    AND             reduce using rule 121 (expr -> NOT expr .)
    OR              reduce using rule 121 (expr -> NOT expr .)
    RIGHTSHIFT      reduce using rule 121 (expr -> NOT expr .)
    LEFTSHIFT       reduce using rule 121 (expr -> NOT expr .)
    ASSIGN          reduce using rule 121 (expr -> NOT expr .)
    )               reduce using rule 121 (expr -> NOT expr .)
    ,               reduce using rule 121 (expr -> NOT expr .)
    ]               reduce using rule 121 (expr -> NOT expr .)

  ! STAR            [ shift and go to state 218 ]
  ! SLASH           [ shift and go to state 226 ]
  ! PLUS            [ shift and go to state 225 ]
  ! DASH            [ shift and go to state 222 ]
  ! LT              [ shift and go to state 223 ]
  ! GT              [ shift and go to state 217 ]
  ! LE              [ shift and go to state 224 ]
  ! GE              [ shift and go to state 220 ]
  ! EQ              [ shift and go to state 228 ]
  ! NE              [ shift and go to state 221 ]
  ! AND             [ shift and go to state 215 ]
  ! OR              [ shift and go to state 230 ]
  ! RIGHTSHIFT      [ shift and go to state 227 ]
  ! LEFTSHIFT       [ shift and go to state 216 ]


state 234

    (54) param -> type STAR ident = STRING .

    ,               reduce using rule 54 (param -> type STAR ident = STRING .)
    )               reduce using rule 54 (param -> type STAR ident = STRING .)
    {               reduce using rule 54 (param -> type STAR ident = STRING .)


state 235

    (36) type_enum -> ident pairs . SEMI

    SEMI            shift and go to state 284


state 236

    (19) decl -> ENUM ( type pairs ) { type_enums } .

    PROTOCOL        reduce using rule 19 (decl -> ENUM ( type pairs ) { type_enums } .)
    INCLUDE         reduce using rule 19 (decl -> ENUM ( type pairs ) { type_enums } .)
    MACHINE         reduce using rule 19 (decl -> ENUM ( type pairs ) { type_enums } .)
    ACTION          reduce using rule 19 (decl -> ENUM ( type pairs ) { type_enums } .)
    IN_PORT         reduce using rule 19 (decl -> ENUM ( type pairs ) { type_enums } .)
    OUT_PORT        reduce using rule 19 (decl -> ENUM ( type pairs ) { type_enums } .)
    TRANS           reduce using rule 19 (decl -> ENUM ( type pairs ) { type_enums } .)
    EXTERN_TYPE     reduce using rule 19 (decl -> ENUM ( type pairs ) { type_enums } .)
    GLOBAL          reduce using rule 19 (decl -> ENUM ( type pairs ) { type_enums } .)
    STRUCT          reduce using rule 19 (decl -> ENUM ( type pairs ) { type_enums } .)
    ENUM            reduce using rule 19 (decl -> ENUM ( type pairs ) { type_enums } .)
    STATE_DECL      reduce using rule 19 (decl -> ENUM ( type pairs ) { type_enums } .)
    VOID            reduce using rule 19 (decl -> ENUM ( type pairs ) { type_enums } .)
    IDENT           reduce using rule 19 (decl -> ENUM ( type pairs ) { type_enums } .)
    }               reduce using rule 19 (decl -> ENUM ( type pairs ) { type_enums } .)
    $end            reduce using rule 19 (decl -> ENUM ( type pairs ) { type_enums } .)


state 237

    (34) type_enums -> type_enum type_enums .

    }               reduce using rule 34 (type_enums -> type_enum type_enums .)


state 238

    (8) decl -> MACHINE ( ident pairs ) : params { . decls }
    (3) decls -> . declsx
    (4) declsx -> . decl declsx
    (5) declsx -> . empty
    (6) decl -> . PROTOCOL STRING SEMI
    (7) decl -> . INCLUDE STRING SEMI
    (8) decl -> . MACHINE ( ident pairs ) : params { decls }
    (9) decl -> . ACTION ( ident pairs ) statements
    (10) decl -> . IN_PORT ( ident , type , var pairs ) statements
    (11) decl -> . OUT_PORT ( ident , type , var pairs ) SEMI
    (12) decl -> . TRANS ( idents , idents , ident pairs ) idents
    (13) decl -> . TRANS ( idents , idents pairs ) idents
    (14) decl -> . TRANS ( idents , idents , ident pairs ) idents idents
    (15) decl -> . TRANS ( idents , idents pairs ) idents idents
    (16) decl -> . EXTERN_TYPE ( type pairs ) SEMI
    (17) decl -> . GLOBAL ( type pairs ) { type_members }
    (18) decl -> . STRUCT ( type pairs ) { type_members }
    (19) decl -> . ENUM ( type pairs ) { type_enums }
    (20) decl -> . STATE_DECL ( type pairs ) { type_states }
    (21) decl -> . type ident pairs SEMI
    (22) decl -> . func_decl
    (25) decl -> . func_def
    (2) empty -> .
    (45) type -> . typestr
    (23) func_decl -> . void ident ( params ) pairs SEMI
    (24) func_decl -> . type ident ( params ) pairs SEMI
    (26) func_def -> . void ident ( params ) pairs statements
    (27) func_def -> . type ident ( params ) pairs statements
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident
    (46) void -> . VOID
    (64) ident -> . IDENT

    PROTOCOL        shift and go to state 13
    INCLUDE         shift and go to state 20
    MACHINE         shift and go to state 17
    ACTION          shift and go to state 9
    IN_PORT         shift and go to state 25
    OUT_PORT        shift and go to state 8
    TRANS           shift and go to state 7
    EXTERN_TYPE     shift and go to state 18
    GLOBAL          shift and go to state 3
    STRUCT          shift and go to state 22
    ENUM            shift and go to state 16
    STATE_DECL      shift and go to state 23
    }               reduce using rule 2 (empty -> .)
    VOID            shift and go to state 2
    IDENT           shift and go to state 4

    decl                           shift and go to state 1
    ident                          shift and go to state 21
    func_def                       shift and go to state 14
    void                           shift and go to state 15
    declsx                         shift and go to state 12
    func_decl                      shift and go to state 6
    decls                          shift and go to state 285
    type                           shift and go to state 10
    typestr                        shift and go to state 19
    empty                          shift and go to state 11

state 239

    (18) decl -> STRUCT ( type pairs ) { type_members } .

    PROTOCOL        reduce using rule 18 (decl -> STRUCT ( type pairs ) { type_members } .)
    INCLUDE         reduce using rule 18 (decl -> STRUCT ( type pairs ) { type_members } .)
    MACHINE         reduce using rule 18 (decl -> STRUCT ( type pairs ) { type_members } .)
    ACTION          reduce using rule 18 (decl -> STRUCT ( type pairs ) { type_members } .)
    IN_PORT         reduce using rule 18 (decl -> STRUCT ( type pairs ) { type_members } .)
    OUT_PORT        reduce using rule 18 (decl -> STRUCT ( type pairs ) { type_members } .)
    TRANS           reduce using rule 18 (decl -> STRUCT ( type pairs ) { type_members } .)
    EXTERN_TYPE     reduce using rule 18 (decl -> STRUCT ( type pairs ) { type_members } .)
    GLOBAL          reduce using rule 18 (decl -> STRUCT ( type pairs ) { type_members } .)
    STRUCT          reduce using rule 18 (decl -> STRUCT ( type pairs ) { type_members } .)
    ENUM            reduce using rule 18 (decl -> STRUCT ( type pairs ) { type_members } .)
    STATE_DECL      reduce using rule 18 (decl -> STRUCT ( type pairs ) { type_members } .)
    VOID            reduce using rule 18 (decl -> STRUCT ( type pairs ) { type_members } .)
    IDENT           reduce using rule 18 (decl -> STRUCT ( type pairs ) { type_members } .)
    }               reduce using rule 18 (decl -> STRUCT ( type pairs ) { type_members } .)
    $end            reduce using rule 18 (decl -> STRUCT ( type pairs ) { type_members } .)


state 240

    (39) type_state -> ident , . enumeration pairs SEMI
    (130) enumeration -> . ident : ident
    (64) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 286
    enumeration                    shift and go to state 287

state 241

    (20) decl -> STATE_DECL ( type pairs ) { type_states } .

    PROTOCOL        reduce using rule 20 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    INCLUDE         reduce using rule 20 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    MACHINE         reduce using rule 20 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    ACTION          reduce using rule 20 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    IN_PORT         reduce using rule 20 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    OUT_PORT        reduce using rule 20 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    TRANS           reduce using rule 20 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    EXTERN_TYPE     reduce using rule 20 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    GLOBAL          reduce using rule 20 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    STRUCT          reduce using rule 20 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    ENUM            reduce using rule 20 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    STATE_DECL      reduce using rule 20 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    VOID            reduce using rule 20 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    IDENT           reduce using rule 20 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    }               reduce using rule 20 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    $end            reduce using rule 20 (decl -> STATE_DECL ( type pairs ) { type_states } .)


state 242

    (37) type_states -> type_state type_states .

    }               reduce using rule 37 (type_states -> type_state type_states .)


state 243

    (10) decl -> IN_PORT ( ident , type , var pairs . ) statements

    )               shift and go to state 288


state 244

    (32) type_member -> type_or_void ident pairs . SEMI

    SEMI            shift and go to state 289


state 245

    (30) type_member -> type_or_void ident ( . types ) pairs SEMI
    (31) type_member -> type_or_void ident ( . params ) pairs statements
    (40) types -> . type , types
    (41) types -> . type
    (42) types -> . empty
    (49) params -> . param , params
    (50) params -> . param
    (51) params -> . empty
    (45) type -> . typestr
    (2) empty -> .
    (52) param -> . type ident
    (53) param -> . type STAR ident
    (54) param -> . type STAR ident = STRING
    (55) param -> . type ident = NUMBER
    (56) param -> . type ident = LIT_BOOL
    (57) param -> . type ident = STRING
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident
    (64) ident -> . IDENT

    )               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 4

    ident                          shift and go to state 21
    param                          shift and go to state 70
    params                         shift and go to state 290
    empty                          shift and go to state 291
    typestr                        shift and go to state 19
    type                           shift and go to state 292
    types                          shift and go to state 293

state 246

    (33) type_member -> type_or_void ident ASSIGN . expr SEMI
    (106) expr -> . aexpr
    (107) expr -> . expr STAR expr
    (108) expr -> . expr SLASH expr
    (109) expr -> . expr PLUS expr
    (110) expr -> . expr DASH expr
    (111) expr -> . expr LT expr
    (112) expr -> . expr GT expr
    (113) expr -> . expr LE expr
    (114) expr -> . expr GE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr AND expr
    (118) expr -> . expr OR expr
    (119) expr -> . expr RIGHTSHIFT expr
    (120) expr -> . expr LEFTSHIFT expr
    (121) expr -> . NOT expr
    (122) expr -> . DASH expr
    (88) aexpr -> . STATIC_CAST ( type , expr )
    (89) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (95) aexpr -> . var
    (96) aexpr -> . type ident
    (97) aexpr -> . literal
    (98) aexpr -> . enumeration
    (99) aexpr -> . ident ( exprs )
    (100) aexpr -> . NEW type
    (101) aexpr -> . OOD
    (102) aexpr -> . aexpr DOT ident
    (103) aexpr -> . aexpr DOT ident ( exprs )
    (104) aexpr -> . aexpr [ exprs ]
    (105) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (123) aexpr -> . ( expr )
    (124) aexpr -> . IS_VALID ( var )
    (125) aexpr -> . IS_INVALID ( var )
    (131) var -> . ident
    (45) type -> . typestr
    (126) literal -> . STRING
    (127) literal -> . NUMBER
    (128) literal -> . FLOATNUMBER
    (129) literal -> . LIT_BOOL
    (130) enumeration -> . ident : ident
    (64) ident -> . IDENT
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 160
    STATIC_CAST     shift and go to state 146
    NEW             shift and go to state 144
    OOD             shift and go to state 162
    (               shift and go to state 148
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 149
    STRING          shift and go to state 157
    NUMBER          shift and go to state 142
    FLOATNUMBER     shift and go to state 141
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 163
    expr                           shift and go to state 294
    enumeration                    shift and go to state 150
    aexpr                          shift and go to state 145
    literal                        shift and go to state 159
    var                            shift and go to state 154
    typestr                        shift and go to state 19
    type                           shift and go to state 156

state 247

    (15) decl -> TRANS ( idents , idents pairs ) idents idents .

    PROTOCOL        reduce using rule 15 (decl -> TRANS ( idents , idents pairs ) idents idents .)
    INCLUDE         reduce using rule 15 (decl -> TRANS ( idents , idents pairs ) idents idents .)
    MACHINE         reduce using rule 15 (decl -> TRANS ( idents , idents pairs ) idents idents .)
    ACTION          reduce using rule 15 (decl -> TRANS ( idents , idents pairs ) idents idents .)
    IN_PORT         reduce using rule 15 (decl -> TRANS ( idents , idents pairs ) idents idents .)
    OUT_PORT        reduce using rule 15 (decl -> TRANS ( idents , idents pairs ) idents idents .)
    TRANS           reduce using rule 15 (decl -> TRANS ( idents , idents pairs ) idents idents .)
    EXTERN_TYPE     reduce using rule 15 (decl -> TRANS ( idents , idents pairs ) idents idents .)
    GLOBAL          reduce using rule 15 (decl -> TRANS ( idents , idents pairs ) idents idents .)
    STRUCT          reduce using rule 15 (decl -> TRANS ( idents , idents pairs ) idents idents .)
    ENUM            reduce using rule 15 (decl -> TRANS ( idents , idents pairs ) idents idents .)
    STATE_DECL      reduce using rule 15 (decl -> TRANS ( idents , idents pairs ) idents idents .)
    VOID            reduce using rule 15 (decl -> TRANS ( idents , idents pairs ) idents idents .)
    IDENT           reduce using rule 15 (decl -> TRANS ( idents , idents pairs ) idents idents .)
    }               reduce using rule 15 (decl -> TRANS ( idents , idents pairs ) idents idents .)
    $end            reduce using rule 15 (decl -> TRANS ( idents , idents pairs ) idents idents .)


state 248

    (12) decl -> TRANS ( idents , idents , ident pairs ) . idents
    (14) decl -> TRANS ( idents , idents , ident pairs ) . idents idents
    (58) idents -> . { identx }
    (59) idents -> . ident
    (64) ident -> . IDENT

    {               shift and go to state 45
    IDENT           shift and go to state 4

    ident                          shift and go to state 43
    idents                         shift and go to state 295

state 249

    (11) decl -> OUT_PORT ( ident , type , var pairs ) . SEMI

    SEMI            shift and go to state 296


state 250

    (84) statement -> PEEK ( var . , type pairs ) statements

    ,               shift and go to state 297


state 251

    (90) statement -> RETURN expr SEMI .

    ENQUEUE         reduce using rule 90 (statement -> RETURN expr SEMI .)
    STALL_AND_WAIT  reduce using rule 90 (statement -> RETURN expr SEMI .)
    PEEK            reduce using rule 90 (statement -> RETURN expr SEMI .)
    COPY_HEAD       reduce using rule 90 (statement -> RETURN expr SEMI .)
    CHECK_ALLOCATE  reduce using rule 90 (statement -> RETURN expr SEMI .)
    CHECK_STOP_SLOTS reduce using rule 90 (statement -> RETURN expr SEMI .)
    RETURN          reduce using rule 90 (statement -> RETURN expr SEMI .)
    NOT             reduce using rule 90 (statement -> RETURN expr SEMI .)
    DASH            reduce using rule 90 (statement -> RETURN expr SEMI .)
    IF              reduce using rule 90 (statement -> RETURN expr SEMI .)
    STATIC_CAST     reduce using rule 90 (statement -> RETURN expr SEMI .)
    NEW             reduce using rule 90 (statement -> RETURN expr SEMI .)
    OOD             reduce using rule 90 (statement -> RETURN expr SEMI .)
    (               reduce using rule 90 (statement -> RETURN expr SEMI .)
    IS_VALID        reduce using rule 90 (statement -> RETURN expr SEMI .)
    IS_INVALID      reduce using rule 90 (statement -> RETURN expr SEMI .)
    STRING          reduce using rule 90 (statement -> RETURN expr SEMI .)
    NUMBER          reduce using rule 90 (statement -> RETURN expr SEMI .)
    FLOATNUMBER     reduce using rule 90 (statement -> RETURN expr SEMI .)
    LIT_BOOL        reduce using rule 90 (statement -> RETURN expr SEMI .)
    IDENT           reduce using rule 90 (statement -> RETURN expr SEMI .)
    }               reduce using rule 90 (statement -> RETURN expr SEMI .)


state 252

    (79) exprs -> empty .

    ]               reduce using rule 79 (exprs -> empty .)
    )               reduce using rule 79 (exprs -> empty .)


state 253

    (77) exprs -> expr . , exprs
    (78) exprs -> expr .
    (107) expr -> expr . STAR expr
    (108) expr -> expr . SLASH expr
    (109) expr -> expr . PLUS expr
    (110) expr -> expr . DASH expr
    (111) expr -> expr . LT expr
    (112) expr -> expr . GT expr
    (113) expr -> expr . LE expr
    (114) expr -> expr . GE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . AND expr
    (118) expr -> expr . OR expr
    (119) expr -> expr . RIGHTSHIFT expr
    (120) expr -> expr . LEFTSHIFT expr

    ,               shift and go to state 298
    ]               reduce using rule 78 (exprs -> expr .)
    )               reduce using rule 78 (exprs -> expr .)
    STAR            shift and go to state 218
    SLASH           shift and go to state 226
    PLUS            shift and go to state 225
    DASH            shift and go to state 222
    LT              shift and go to state 223
    GT              shift and go to state 217
    LE              shift and go to state 224
    GE              shift and go to state 220
    EQ              shift and go to state 228
    NE              shift and go to state 221
    AND             shift and go to state 215
    OR              shift and go to state 230
    RIGHTSHIFT      shift and go to state 227
    LEFTSHIFT       shift and go to state 216


state 254

    (104) aexpr -> aexpr [ exprs . ]

    ]               shift and go to state 299


state 255

    (102) aexpr -> aexpr DOT ident .
    (103) aexpr -> aexpr DOT ident . ( exprs )

    DOT             reduce using rule 102 (aexpr -> aexpr DOT ident .)
    [               reduce using rule 102 (aexpr -> aexpr DOT ident .)
    )               reduce using rule 102 (aexpr -> aexpr DOT ident .)
    STAR            reduce using rule 102 (aexpr -> aexpr DOT ident .)
    SLASH           reduce using rule 102 (aexpr -> aexpr DOT ident .)
    PLUS            reduce using rule 102 (aexpr -> aexpr DOT ident .)
    DASH            reduce using rule 102 (aexpr -> aexpr DOT ident .)
    LT              reduce using rule 102 (aexpr -> aexpr DOT ident .)
    GT              reduce using rule 102 (aexpr -> aexpr DOT ident .)
    LE              reduce using rule 102 (aexpr -> aexpr DOT ident .)
    GE              reduce using rule 102 (aexpr -> aexpr DOT ident .)
    EQ              reduce using rule 102 (aexpr -> aexpr DOT ident .)
    NE              reduce using rule 102 (aexpr -> aexpr DOT ident .)
    AND             reduce using rule 102 (aexpr -> aexpr DOT ident .)
    OR              reduce using rule 102 (aexpr -> aexpr DOT ident .)
    RIGHTSHIFT      reduce using rule 102 (aexpr -> aexpr DOT ident .)
    LEFTSHIFT       reduce using rule 102 (aexpr -> aexpr DOT ident .)
    SEMI            reduce using rule 102 (aexpr -> aexpr DOT ident .)
    ASSIGN          reduce using rule 102 (aexpr -> aexpr DOT ident .)
    ,               reduce using rule 102 (aexpr -> aexpr DOT ident .)
    ]               reduce using rule 102 (aexpr -> aexpr DOT ident .)
    (               shift and go to state 300


state 256

    (88) aexpr -> STATIC_CAST ( type . , expr )
    (89) aexpr -> STATIC_CAST ( type . , STRING , expr )

    ,               shift and go to state 301


state 257

    (86) statement -> CHECK_ALLOCATE ( var . ) SEMI

    )               shift and go to state 302


state 258

    (123) aexpr -> ( expr ) .

    DOT             reduce using rule 123 (aexpr -> ( expr ) .)
    [               reduce using rule 123 (aexpr -> ( expr ) .)
    )               reduce using rule 123 (aexpr -> ( expr ) .)
    STAR            reduce using rule 123 (aexpr -> ( expr ) .)
    SLASH           reduce using rule 123 (aexpr -> ( expr ) .)
    PLUS            reduce using rule 123 (aexpr -> ( expr ) .)
    DASH            reduce using rule 123 (aexpr -> ( expr ) .)
    LT              reduce using rule 123 (aexpr -> ( expr ) .)
    GT              reduce using rule 123 (aexpr -> ( expr ) .)
    LE              reduce using rule 123 (aexpr -> ( expr ) .)
    GE              reduce using rule 123 (aexpr -> ( expr ) .)
    EQ              reduce using rule 123 (aexpr -> ( expr ) .)
    NE              reduce using rule 123 (aexpr -> ( expr ) .)
    AND             reduce using rule 123 (aexpr -> ( expr ) .)
    OR              reduce using rule 123 (aexpr -> ( expr ) .)
    RIGHTSHIFT      reduce using rule 123 (aexpr -> ( expr ) .)
    LEFTSHIFT       reduce using rule 123 (aexpr -> ( expr ) .)
    SEMI            reduce using rule 123 (aexpr -> ( expr ) .)
    ASSIGN          reduce using rule 123 (aexpr -> ( expr ) .)
    ,               reduce using rule 123 (aexpr -> ( expr ) .)
    ]               reduce using rule 123 (aexpr -> ( expr ) .)


state 259

    (125) aexpr -> IS_INVALID ( var . )

    )               shift and go to state 303


state 260

    (82) statement -> ENQUEUE ( var . , type pairs ) statements

    ,               shift and go to state 304


state 261

    (85) statement -> COPY_HEAD ( var . , var pairs ) SEMI

    ,               shift and go to state 305


state 262

    (105) aexpr -> type DOUBLE_COLON ident . ( exprs )

    (               shift and go to state 306


state 263

    (83) statement -> STALL_AND_WAIT ( var . , var ) SEMI

    ,               shift and go to state 307


state 264

    (92) if_statement -> IF ( expr . ) statements
    (93) if_statement -> IF ( expr . ) statements ELSE statements
    (94) if_statement -> IF ( expr . ) statements ELSE if_statement
    (107) expr -> expr . STAR expr
    (108) expr -> expr . SLASH expr
    (109) expr -> expr . PLUS expr
    (110) expr -> expr . DASH expr
    (111) expr -> expr . LT expr
    (112) expr -> expr . GT expr
    (113) expr -> expr . LE expr
    (114) expr -> expr . GE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . AND expr
    (118) expr -> expr . OR expr
    (119) expr -> expr . RIGHTSHIFT expr
    (120) expr -> expr . LEFTSHIFT expr

    )               shift and go to state 308
    STAR            shift and go to state 218
    SLASH           shift and go to state 226
    PLUS            shift and go to state 225
    DASH            shift and go to state 222
    LT              shift and go to state 223
    GT              shift and go to state 217
    LE              shift and go to state 224
    GE              shift and go to state 220
    EQ              shift and go to state 228
    NE              shift and go to state 221
    AND             shift and go to state 215
    OR              shift and go to state 230
    RIGHTSHIFT      shift and go to state 227
    LEFTSHIFT       shift and go to state 216


state 265

    (99) aexpr -> ident ( exprs . )

    )               shift and go to state 309


state 266

    (130) enumeration -> ident : ident .

    DOT             reduce using rule 130 (enumeration -> ident : ident .)
    [               reduce using rule 130 (enumeration -> ident : ident .)
    ,               reduce using rule 130 (enumeration -> ident : ident .)
    STAR            reduce using rule 130 (enumeration -> ident : ident .)
    SLASH           reduce using rule 130 (enumeration -> ident : ident .)
    PLUS            reduce using rule 130 (enumeration -> ident : ident .)
    DASH            reduce using rule 130 (enumeration -> ident : ident .)
    LT              reduce using rule 130 (enumeration -> ident : ident .)
    GT              reduce using rule 130 (enumeration -> ident : ident .)
    LE              reduce using rule 130 (enumeration -> ident : ident .)
    GE              reduce using rule 130 (enumeration -> ident : ident .)
    EQ              reduce using rule 130 (enumeration -> ident : ident .)
    NE              reduce using rule 130 (enumeration -> ident : ident .)
    AND             reduce using rule 130 (enumeration -> ident : ident .)
    OR              reduce using rule 130 (enumeration -> ident : ident .)
    RIGHTSHIFT      reduce using rule 130 (enumeration -> ident : ident .)
    LEFTSHIFT       reduce using rule 130 (enumeration -> ident : ident .)
    ]               reduce using rule 130 (enumeration -> ident : ident .)
    )               reduce using rule 130 (enumeration -> ident : ident .)
    SEMI            reduce using rule 130 (enumeration -> ident : ident .)
    ASSIGN          reduce using rule 130 (enumeration -> ident : ident .)


state 267

    (117) expr -> expr AND expr .
    (107) expr -> expr . STAR expr
    (108) expr -> expr . SLASH expr
    (109) expr -> expr . PLUS expr
    (110) expr -> expr . DASH expr
    (111) expr -> expr . LT expr
    (112) expr -> expr . GT expr
    (113) expr -> expr . LE expr
    (114) expr -> expr . GE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . AND expr
    (118) expr -> expr . OR expr
    (119) expr -> expr . RIGHTSHIFT expr
    (120) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 117 (expr -> expr AND expr .)
    AND             reduce using rule 117 (expr -> expr AND expr .)
    OR              reduce using rule 117 (expr -> expr AND expr .)
    ASSIGN          reduce using rule 117 (expr -> expr AND expr .)
    )               reduce using rule 117 (expr -> expr AND expr .)
    ,               reduce using rule 117 (expr -> expr AND expr .)
    ]               reduce using rule 117 (expr -> expr AND expr .)
    STAR            shift and go to state 218
    SLASH           shift and go to state 226
    PLUS            shift and go to state 225
    DASH            shift and go to state 222
    LT              shift and go to state 223
    GT              shift and go to state 217
    LE              shift and go to state 224
    GE              shift and go to state 220
    EQ              shift and go to state 228
    NE              shift and go to state 221
    RIGHTSHIFT      shift and go to state 227
    LEFTSHIFT       shift and go to state 216

  ! STAR            [ reduce using rule 117 (expr -> expr AND expr .) ]
  ! SLASH           [ reduce using rule 117 (expr -> expr AND expr .) ]
  ! PLUS            [ reduce using rule 117 (expr -> expr AND expr .) ]
  ! DASH            [ reduce using rule 117 (expr -> expr AND expr .) ]
  ! LT              [ reduce using rule 117 (expr -> expr AND expr .) ]
  ! GT              [ reduce using rule 117 (expr -> expr AND expr .) ]
  ! LE              [ reduce using rule 117 (expr -> expr AND expr .) ]
  ! GE              [ reduce using rule 117 (expr -> expr AND expr .) ]
  ! EQ              [ reduce using rule 117 (expr -> expr AND expr .) ]
  ! NE              [ reduce using rule 117 (expr -> expr AND expr .) ]
  ! RIGHTSHIFT      [ reduce using rule 117 (expr -> expr AND expr .) ]
  ! LEFTSHIFT       [ reduce using rule 117 (expr -> expr AND expr .) ]
  ! AND             [ shift and go to state 215 ]
  ! OR              [ shift and go to state 230 ]


state 268

    (120) expr -> expr LEFTSHIFT expr .
    (107) expr -> expr . STAR expr
    (108) expr -> expr . SLASH expr
    (109) expr -> expr . PLUS expr
    (110) expr -> expr . DASH expr
    (111) expr -> expr . LT expr
    (112) expr -> expr . GT expr
    (113) expr -> expr . LE expr
    (114) expr -> expr . GE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . AND expr
    (118) expr -> expr . OR expr
    (119) expr -> expr . RIGHTSHIFT expr
    (120) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 120 (expr -> expr LEFTSHIFT expr .)
    LT              reduce using rule 120 (expr -> expr LEFTSHIFT expr .)
    GT              reduce using rule 120 (expr -> expr LEFTSHIFT expr .)
    LE              reduce using rule 120 (expr -> expr LEFTSHIFT expr .)
    GE              reduce using rule 120 (expr -> expr LEFTSHIFT expr .)
    EQ              reduce using rule 120 (expr -> expr LEFTSHIFT expr .)
    NE              reduce using rule 120 (expr -> expr LEFTSHIFT expr .)
    AND             reduce using rule 120 (expr -> expr LEFTSHIFT expr .)
    OR              reduce using rule 120 (expr -> expr LEFTSHIFT expr .)
    RIGHTSHIFT      reduce using rule 120 (expr -> expr LEFTSHIFT expr .)
    LEFTSHIFT       reduce using rule 120 (expr -> expr LEFTSHIFT expr .)
    ASSIGN          reduce using rule 120 (expr -> expr LEFTSHIFT expr .)
    )               reduce using rule 120 (expr -> expr LEFTSHIFT expr .)
    ,               reduce using rule 120 (expr -> expr LEFTSHIFT expr .)
    ]               reduce using rule 120 (expr -> expr LEFTSHIFT expr .)
    STAR            shift and go to state 218
    SLASH           shift and go to state 226
    PLUS            shift and go to state 225
    DASH            shift and go to state 222

  ! STAR            [ reduce using rule 120 (expr -> expr LEFTSHIFT expr .) ]
  ! SLASH           [ reduce using rule 120 (expr -> expr LEFTSHIFT expr .) ]
  ! PLUS            [ reduce using rule 120 (expr -> expr LEFTSHIFT expr .) ]
  ! DASH            [ reduce using rule 120 (expr -> expr LEFTSHIFT expr .) ]
  ! LT              [ shift and go to state 223 ]
  ! GT              [ shift and go to state 217 ]
  ! LE              [ shift and go to state 224 ]
  ! GE              [ shift and go to state 220 ]
  ! EQ              [ shift and go to state 228 ]
  ! NE              [ shift and go to state 221 ]
  ! AND             [ shift and go to state 215 ]
  ! OR              [ shift and go to state 230 ]
  ! RIGHTSHIFT      [ shift and go to state 227 ]
  ! LEFTSHIFT       [ shift and go to state 216 ]


state 269

    (112) expr -> expr GT expr .
    (107) expr -> expr . STAR expr
    (108) expr -> expr . SLASH expr
    (109) expr -> expr . PLUS expr
    (110) expr -> expr . DASH expr
    (111) expr -> expr . LT expr
    (112) expr -> expr . GT expr
    (113) expr -> expr . LE expr
    (114) expr -> expr . GE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . AND expr
    (118) expr -> expr . OR expr
    (119) expr -> expr . RIGHTSHIFT expr
    (120) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 112 (expr -> expr GT expr .)
    LT              reduce using rule 112 (expr -> expr GT expr .)
    GT              reduce using rule 112 (expr -> expr GT expr .)
    LE              reduce using rule 112 (expr -> expr GT expr .)
    GE              reduce using rule 112 (expr -> expr GT expr .)
    EQ              reduce using rule 112 (expr -> expr GT expr .)
    NE              reduce using rule 112 (expr -> expr GT expr .)
    AND             reduce using rule 112 (expr -> expr GT expr .)
    OR              reduce using rule 112 (expr -> expr GT expr .)
    ASSIGN          reduce using rule 112 (expr -> expr GT expr .)
    )               reduce using rule 112 (expr -> expr GT expr .)
    ,               reduce using rule 112 (expr -> expr GT expr .)
    ]               reduce using rule 112 (expr -> expr GT expr .)
    STAR            shift and go to state 218
    SLASH           shift and go to state 226
    PLUS            shift and go to state 225
    DASH            shift and go to state 222
    RIGHTSHIFT      shift and go to state 227
    LEFTSHIFT       shift and go to state 216

  ! STAR            [ reduce using rule 112 (expr -> expr GT expr .) ]
  ! SLASH           [ reduce using rule 112 (expr -> expr GT expr .) ]
  ! PLUS            [ reduce using rule 112 (expr -> expr GT expr .) ]
  ! DASH            [ reduce using rule 112 (expr -> expr GT expr .) ]
  ! RIGHTSHIFT      [ reduce using rule 112 (expr -> expr GT expr .) ]
  ! LEFTSHIFT       [ reduce using rule 112 (expr -> expr GT expr .) ]
  ! LT              [ shift and go to state 223 ]
  ! GT              [ shift and go to state 217 ]
  ! LE              [ shift and go to state 224 ]
  ! GE              [ shift and go to state 220 ]
  ! EQ              [ shift and go to state 228 ]
  ! NE              [ shift and go to state 221 ]
  ! AND             [ shift and go to state 215 ]
  ! OR              [ shift and go to state 230 ]


state 270

    (107) expr -> expr STAR expr .
    (107) expr -> expr . STAR expr
    (108) expr -> expr . SLASH expr
    (109) expr -> expr . PLUS expr
    (110) expr -> expr . DASH expr
    (111) expr -> expr . LT expr
    (112) expr -> expr . GT expr
    (113) expr -> expr . LE expr
    (114) expr -> expr . GE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . AND expr
    (118) expr -> expr . OR expr
    (119) expr -> expr . RIGHTSHIFT expr
    (120) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 107 (expr -> expr STAR expr .)
    STAR            reduce using rule 107 (expr -> expr STAR expr .)
    SLASH           reduce using rule 107 (expr -> expr STAR expr .)
    PLUS            reduce using rule 107 (expr -> expr STAR expr .)
    DASH            reduce using rule 107 (expr -> expr STAR expr .)
    LT              reduce using rule 107 (expr -> expr STAR expr .)
    GT              reduce using rule 107 (expr -> expr STAR expr .)
    LE              reduce using rule 107 (expr -> expr STAR expr .)
    GE              reduce using rule 107 (expr -> expr STAR expr .)
    EQ              reduce using rule 107 (expr -> expr STAR expr .)
    NE              reduce using rule 107 (expr -> expr STAR expr .)
    AND             reduce using rule 107 (expr -> expr STAR expr .)
    OR              reduce using rule 107 (expr -> expr STAR expr .)
    RIGHTSHIFT      reduce using rule 107 (expr -> expr STAR expr .)
    LEFTSHIFT       reduce using rule 107 (expr -> expr STAR expr .)
    ASSIGN          reduce using rule 107 (expr -> expr STAR expr .)
    )               reduce using rule 107 (expr -> expr STAR expr .)
    ,               reduce using rule 107 (expr -> expr STAR expr .)
    ]               reduce using rule 107 (expr -> expr STAR expr .)

  ! STAR            [ shift and go to state 218 ]
  ! SLASH           [ shift and go to state 226 ]
  ! PLUS            [ shift and go to state 225 ]
  ! DASH            [ shift and go to state 222 ]
  ! LT              [ shift and go to state 223 ]
  ! GT              [ shift and go to state 217 ]
  ! LE              [ shift and go to state 224 ]
  ! GE              [ shift and go to state 220 ]
  ! EQ              [ shift and go to state 228 ]
  ! NE              [ shift and go to state 221 ]
  ! AND             [ shift and go to state 215 ]
  ! OR              [ shift and go to state 230 ]
  ! RIGHTSHIFT      [ shift and go to state 227 ]
  ! LEFTSHIFT       [ shift and go to state 216 ]


state 271

    (114) expr -> expr GE expr .
    (107) expr -> expr . STAR expr
    (108) expr -> expr . SLASH expr
    (109) expr -> expr . PLUS expr
    (110) expr -> expr . DASH expr
    (111) expr -> expr . LT expr
    (112) expr -> expr . GT expr
    (113) expr -> expr . LE expr
    (114) expr -> expr . GE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . AND expr
    (118) expr -> expr . OR expr
    (119) expr -> expr . RIGHTSHIFT expr
    (120) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 114 (expr -> expr GE expr .)
    LT              reduce using rule 114 (expr -> expr GE expr .)
    GT              reduce using rule 114 (expr -> expr GE expr .)
    LE              reduce using rule 114 (expr -> expr GE expr .)
    GE              reduce using rule 114 (expr -> expr GE expr .)
    EQ              reduce using rule 114 (expr -> expr GE expr .)
    NE              reduce using rule 114 (expr -> expr GE expr .)
    AND             reduce using rule 114 (expr -> expr GE expr .)
    OR              reduce using rule 114 (expr -> expr GE expr .)
    ASSIGN          reduce using rule 114 (expr -> expr GE expr .)
    )               reduce using rule 114 (expr -> expr GE expr .)
    ,               reduce using rule 114 (expr -> expr GE expr .)
    ]               reduce using rule 114 (expr -> expr GE expr .)
    STAR            shift and go to state 218
    SLASH           shift and go to state 226
    PLUS            shift and go to state 225
    DASH            shift and go to state 222
    RIGHTSHIFT      shift and go to state 227
    LEFTSHIFT       shift and go to state 216

  ! STAR            [ reduce using rule 114 (expr -> expr GE expr .) ]
  ! SLASH           [ reduce using rule 114 (expr -> expr GE expr .) ]
  ! PLUS            [ reduce using rule 114 (expr -> expr GE expr .) ]
  ! DASH            [ reduce using rule 114 (expr -> expr GE expr .) ]
  ! RIGHTSHIFT      [ reduce using rule 114 (expr -> expr GE expr .) ]
  ! LEFTSHIFT       [ reduce using rule 114 (expr -> expr GE expr .) ]
  ! LT              [ shift and go to state 223 ]
  ! GT              [ shift and go to state 217 ]
  ! LE              [ shift and go to state 224 ]
  ! GE              [ shift and go to state 220 ]
  ! EQ              [ shift and go to state 228 ]
  ! NE              [ shift and go to state 221 ]
  ! AND             [ shift and go to state 215 ]
  ! OR              [ shift and go to state 230 ]


state 272

    (116) expr -> expr NE expr .
    (107) expr -> expr . STAR expr
    (108) expr -> expr . SLASH expr
    (109) expr -> expr . PLUS expr
    (110) expr -> expr . DASH expr
    (111) expr -> expr . LT expr
    (112) expr -> expr . GT expr
    (113) expr -> expr . LE expr
    (114) expr -> expr . GE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . AND expr
    (118) expr -> expr . OR expr
    (119) expr -> expr . RIGHTSHIFT expr
    (120) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 116 (expr -> expr NE expr .)
    EQ              reduce using rule 116 (expr -> expr NE expr .)
    NE              reduce using rule 116 (expr -> expr NE expr .)
    AND             reduce using rule 116 (expr -> expr NE expr .)
    OR              reduce using rule 116 (expr -> expr NE expr .)
    ASSIGN          reduce using rule 116 (expr -> expr NE expr .)
    )               reduce using rule 116 (expr -> expr NE expr .)
    ,               reduce using rule 116 (expr -> expr NE expr .)
    ]               reduce using rule 116 (expr -> expr NE expr .)
    STAR            shift and go to state 218
    SLASH           shift and go to state 226
    PLUS            shift and go to state 225
    DASH            shift and go to state 222
    LT              shift and go to state 223
    GT              shift and go to state 217
    LE              shift and go to state 224
    GE              shift and go to state 220
    RIGHTSHIFT      shift and go to state 227
    LEFTSHIFT       shift and go to state 216

  ! STAR            [ reduce using rule 116 (expr -> expr NE expr .) ]
  ! SLASH           [ reduce using rule 116 (expr -> expr NE expr .) ]
  ! PLUS            [ reduce using rule 116 (expr -> expr NE expr .) ]
  ! DASH            [ reduce using rule 116 (expr -> expr NE expr .) ]
  ! LT              [ reduce using rule 116 (expr -> expr NE expr .) ]
  ! GT              [ reduce using rule 116 (expr -> expr NE expr .) ]
  ! LE              [ reduce using rule 116 (expr -> expr NE expr .) ]
  ! GE              [ reduce using rule 116 (expr -> expr NE expr .) ]
  ! RIGHTSHIFT      [ reduce using rule 116 (expr -> expr NE expr .) ]
  ! LEFTSHIFT       [ reduce using rule 116 (expr -> expr NE expr .) ]
  ! EQ              [ shift and go to state 228 ]
  ! NE              [ shift and go to state 221 ]
  ! AND             [ shift and go to state 215 ]
  ! OR              [ shift and go to state 230 ]


state 273

    (110) expr -> expr DASH expr .
    (107) expr -> expr . STAR expr
    (108) expr -> expr . SLASH expr
    (109) expr -> expr . PLUS expr
    (110) expr -> expr . DASH expr
    (111) expr -> expr . LT expr
    (112) expr -> expr . GT expr
    (113) expr -> expr . LE expr
    (114) expr -> expr . GE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . AND expr
    (118) expr -> expr . OR expr
    (119) expr -> expr . RIGHTSHIFT expr
    (120) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 110 (expr -> expr DASH expr .)
    PLUS            reduce using rule 110 (expr -> expr DASH expr .)
    DASH            reduce using rule 110 (expr -> expr DASH expr .)
    LT              reduce using rule 110 (expr -> expr DASH expr .)
    GT              reduce using rule 110 (expr -> expr DASH expr .)
    LE              reduce using rule 110 (expr -> expr DASH expr .)
    GE              reduce using rule 110 (expr -> expr DASH expr .)
    EQ              reduce using rule 110 (expr -> expr DASH expr .)
    NE              reduce using rule 110 (expr -> expr DASH expr .)
    AND             reduce using rule 110 (expr -> expr DASH expr .)
    OR              reduce using rule 110 (expr -> expr DASH expr .)
    RIGHTSHIFT      reduce using rule 110 (expr -> expr DASH expr .)
    LEFTSHIFT       reduce using rule 110 (expr -> expr DASH expr .)
    ASSIGN          reduce using rule 110 (expr -> expr DASH expr .)
    )               reduce using rule 110 (expr -> expr DASH expr .)
    ,               reduce using rule 110 (expr -> expr DASH expr .)
    ]               reduce using rule 110 (expr -> expr DASH expr .)
    STAR            shift and go to state 218
    SLASH           shift and go to state 226

  ! STAR            [ reduce using rule 110 (expr -> expr DASH expr .) ]
  ! SLASH           [ reduce using rule 110 (expr -> expr DASH expr .) ]
  ! PLUS            [ shift and go to state 225 ]
  ! DASH            [ shift and go to state 222 ]
  ! LT              [ shift and go to state 223 ]
  ! GT              [ shift and go to state 217 ]
  ! LE              [ shift and go to state 224 ]
  ! GE              [ shift and go to state 220 ]
  ! EQ              [ shift and go to state 228 ]
  ! NE              [ shift and go to state 221 ]
  ! AND             [ shift and go to state 215 ]
  ! OR              [ shift and go to state 230 ]
  ! RIGHTSHIFT      [ shift and go to state 227 ]
  ! LEFTSHIFT       [ shift and go to state 216 ]


state 274

    (111) expr -> expr LT expr .
    (107) expr -> expr . STAR expr
    (108) expr -> expr . SLASH expr
    (109) expr -> expr . PLUS expr
    (110) expr -> expr . DASH expr
    (111) expr -> expr . LT expr
    (112) expr -> expr . GT expr
    (113) expr -> expr . LE expr
    (114) expr -> expr . GE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . AND expr
    (118) expr -> expr . OR expr
    (119) expr -> expr . RIGHTSHIFT expr
    (120) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 111 (expr -> expr LT expr .)
    LT              reduce using rule 111 (expr -> expr LT expr .)
    GT              reduce using rule 111 (expr -> expr LT expr .)
    LE              reduce using rule 111 (expr -> expr LT expr .)
    GE              reduce using rule 111 (expr -> expr LT expr .)
    EQ              reduce using rule 111 (expr -> expr LT expr .)
    NE              reduce using rule 111 (expr -> expr LT expr .)
    AND             reduce using rule 111 (expr -> expr LT expr .)
    OR              reduce using rule 111 (expr -> expr LT expr .)
    ASSIGN          reduce using rule 111 (expr -> expr LT expr .)
    )               reduce using rule 111 (expr -> expr LT expr .)
    ,               reduce using rule 111 (expr -> expr LT expr .)
    ]               reduce using rule 111 (expr -> expr LT expr .)
    STAR            shift and go to state 218
    SLASH           shift and go to state 226
    PLUS            shift and go to state 225
    DASH            shift and go to state 222
    RIGHTSHIFT      shift and go to state 227
    LEFTSHIFT       shift and go to state 216

  ! STAR            [ reduce using rule 111 (expr -> expr LT expr .) ]
  ! SLASH           [ reduce using rule 111 (expr -> expr LT expr .) ]
  ! PLUS            [ reduce using rule 111 (expr -> expr LT expr .) ]
  ! DASH            [ reduce using rule 111 (expr -> expr LT expr .) ]
  ! RIGHTSHIFT      [ reduce using rule 111 (expr -> expr LT expr .) ]
  ! LEFTSHIFT       [ reduce using rule 111 (expr -> expr LT expr .) ]
  ! LT              [ shift and go to state 223 ]
  ! GT              [ shift and go to state 217 ]
  ! LE              [ shift and go to state 224 ]
  ! GE              [ shift and go to state 220 ]
  ! EQ              [ shift and go to state 228 ]
  ! NE              [ shift and go to state 221 ]
  ! AND             [ shift and go to state 215 ]
  ! OR              [ shift and go to state 230 ]


state 275

    (113) expr -> expr LE expr .
    (107) expr -> expr . STAR expr
    (108) expr -> expr . SLASH expr
    (109) expr -> expr . PLUS expr
    (110) expr -> expr . DASH expr
    (111) expr -> expr . LT expr
    (112) expr -> expr . GT expr
    (113) expr -> expr . LE expr
    (114) expr -> expr . GE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . AND expr
    (118) expr -> expr . OR expr
    (119) expr -> expr . RIGHTSHIFT expr
    (120) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 113 (expr -> expr LE expr .)
    LT              reduce using rule 113 (expr -> expr LE expr .)
    GT              reduce using rule 113 (expr -> expr LE expr .)
    LE              reduce using rule 113 (expr -> expr LE expr .)
    GE              reduce using rule 113 (expr -> expr LE expr .)
    EQ              reduce using rule 113 (expr -> expr LE expr .)
    NE              reduce using rule 113 (expr -> expr LE expr .)
    AND             reduce using rule 113 (expr -> expr LE expr .)
    OR              reduce using rule 113 (expr -> expr LE expr .)
    ASSIGN          reduce using rule 113 (expr -> expr LE expr .)
    )               reduce using rule 113 (expr -> expr LE expr .)
    ,               reduce using rule 113 (expr -> expr LE expr .)
    ]               reduce using rule 113 (expr -> expr LE expr .)
    STAR            shift and go to state 218
    SLASH           shift and go to state 226
    PLUS            shift and go to state 225
    DASH            shift and go to state 222
    RIGHTSHIFT      shift and go to state 227
    LEFTSHIFT       shift and go to state 216

  ! STAR            [ reduce using rule 113 (expr -> expr LE expr .) ]
  ! SLASH           [ reduce using rule 113 (expr -> expr LE expr .) ]
  ! PLUS            [ reduce using rule 113 (expr -> expr LE expr .) ]
  ! DASH            [ reduce using rule 113 (expr -> expr LE expr .) ]
  ! RIGHTSHIFT      [ reduce using rule 113 (expr -> expr LE expr .) ]
  ! LEFTSHIFT       [ reduce using rule 113 (expr -> expr LE expr .) ]
  ! LT              [ shift and go to state 223 ]
  ! GT              [ shift and go to state 217 ]
  ! LE              [ shift and go to state 224 ]
  ! GE              [ shift and go to state 220 ]
  ! EQ              [ shift and go to state 228 ]
  ! NE              [ shift and go to state 221 ]
  ! AND             [ shift and go to state 215 ]
  ! OR              [ shift and go to state 230 ]


state 276

    (109) expr -> expr PLUS expr .
    (107) expr -> expr . STAR expr
    (108) expr -> expr . SLASH expr
    (109) expr -> expr . PLUS expr
    (110) expr -> expr . DASH expr
    (111) expr -> expr . LT expr
    (112) expr -> expr . GT expr
    (113) expr -> expr . LE expr
    (114) expr -> expr . GE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . AND expr
    (118) expr -> expr . OR expr
    (119) expr -> expr . RIGHTSHIFT expr
    (120) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 109 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 109 (expr -> expr PLUS expr .)
    DASH            reduce using rule 109 (expr -> expr PLUS expr .)
    LT              reduce using rule 109 (expr -> expr PLUS expr .)
    GT              reduce using rule 109 (expr -> expr PLUS expr .)
    LE              reduce using rule 109 (expr -> expr PLUS expr .)
    GE              reduce using rule 109 (expr -> expr PLUS expr .)
    EQ              reduce using rule 109 (expr -> expr PLUS expr .)
    NE              reduce using rule 109 (expr -> expr PLUS expr .)
    AND             reduce using rule 109 (expr -> expr PLUS expr .)
    OR              reduce using rule 109 (expr -> expr PLUS expr .)
    RIGHTSHIFT      reduce using rule 109 (expr -> expr PLUS expr .)
    LEFTSHIFT       reduce using rule 109 (expr -> expr PLUS expr .)
    ASSIGN          reduce using rule 109 (expr -> expr PLUS expr .)
    )               reduce using rule 109 (expr -> expr PLUS expr .)
    ,               reduce using rule 109 (expr -> expr PLUS expr .)
    ]               reduce using rule 109 (expr -> expr PLUS expr .)
    STAR            shift and go to state 218
    SLASH           shift and go to state 226

  ! STAR            [ reduce using rule 109 (expr -> expr PLUS expr .) ]
  ! SLASH           [ reduce using rule 109 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 225 ]
  ! DASH            [ shift and go to state 222 ]
  ! LT              [ shift and go to state 223 ]
  ! GT              [ shift and go to state 217 ]
  ! LE              [ shift and go to state 224 ]
  ! GE              [ shift and go to state 220 ]
  ! EQ              [ shift and go to state 228 ]
  ! NE              [ shift and go to state 221 ]
  ! AND             [ shift and go to state 215 ]
  ! OR              [ shift and go to state 230 ]
  ! RIGHTSHIFT      [ shift and go to state 227 ]
  ! LEFTSHIFT       [ shift and go to state 216 ]


state 277

    (108) expr -> expr SLASH expr .
    (107) expr -> expr . STAR expr
    (108) expr -> expr . SLASH expr
    (109) expr -> expr . PLUS expr
    (110) expr -> expr . DASH expr
    (111) expr -> expr . LT expr
    (112) expr -> expr . GT expr
    (113) expr -> expr . LE expr
    (114) expr -> expr . GE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . AND expr
    (118) expr -> expr . OR expr
    (119) expr -> expr . RIGHTSHIFT expr
    (120) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 108 (expr -> expr SLASH expr .)
    STAR            reduce using rule 108 (expr -> expr SLASH expr .)
    SLASH           reduce using rule 108 (expr -> expr SLASH expr .)
    PLUS            reduce using rule 108 (expr -> expr SLASH expr .)
    DASH            reduce using rule 108 (expr -> expr SLASH expr .)
    LT              reduce using rule 108 (expr -> expr SLASH expr .)
    GT              reduce using rule 108 (expr -> expr SLASH expr .)
    LE              reduce using rule 108 (expr -> expr SLASH expr .)
    GE              reduce using rule 108 (expr -> expr SLASH expr .)
    EQ              reduce using rule 108 (expr -> expr SLASH expr .)
    NE              reduce using rule 108 (expr -> expr SLASH expr .)
    AND             reduce using rule 108 (expr -> expr SLASH expr .)
    OR              reduce using rule 108 (expr -> expr SLASH expr .)
    RIGHTSHIFT      reduce using rule 108 (expr -> expr SLASH expr .)
    LEFTSHIFT       reduce using rule 108 (expr -> expr SLASH expr .)
    ASSIGN          reduce using rule 108 (expr -> expr SLASH expr .)
    )               reduce using rule 108 (expr -> expr SLASH expr .)
    ,               reduce using rule 108 (expr -> expr SLASH expr .)
    ]               reduce using rule 108 (expr -> expr SLASH expr .)

  ! STAR            [ shift and go to state 218 ]
  ! SLASH           [ shift and go to state 226 ]
  ! PLUS            [ shift and go to state 225 ]
  ! DASH            [ shift and go to state 222 ]
  ! LT              [ shift and go to state 223 ]
  ! GT              [ shift and go to state 217 ]
  ! LE              [ shift and go to state 224 ]
  ! GE              [ shift and go to state 220 ]
  ! EQ              [ shift and go to state 228 ]
  ! NE              [ shift and go to state 221 ]
  ! AND             [ shift and go to state 215 ]
  ! OR              [ shift and go to state 230 ]
  ! RIGHTSHIFT      [ shift and go to state 227 ]
  ! LEFTSHIFT       [ shift and go to state 216 ]


state 278

    (119) expr -> expr RIGHTSHIFT expr .
    (107) expr -> expr . STAR expr
    (108) expr -> expr . SLASH expr
    (109) expr -> expr . PLUS expr
    (110) expr -> expr . DASH expr
    (111) expr -> expr . LT expr
    (112) expr -> expr . GT expr
    (113) expr -> expr . LE expr
    (114) expr -> expr . GE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . AND expr
    (118) expr -> expr . OR expr
    (119) expr -> expr . RIGHTSHIFT expr
    (120) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 119 (expr -> expr RIGHTSHIFT expr .)
    LT              reduce using rule 119 (expr -> expr RIGHTSHIFT expr .)
    GT              reduce using rule 119 (expr -> expr RIGHTSHIFT expr .)
    LE              reduce using rule 119 (expr -> expr RIGHTSHIFT expr .)
    GE              reduce using rule 119 (expr -> expr RIGHTSHIFT expr .)
    EQ              reduce using rule 119 (expr -> expr RIGHTSHIFT expr .)
    NE              reduce using rule 119 (expr -> expr RIGHTSHIFT expr .)
    AND             reduce using rule 119 (expr -> expr RIGHTSHIFT expr .)
    OR              reduce using rule 119 (expr -> expr RIGHTSHIFT expr .)
    RIGHTSHIFT      reduce using rule 119 (expr -> expr RIGHTSHIFT expr .)
    LEFTSHIFT       reduce using rule 119 (expr -> expr RIGHTSHIFT expr .)
    ASSIGN          reduce using rule 119 (expr -> expr RIGHTSHIFT expr .)
    )               reduce using rule 119 (expr -> expr RIGHTSHIFT expr .)
    ,               reduce using rule 119 (expr -> expr RIGHTSHIFT expr .)
    ]               reduce using rule 119 (expr -> expr RIGHTSHIFT expr .)
    STAR            shift and go to state 218
    SLASH           shift and go to state 226
    PLUS            shift and go to state 225
    DASH            shift and go to state 222

  ! STAR            [ reduce using rule 119 (expr -> expr RIGHTSHIFT expr .) ]
  ! SLASH           [ reduce using rule 119 (expr -> expr RIGHTSHIFT expr .) ]
  ! PLUS            [ reduce using rule 119 (expr -> expr RIGHTSHIFT expr .) ]
  ! DASH            [ reduce using rule 119 (expr -> expr RIGHTSHIFT expr .) ]
  ! LT              [ shift and go to state 223 ]
  ! GT              [ shift and go to state 217 ]
  ! LE              [ shift and go to state 224 ]
  ! GE              [ shift and go to state 220 ]
  ! EQ              [ shift and go to state 228 ]
  ! NE              [ shift and go to state 221 ]
  ! AND             [ shift and go to state 215 ]
  ! OR              [ shift and go to state 230 ]
  ! RIGHTSHIFT      [ shift and go to state 227 ]
  ! LEFTSHIFT       [ shift and go to state 216 ]


state 279

    (115) expr -> expr EQ expr .
    (107) expr -> expr . STAR expr
    (108) expr -> expr . SLASH expr
    (109) expr -> expr . PLUS expr
    (110) expr -> expr . DASH expr
    (111) expr -> expr . LT expr
    (112) expr -> expr . GT expr
    (113) expr -> expr . LE expr
    (114) expr -> expr . GE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . AND expr
    (118) expr -> expr . OR expr
    (119) expr -> expr . RIGHTSHIFT expr
    (120) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 115 (expr -> expr EQ expr .)
    EQ              reduce using rule 115 (expr -> expr EQ expr .)
    NE              reduce using rule 115 (expr -> expr EQ expr .)
    AND             reduce using rule 115 (expr -> expr EQ expr .)
    OR              reduce using rule 115 (expr -> expr EQ expr .)
    ASSIGN          reduce using rule 115 (expr -> expr EQ expr .)
    )               reduce using rule 115 (expr -> expr EQ expr .)
    ,               reduce using rule 115 (expr -> expr EQ expr .)
    ]               reduce using rule 115 (expr -> expr EQ expr .)
    STAR            shift and go to state 218
    SLASH           shift and go to state 226
    PLUS            shift and go to state 225
    DASH            shift and go to state 222
    LT              shift and go to state 223
    GT              shift and go to state 217
    LE              shift and go to state 224
    GE              shift and go to state 220
    RIGHTSHIFT      shift and go to state 227
    LEFTSHIFT       shift and go to state 216

  ! STAR            [ reduce using rule 115 (expr -> expr EQ expr .) ]
  ! SLASH           [ reduce using rule 115 (expr -> expr EQ expr .) ]
  ! PLUS            [ reduce using rule 115 (expr -> expr EQ expr .) ]
  ! DASH            [ reduce using rule 115 (expr -> expr EQ expr .) ]
  ! LT              [ reduce using rule 115 (expr -> expr EQ expr .) ]
  ! GT              [ reduce using rule 115 (expr -> expr EQ expr .) ]
  ! LE              [ reduce using rule 115 (expr -> expr EQ expr .) ]
  ! GE              [ reduce using rule 115 (expr -> expr EQ expr .) ]
  ! RIGHTSHIFT      [ reduce using rule 115 (expr -> expr EQ expr .) ]
  ! LEFTSHIFT       [ reduce using rule 115 (expr -> expr EQ expr .) ]
  ! EQ              [ shift and go to state 228 ]
  ! NE              [ shift and go to state 221 ]
  ! AND             [ shift and go to state 215 ]
  ! OR              [ shift and go to state 230 ]


state 280

    (81) statement -> expr ASSIGN expr . SEMI
    (107) expr -> expr . STAR expr
    (108) expr -> expr . SLASH expr
    (109) expr -> expr . PLUS expr
    (110) expr -> expr . DASH expr
    (111) expr -> expr . LT expr
    (112) expr -> expr . GT expr
    (113) expr -> expr . LE expr
    (114) expr -> expr . GE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . AND expr
    (118) expr -> expr . OR expr
    (119) expr -> expr . RIGHTSHIFT expr
    (120) expr -> expr . LEFTSHIFT expr

    SEMI            shift and go to state 310
    STAR            shift and go to state 218
    SLASH           shift and go to state 226
    PLUS            shift and go to state 225
    DASH            shift and go to state 222
    LT              shift and go to state 223
    GT              shift and go to state 217
    LE              shift and go to state 224
    GE              shift and go to state 220
    EQ              shift and go to state 228
    NE              shift and go to state 221
    AND             shift and go to state 215
    OR              shift and go to state 230
    RIGHTSHIFT      shift and go to state 227
    LEFTSHIFT       shift and go to state 216


state 281

    (118) expr -> expr OR expr .
    (107) expr -> expr . STAR expr
    (108) expr -> expr . SLASH expr
    (109) expr -> expr . PLUS expr
    (110) expr -> expr . DASH expr
    (111) expr -> expr . LT expr
    (112) expr -> expr . GT expr
    (113) expr -> expr . LE expr
    (114) expr -> expr . GE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . AND expr
    (118) expr -> expr . OR expr
    (119) expr -> expr . RIGHTSHIFT expr
    (120) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 118 (expr -> expr OR expr .)
    AND             reduce using rule 118 (expr -> expr OR expr .)
    OR              reduce using rule 118 (expr -> expr OR expr .)
    ASSIGN          reduce using rule 118 (expr -> expr OR expr .)
    )               reduce using rule 118 (expr -> expr OR expr .)
    ,               reduce using rule 118 (expr -> expr OR expr .)
    ]               reduce using rule 118 (expr -> expr OR expr .)
    STAR            shift and go to state 218
    SLASH           shift and go to state 226
    PLUS            shift and go to state 225
    DASH            shift and go to state 222
    LT              shift and go to state 223
    GT              shift and go to state 217
    LE              shift and go to state 224
    GE              shift and go to state 220
    EQ              shift and go to state 228
    NE              shift and go to state 221
    RIGHTSHIFT      shift and go to state 227
    LEFTSHIFT       shift and go to state 216

  ! STAR            [ reduce using rule 118 (expr -> expr OR expr .) ]
  ! SLASH           [ reduce using rule 118 (expr -> expr OR expr .) ]
  ! PLUS            [ reduce using rule 118 (expr -> expr OR expr .) ]
  ! DASH            [ reduce using rule 118 (expr -> expr OR expr .) ]
  ! LT              [ reduce using rule 118 (expr -> expr OR expr .) ]
  ! GT              [ reduce using rule 118 (expr -> expr OR expr .) ]
  ! LE              [ reduce using rule 118 (expr -> expr OR expr .) ]
  ! GE              [ reduce using rule 118 (expr -> expr OR expr .) ]
  ! EQ              [ reduce using rule 118 (expr -> expr OR expr .) ]
  ! NE              [ reduce using rule 118 (expr -> expr OR expr .) ]
  ! RIGHTSHIFT      [ reduce using rule 118 (expr -> expr OR expr .) ]
  ! LEFTSHIFT       [ reduce using rule 118 (expr -> expr OR expr .) ]
  ! AND             [ shift and go to state 215 ]
  ! OR              [ shift and go to state 230 ]


state 282

    (124) aexpr -> IS_VALID ( var . )

    )               shift and go to state 311


state 283

    (87) statement -> CHECK_STOP_SLOTS ( var . , STRING , STRING ) SEMI

    ,               shift and go to state 312


state 284

    (36) type_enum -> ident pairs SEMI .

    IDENT           reduce using rule 36 (type_enum -> ident pairs SEMI .)
    }               reduce using rule 36 (type_enum -> ident pairs SEMI .)


state 285

    (8) decl -> MACHINE ( ident pairs ) : params { decls . }

    }               shift and go to state 313


state 286

    (130) enumeration -> ident . : ident

    :               shift and go to state 214


state 287

    (39) type_state -> ident , enumeration . pairs SEMI
    (65) pairs -> . , pairsx
    (66) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 50
    SEMI            reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 314
    empty                          shift and go to state 51

state 288

    (10) decl -> IN_PORT ( ident , type , var pairs ) . statements
    (73) statements -> . { statements_inner }
    (74) statements -> . { }

    {               shift and go to state 113

    statements                     shift and go to state 315

state 289

    (32) type_member -> type_or_void ident pairs SEMI .

    VOID            reduce using rule 32 (type_member -> type_or_void ident pairs SEMI .)
    IDENT           reduce using rule 32 (type_member -> type_or_void ident pairs SEMI .)
    }               reduce using rule 32 (type_member -> type_or_void ident pairs SEMI .)


state 290

    (31) type_member -> type_or_void ident ( params . ) pairs statements

    )               shift and go to state 316


state 291

    (42) types -> empty .
    (51) params -> empty .

  ! reduce/reduce conflict for ) resolved using rule 42 (types -> empty .)
    )               reduce using rule 42 (types -> empty .)

  ! )               [ reduce using rule 51 (params -> empty .) ]


state 292

    (40) types -> type . , types
    (41) types -> type .
    (52) param -> type . ident
    (53) param -> type . STAR ident
    (54) param -> type . STAR ident = STRING
    (55) param -> type . ident = NUMBER
    (56) param -> type . ident = LIT_BOOL
    (57) param -> type . ident = STRING
    (64) ident -> . IDENT

    ,               shift and go to state 317
    )               reduce using rule 41 (types -> type .)
    STAR            shift and go to state 96
    IDENT           shift and go to state 4

    ident                          shift and go to state 95

state 293

    (30) type_member -> type_or_void ident ( types . ) pairs SEMI

    )               shift and go to state 318


state 294

    (33) type_member -> type_or_void ident ASSIGN expr . SEMI
    (107) expr -> expr . STAR expr
    (108) expr -> expr . SLASH expr
    (109) expr -> expr . PLUS expr
    (110) expr -> expr . DASH expr
    (111) expr -> expr . LT expr
    (112) expr -> expr . GT expr
    (113) expr -> expr . LE expr
    (114) expr -> expr . GE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . AND expr
    (118) expr -> expr . OR expr
    (119) expr -> expr . RIGHTSHIFT expr
    (120) expr -> expr . LEFTSHIFT expr

    SEMI            shift and go to state 319
    STAR            shift and go to state 218
    SLASH           shift and go to state 226
    PLUS            shift and go to state 225
    DASH            shift and go to state 222
    LT              shift and go to state 223
    GT              shift and go to state 217
    LE              shift and go to state 224
    GE              shift and go to state 220
    EQ              shift and go to state 228
    NE              shift and go to state 221
    AND             shift and go to state 215
    OR              shift and go to state 230
    RIGHTSHIFT      shift and go to state 227
    LEFTSHIFT       shift and go to state 216


state 295

    (12) decl -> TRANS ( idents , idents , ident pairs ) idents .
    (14) decl -> TRANS ( idents , idents , ident pairs ) idents . idents
    (58) idents -> . { identx }
    (59) idents -> . ident
    (64) ident -> . IDENT

  ! shift/reduce conflict for IDENT resolved as shift
    PROTOCOL        reduce using rule 12 (decl -> TRANS ( idents , idents , ident pairs ) idents .)
    INCLUDE         reduce using rule 12 (decl -> TRANS ( idents , idents , ident pairs ) idents .)
    MACHINE         reduce using rule 12 (decl -> TRANS ( idents , idents , ident pairs ) idents .)
    ACTION          reduce using rule 12 (decl -> TRANS ( idents , idents , ident pairs ) idents .)
    IN_PORT         reduce using rule 12 (decl -> TRANS ( idents , idents , ident pairs ) idents .)
    OUT_PORT        reduce using rule 12 (decl -> TRANS ( idents , idents , ident pairs ) idents .)
    TRANS           reduce using rule 12 (decl -> TRANS ( idents , idents , ident pairs ) idents .)
    EXTERN_TYPE     reduce using rule 12 (decl -> TRANS ( idents , idents , ident pairs ) idents .)
    GLOBAL          reduce using rule 12 (decl -> TRANS ( idents , idents , ident pairs ) idents .)
    STRUCT          reduce using rule 12 (decl -> TRANS ( idents , idents , ident pairs ) idents .)
    ENUM            reduce using rule 12 (decl -> TRANS ( idents , idents , ident pairs ) idents .)
    STATE_DECL      reduce using rule 12 (decl -> TRANS ( idents , idents , ident pairs ) idents .)
    VOID            reduce using rule 12 (decl -> TRANS ( idents , idents , ident pairs ) idents .)
    }               reduce using rule 12 (decl -> TRANS ( idents , idents , ident pairs ) idents .)
    $end            reduce using rule 12 (decl -> TRANS ( idents , idents , ident pairs ) idents .)
    {               shift and go to state 45
    IDENT           shift and go to state 4

  ! IDENT           [ reduce using rule 12 (decl -> TRANS ( idents , idents , ident pairs ) idents .) ]

    ident                          shift and go to state 43
    idents                         shift and go to state 320

state 296

    (11) decl -> OUT_PORT ( ident , type , var pairs ) SEMI .

    PROTOCOL        reduce using rule 11 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    INCLUDE         reduce using rule 11 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    MACHINE         reduce using rule 11 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    ACTION          reduce using rule 11 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    IN_PORT         reduce using rule 11 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    OUT_PORT        reduce using rule 11 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    TRANS           reduce using rule 11 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    EXTERN_TYPE     reduce using rule 11 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    GLOBAL          reduce using rule 11 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    STRUCT          reduce using rule 11 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    ENUM            reduce using rule 11 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    STATE_DECL      reduce using rule 11 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    VOID            reduce using rule 11 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    IDENT           reduce using rule 11 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    }               reduce using rule 11 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    $end            reduce using rule 11 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)


state 297

    (84) statement -> PEEK ( var , . type pairs ) statements
    (45) type -> . typestr
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident
    (64) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 21
    typestr                        shift and go to state 19
    type                           shift and go to state 321

state 298

    (77) exprs -> expr , . exprs
    (77) exprs -> . expr , exprs
    (78) exprs -> . expr
    (79) exprs -> . empty
    (106) expr -> . aexpr
    (107) expr -> . expr STAR expr
    (108) expr -> . expr SLASH expr
    (109) expr -> . expr PLUS expr
    (110) expr -> . expr DASH expr
    (111) expr -> . expr LT expr
    (112) expr -> . expr GT expr
    (113) expr -> . expr LE expr
    (114) expr -> . expr GE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr AND expr
    (118) expr -> . expr OR expr
    (119) expr -> . expr RIGHTSHIFT expr
    (120) expr -> . expr LEFTSHIFT expr
    (121) expr -> . NOT expr
    (122) expr -> . DASH expr
    (2) empty -> .
    (88) aexpr -> . STATIC_CAST ( type , expr )
    (89) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (95) aexpr -> . var
    (96) aexpr -> . type ident
    (97) aexpr -> . literal
    (98) aexpr -> . enumeration
    (99) aexpr -> . ident ( exprs )
    (100) aexpr -> . NEW type
    (101) aexpr -> . OOD
    (102) aexpr -> . aexpr DOT ident
    (103) aexpr -> . aexpr DOT ident ( exprs )
    (104) aexpr -> . aexpr [ exprs ]
    (105) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (123) aexpr -> . ( expr )
    (124) aexpr -> . IS_VALID ( var )
    (125) aexpr -> . IS_INVALID ( var )
    (131) var -> . ident
    (45) type -> . typestr
    (126) literal -> . STRING
    (127) literal -> . NUMBER
    (128) literal -> . FLOATNUMBER
    (129) literal -> . LIT_BOOL
    (130) enumeration -> . ident : ident
    (64) ident -> . IDENT
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 160
    ]               reduce using rule 2 (empty -> .)
    )               reduce using rule 2 (empty -> .)
    STATIC_CAST     shift and go to state 146
    NEW             shift and go to state 144
    OOD             shift and go to state 162
    (               shift and go to state 148
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 149
    STRING          shift and go to state 157
    NUMBER          shift and go to state 142
    FLOATNUMBER     shift and go to state 141
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 163
    expr                           shift and go to state 253
    enumeration                    shift and go to state 150
    exprs                          shift and go to state 322
    literal                        shift and go to state 159
    var                            shift and go to state 154
    typestr                        shift and go to state 19
    type                           shift and go to state 156
    aexpr                          shift and go to state 145
    empty                          shift and go to state 252

state 299

    (104) aexpr -> aexpr [ exprs ] .

    DOT             reduce using rule 104 (aexpr -> aexpr [ exprs ] .)
    [               reduce using rule 104 (aexpr -> aexpr [ exprs ] .)
    )               reduce using rule 104 (aexpr -> aexpr [ exprs ] .)
    STAR            reduce using rule 104 (aexpr -> aexpr [ exprs ] .)
    SLASH           reduce using rule 104 (aexpr -> aexpr [ exprs ] .)
    PLUS            reduce using rule 104 (aexpr -> aexpr [ exprs ] .)
    DASH            reduce using rule 104 (aexpr -> aexpr [ exprs ] .)
    LT              reduce using rule 104 (aexpr -> aexpr [ exprs ] .)
    GT              reduce using rule 104 (aexpr -> aexpr [ exprs ] .)
    LE              reduce using rule 104 (aexpr -> aexpr [ exprs ] .)
    GE              reduce using rule 104 (aexpr -> aexpr [ exprs ] .)
    EQ              reduce using rule 104 (aexpr -> aexpr [ exprs ] .)
    NE              reduce using rule 104 (aexpr -> aexpr [ exprs ] .)
    AND             reduce using rule 104 (aexpr -> aexpr [ exprs ] .)
    OR              reduce using rule 104 (aexpr -> aexpr [ exprs ] .)
    RIGHTSHIFT      reduce using rule 104 (aexpr -> aexpr [ exprs ] .)
    LEFTSHIFT       reduce using rule 104 (aexpr -> aexpr [ exprs ] .)
    SEMI            reduce using rule 104 (aexpr -> aexpr [ exprs ] .)
    ASSIGN          reduce using rule 104 (aexpr -> aexpr [ exprs ] .)
    ,               reduce using rule 104 (aexpr -> aexpr [ exprs ] .)
    ]               reduce using rule 104 (aexpr -> aexpr [ exprs ] .)


state 300

    (103) aexpr -> aexpr DOT ident ( . exprs )
    (77) exprs -> . expr , exprs
    (78) exprs -> . expr
    (79) exprs -> . empty
    (106) expr -> . aexpr
    (107) expr -> . expr STAR expr
    (108) expr -> . expr SLASH expr
    (109) expr -> . expr PLUS expr
    (110) expr -> . expr DASH expr
    (111) expr -> . expr LT expr
    (112) expr -> . expr GT expr
    (113) expr -> . expr LE expr
    (114) expr -> . expr GE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr AND expr
    (118) expr -> . expr OR expr
    (119) expr -> . expr RIGHTSHIFT expr
    (120) expr -> . expr LEFTSHIFT expr
    (121) expr -> . NOT expr
    (122) expr -> . DASH expr
    (2) empty -> .
    (88) aexpr -> . STATIC_CAST ( type , expr )
    (89) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (95) aexpr -> . var
    (96) aexpr -> . type ident
    (97) aexpr -> . literal
    (98) aexpr -> . enumeration
    (99) aexpr -> . ident ( exprs )
    (100) aexpr -> . NEW type
    (101) aexpr -> . OOD
    (102) aexpr -> . aexpr DOT ident
    (103) aexpr -> . aexpr DOT ident ( exprs )
    (104) aexpr -> . aexpr [ exprs ]
    (105) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (123) aexpr -> . ( expr )
    (124) aexpr -> . IS_VALID ( var )
    (125) aexpr -> . IS_INVALID ( var )
    (131) var -> . ident
    (45) type -> . typestr
    (126) literal -> . STRING
    (127) literal -> . NUMBER
    (128) literal -> . FLOATNUMBER
    (129) literal -> . LIT_BOOL
    (130) enumeration -> . ident : ident
    (64) ident -> . IDENT
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 160
    )               reduce using rule 2 (empty -> .)
    STATIC_CAST     shift and go to state 146
    NEW             shift and go to state 144
    OOD             shift and go to state 162
    (               shift and go to state 148
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 149
    STRING          shift and go to state 157
    NUMBER          shift and go to state 142
    FLOATNUMBER     shift and go to state 141
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 163
    expr                           shift and go to state 253
    enumeration                    shift and go to state 150
    exprs                          shift and go to state 323
    literal                        shift and go to state 159
    var                            shift and go to state 154
    typestr                        shift and go to state 19
    type                           shift and go to state 156
    aexpr                          shift and go to state 145
    empty                          shift and go to state 252

state 301

    (88) aexpr -> STATIC_CAST ( type , . expr )
    (89) aexpr -> STATIC_CAST ( type , . STRING , expr )
    (106) expr -> . aexpr
    (107) expr -> . expr STAR expr
    (108) expr -> . expr SLASH expr
    (109) expr -> . expr PLUS expr
    (110) expr -> . expr DASH expr
    (111) expr -> . expr LT expr
    (112) expr -> . expr GT expr
    (113) expr -> . expr LE expr
    (114) expr -> . expr GE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr AND expr
    (118) expr -> . expr OR expr
    (119) expr -> . expr RIGHTSHIFT expr
    (120) expr -> . expr LEFTSHIFT expr
    (121) expr -> . NOT expr
    (122) expr -> . DASH expr
    (88) aexpr -> . STATIC_CAST ( type , expr )
    (89) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (95) aexpr -> . var
    (96) aexpr -> . type ident
    (97) aexpr -> . literal
    (98) aexpr -> . enumeration
    (99) aexpr -> . ident ( exprs )
    (100) aexpr -> . NEW type
    (101) aexpr -> . OOD
    (102) aexpr -> . aexpr DOT ident
    (103) aexpr -> . aexpr DOT ident ( exprs )
    (104) aexpr -> . aexpr [ exprs ]
    (105) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (123) aexpr -> . ( expr )
    (124) aexpr -> . IS_VALID ( var )
    (125) aexpr -> . IS_INVALID ( var )
    (131) var -> . ident
    (45) type -> . typestr
    (126) literal -> . STRING
    (127) literal -> . NUMBER
    (128) literal -> . FLOATNUMBER
    (129) literal -> . LIT_BOOL
    (130) enumeration -> . ident : ident
    (64) ident -> . IDENT
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident

    STRING          shift and go to state 324
    NOT             shift and go to state 168
    DASH            shift and go to state 160
    STATIC_CAST     shift and go to state 146
    NEW             shift and go to state 144
    OOD             shift and go to state 162
    (               shift and go to state 148
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 149
    NUMBER          shift and go to state 142
    FLOATNUMBER     shift and go to state 141
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 163
    expr                           shift and go to state 325
    enumeration                    shift and go to state 150
    literal                        shift and go to state 159
    var                            shift and go to state 154
    typestr                        shift and go to state 19
    type                           shift and go to state 156
    aexpr                          shift and go to state 145

state 302

    (86) statement -> CHECK_ALLOCATE ( var ) . SEMI

    SEMI            shift and go to state 326


state 303

    (125) aexpr -> IS_INVALID ( var ) .

    DOT             reduce using rule 125 (aexpr -> IS_INVALID ( var ) .)
    [               reduce using rule 125 (aexpr -> IS_INVALID ( var ) .)
    )               reduce using rule 125 (aexpr -> IS_INVALID ( var ) .)
    STAR            reduce using rule 125 (aexpr -> IS_INVALID ( var ) .)
    SLASH           reduce using rule 125 (aexpr -> IS_INVALID ( var ) .)
    PLUS            reduce using rule 125 (aexpr -> IS_INVALID ( var ) .)
    DASH            reduce using rule 125 (aexpr -> IS_INVALID ( var ) .)
    LT              reduce using rule 125 (aexpr -> IS_INVALID ( var ) .)
    GT              reduce using rule 125 (aexpr -> IS_INVALID ( var ) .)
    LE              reduce using rule 125 (aexpr -> IS_INVALID ( var ) .)
    GE              reduce using rule 125 (aexpr -> IS_INVALID ( var ) .)
    EQ              reduce using rule 125 (aexpr -> IS_INVALID ( var ) .)
    NE              reduce using rule 125 (aexpr -> IS_INVALID ( var ) .)
    AND             reduce using rule 125 (aexpr -> IS_INVALID ( var ) .)
    OR              reduce using rule 125 (aexpr -> IS_INVALID ( var ) .)
    RIGHTSHIFT      reduce using rule 125 (aexpr -> IS_INVALID ( var ) .)
    LEFTSHIFT       reduce using rule 125 (aexpr -> IS_INVALID ( var ) .)
    SEMI            reduce using rule 125 (aexpr -> IS_INVALID ( var ) .)
    ASSIGN          reduce using rule 125 (aexpr -> IS_INVALID ( var ) .)
    ,               reduce using rule 125 (aexpr -> IS_INVALID ( var ) .)
    ]               reduce using rule 125 (aexpr -> IS_INVALID ( var ) .)


state 304

    (82) statement -> ENQUEUE ( var , . type pairs ) statements
    (45) type -> . typestr
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident
    (64) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 21
    typestr                        shift and go to state 19
    type                           shift and go to state 327

state 305

    (85) statement -> COPY_HEAD ( var , . var pairs ) SEMI
    (131) var -> . ident
    (64) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 328
    ident                          shift and go to state 137

state 306

    (105) aexpr -> type DOUBLE_COLON ident ( . exprs )
    (77) exprs -> . expr , exprs
    (78) exprs -> . expr
    (79) exprs -> . empty
    (106) expr -> . aexpr
    (107) expr -> . expr STAR expr
    (108) expr -> . expr SLASH expr
    (109) expr -> . expr PLUS expr
    (110) expr -> . expr DASH expr
    (111) expr -> . expr LT expr
    (112) expr -> . expr GT expr
    (113) expr -> . expr LE expr
    (114) expr -> . expr GE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr AND expr
    (118) expr -> . expr OR expr
    (119) expr -> . expr RIGHTSHIFT expr
    (120) expr -> . expr LEFTSHIFT expr
    (121) expr -> . NOT expr
    (122) expr -> . DASH expr
    (2) empty -> .
    (88) aexpr -> . STATIC_CAST ( type , expr )
    (89) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (95) aexpr -> . var
    (96) aexpr -> . type ident
    (97) aexpr -> . literal
    (98) aexpr -> . enumeration
    (99) aexpr -> . ident ( exprs )
    (100) aexpr -> . NEW type
    (101) aexpr -> . OOD
    (102) aexpr -> . aexpr DOT ident
    (103) aexpr -> . aexpr DOT ident ( exprs )
    (104) aexpr -> . aexpr [ exprs ]
    (105) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (123) aexpr -> . ( expr )
    (124) aexpr -> . IS_VALID ( var )
    (125) aexpr -> . IS_INVALID ( var )
    (131) var -> . ident
    (45) type -> . typestr
    (126) literal -> . STRING
    (127) literal -> . NUMBER
    (128) literal -> . FLOATNUMBER
    (129) literal -> . LIT_BOOL
    (130) enumeration -> . ident : ident
    (64) ident -> . IDENT
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 160
    )               reduce using rule 2 (empty -> .)
    STATIC_CAST     shift and go to state 146
    NEW             shift and go to state 144
    OOD             shift and go to state 162
    (               shift and go to state 148
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 149
    STRING          shift and go to state 157
    NUMBER          shift and go to state 142
    FLOATNUMBER     shift and go to state 141
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 163
    expr                           shift and go to state 253
    enumeration                    shift and go to state 150
    exprs                          shift and go to state 329
    literal                        shift and go to state 159
    var                            shift and go to state 154
    typestr                        shift and go to state 19
    type                           shift and go to state 156
    aexpr                          shift and go to state 145
    empty                          shift and go to state 252

state 307

    (83) statement -> STALL_AND_WAIT ( var , . var ) SEMI
    (131) var -> . ident
    (64) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 330
    ident                          shift and go to state 137

state 308

    (92) if_statement -> IF ( expr ) . statements
    (93) if_statement -> IF ( expr ) . statements ELSE statements
    (94) if_statement -> IF ( expr ) . statements ELSE if_statement
    (73) statements -> . { statements_inner }
    (74) statements -> . { }

    {               shift and go to state 113

    statements                     shift and go to state 331

state 309

    (99) aexpr -> ident ( exprs ) .

    DOT             reduce using rule 99 (aexpr -> ident ( exprs ) .)
    [               reduce using rule 99 (aexpr -> ident ( exprs ) .)
    )               reduce using rule 99 (aexpr -> ident ( exprs ) .)
    STAR            reduce using rule 99 (aexpr -> ident ( exprs ) .)
    SLASH           reduce using rule 99 (aexpr -> ident ( exprs ) .)
    PLUS            reduce using rule 99 (aexpr -> ident ( exprs ) .)
    DASH            reduce using rule 99 (aexpr -> ident ( exprs ) .)
    LT              reduce using rule 99 (aexpr -> ident ( exprs ) .)
    GT              reduce using rule 99 (aexpr -> ident ( exprs ) .)
    LE              reduce using rule 99 (aexpr -> ident ( exprs ) .)
    GE              reduce using rule 99 (aexpr -> ident ( exprs ) .)
    EQ              reduce using rule 99 (aexpr -> ident ( exprs ) .)
    NE              reduce using rule 99 (aexpr -> ident ( exprs ) .)
    AND             reduce using rule 99 (aexpr -> ident ( exprs ) .)
    OR              reduce using rule 99 (aexpr -> ident ( exprs ) .)
    RIGHTSHIFT      reduce using rule 99 (aexpr -> ident ( exprs ) .)
    LEFTSHIFT       reduce using rule 99 (aexpr -> ident ( exprs ) .)
    SEMI            reduce using rule 99 (aexpr -> ident ( exprs ) .)
    ASSIGN          reduce using rule 99 (aexpr -> ident ( exprs ) .)
    ,               reduce using rule 99 (aexpr -> ident ( exprs ) .)
    ]               reduce using rule 99 (aexpr -> ident ( exprs ) .)


state 310

    (81) statement -> expr ASSIGN expr SEMI .

    ENQUEUE         reduce using rule 81 (statement -> expr ASSIGN expr SEMI .)
    STALL_AND_WAIT  reduce using rule 81 (statement -> expr ASSIGN expr SEMI .)
    PEEK            reduce using rule 81 (statement -> expr ASSIGN expr SEMI .)
    COPY_HEAD       reduce using rule 81 (statement -> expr ASSIGN expr SEMI .)
    CHECK_ALLOCATE  reduce using rule 81 (statement -> expr ASSIGN expr SEMI .)
    CHECK_STOP_SLOTS reduce using rule 81 (statement -> expr ASSIGN expr SEMI .)
    RETURN          reduce using rule 81 (statement -> expr ASSIGN expr SEMI .)
    NOT             reduce using rule 81 (statement -> expr ASSIGN expr SEMI .)
    DASH            reduce using rule 81 (statement -> expr ASSIGN expr SEMI .)
    IF              reduce using rule 81 (statement -> expr ASSIGN expr SEMI .)
    STATIC_CAST     reduce using rule 81 (statement -> expr ASSIGN expr SEMI .)
    NEW             reduce using rule 81 (statement -> expr ASSIGN expr SEMI .)
    OOD             reduce using rule 81 (statement -> expr ASSIGN expr SEMI .)
    (               reduce using rule 81 (statement -> expr ASSIGN expr SEMI .)
    IS_VALID        reduce using rule 81 (statement -> expr ASSIGN expr SEMI .)
    IS_INVALID      reduce using rule 81 (statement -> expr ASSIGN expr SEMI .)
    STRING          reduce using rule 81 (statement -> expr ASSIGN expr SEMI .)
    NUMBER          reduce using rule 81 (statement -> expr ASSIGN expr SEMI .)
    FLOATNUMBER     reduce using rule 81 (statement -> expr ASSIGN expr SEMI .)
    LIT_BOOL        reduce using rule 81 (statement -> expr ASSIGN expr SEMI .)
    IDENT           reduce using rule 81 (statement -> expr ASSIGN expr SEMI .)
    }               reduce using rule 81 (statement -> expr ASSIGN expr SEMI .)


state 311

    (124) aexpr -> IS_VALID ( var ) .

    DOT             reduce using rule 124 (aexpr -> IS_VALID ( var ) .)
    [               reduce using rule 124 (aexpr -> IS_VALID ( var ) .)
    )               reduce using rule 124 (aexpr -> IS_VALID ( var ) .)
    STAR            reduce using rule 124 (aexpr -> IS_VALID ( var ) .)
    SLASH           reduce using rule 124 (aexpr -> IS_VALID ( var ) .)
    PLUS            reduce using rule 124 (aexpr -> IS_VALID ( var ) .)
    DASH            reduce using rule 124 (aexpr -> IS_VALID ( var ) .)
    LT              reduce using rule 124 (aexpr -> IS_VALID ( var ) .)
    GT              reduce using rule 124 (aexpr -> IS_VALID ( var ) .)
    LE              reduce using rule 124 (aexpr -> IS_VALID ( var ) .)
    GE              reduce using rule 124 (aexpr -> IS_VALID ( var ) .)
    EQ              reduce using rule 124 (aexpr -> IS_VALID ( var ) .)
    NE              reduce using rule 124 (aexpr -> IS_VALID ( var ) .)
    AND             reduce using rule 124 (aexpr -> IS_VALID ( var ) .)
    OR              reduce using rule 124 (aexpr -> IS_VALID ( var ) .)
    RIGHTSHIFT      reduce using rule 124 (aexpr -> IS_VALID ( var ) .)
    LEFTSHIFT       reduce using rule 124 (aexpr -> IS_VALID ( var ) .)
    SEMI            reduce using rule 124 (aexpr -> IS_VALID ( var ) .)
    ASSIGN          reduce using rule 124 (aexpr -> IS_VALID ( var ) .)
    ,               reduce using rule 124 (aexpr -> IS_VALID ( var ) .)
    ]               reduce using rule 124 (aexpr -> IS_VALID ( var ) .)


state 312

    (87) statement -> CHECK_STOP_SLOTS ( var , . STRING , STRING ) SEMI

    STRING          shift and go to state 332


state 313

    (8) decl -> MACHINE ( ident pairs ) : params { decls } .

    PROTOCOL        reduce using rule 8 (decl -> MACHINE ( ident pairs ) : params { decls } .)
    INCLUDE         reduce using rule 8 (decl -> MACHINE ( ident pairs ) : params { decls } .)
    MACHINE         reduce using rule 8 (decl -> MACHINE ( ident pairs ) : params { decls } .)
    ACTION          reduce using rule 8 (decl -> MACHINE ( ident pairs ) : params { decls } .)
    IN_PORT         reduce using rule 8 (decl -> MACHINE ( ident pairs ) : params { decls } .)
    OUT_PORT        reduce using rule 8 (decl -> MACHINE ( ident pairs ) : params { decls } .)
    TRANS           reduce using rule 8 (decl -> MACHINE ( ident pairs ) : params { decls } .)
    EXTERN_TYPE     reduce using rule 8 (decl -> MACHINE ( ident pairs ) : params { decls } .)
    GLOBAL          reduce using rule 8 (decl -> MACHINE ( ident pairs ) : params { decls } .)
    STRUCT          reduce using rule 8 (decl -> MACHINE ( ident pairs ) : params { decls } .)
    ENUM            reduce using rule 8 (decl -> MACHINE ( ident pairs ) : params { decls } .)
    STATE_DECL      reduce using rule 8 (decl -> MACHINE ( ident pairs ) : params { decls } .)
    VOID            reduce using rule 8 (decl -> MACHINE ( ident pairs ) : params { decls } .)
    IDENT           reduce using rule 8 (decl -> MACHINE ( ident pairs ) : params { decls } .)
    }               reduce using rule 8 (decl -> MACHINE ( ident pairs ) : params { decls } .)
    $end            reduce using rule 8 (decl -> MACHINE ( ident pairs ) : params { decls } .)


state 314

    (39) type_state -> ident , enumeration pairs . SEMI

    SEMI            shift and go to state 333


state 315

    (10) decl -> IN_PORT ( ident , type , var pairs ) statements .

    PROTOCOL        reduce using rule 10 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    INCLUDE         reduce using rule 10 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    MACHINE         reduce using rule 10 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    ACTION          reduce using rule 10 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    IN_PORT         reduce using rule 10 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    OUT_PORT        reduce using rule 10 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    TRANS           reduce using rule 10 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    EXTERN_TYPE     reduce using rule 10 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    GLOBAL          reduce using rule 10 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    STRUCT          reduce using rule 10 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    ENUM            reduce using rule 10 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    STATE_DECL      reduce using rule 10 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    VOID            reduce using rule 10 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    IDENT           reduce using rule 10 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    }               reduce using rule 10 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    $end            reduce using rule 10 (decl -> IN_PORT ( ident , type , var pairs ) statements .)


state 316

    (31) type_member -> type_or_void ident ( params ) . pairs statements
    (65) pairs -> . , pairsx
    (66) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 50
    {               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 334
    empty                          shift and go to state 51

state 317

    (40) types -> type , . types
    (40) types -> . type , types
    (41) types -> . type
    (42) types -> . empty
    (45) type -> . typestr
    (2) empty -> .
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident
    (64) ident -> . IDENT

    )               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 4

    typestr                        shift and go to state 19
    ident                          shift and go to state 21
    type                           shift and go to state 336
    empty                          shift and go to state 337
    types                          shift and go to state 335

state 318

    (30) type_member -> type_or_void ident ( types ) . pairs SEMI
    (65) pairs -> . , pairsx
    (66) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 50
    SEMI            reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 338
    empty                          shift and go to state 51

state 319

    (33) type_member -> type_or_void ident ASSIGN expr SEMI .

    VOID            reduce using rule 33 (type_member -> type_or_void ident ASSIGN expr SEMI .)
    IDENT           reduce using rule 33 (type_member -> type_or_void ident ASSIGN expr SEMI .)
    }               reduce using rule 33 (type_member -> type_or_void ident ASSIGN expr SEMI .)


state 320

    (14) decl -> TRANS ( idents , idents , ident pairs ) idents idents .

    PROTOCOL        reduce using rule 14 (decl -> TRANS ( idents , idents , ident pairs ) idents idents .)
    INCLUDE         reduce using rule 14 (decl -> TRANS ( idents , idents , ident pairs ) idents idents .)
    MACHINE         reduce using rule 14 (decl -> TRANS ( idents , idents , ident pairs ) idents idents .)
    ACTION          reduce using rule 14 (decl -> TRANS ( idents , idents , ident pairs ) idents idents .)
    IN_PORT         reduce using rule 14 (decl -> TRANS ( idents , idents , ident pairs ) idents idents .)
    OUT_PORT        reduce using rule 14 (decl -> TRANS ( idents , idents , ident pairs ) idents idents .)
    TRANS           reduce using rule 14 (decl -> TRANS ( idents , idents , ident pairs ) idents idents .)
    EXTERN_TYPE     reduce using rule 14 (decl -> TRANS ( idents , idents , ident pairs ) idents idents .)
    GLOBAL          reduce using rule 14 (decl -> TRANS ( idents , idents , ident pairs ) idents idents .)
    STRUCT          reduce using rule 14 (decl -> TRANS ( idents , idents , ident pairs ) idents idents .)
    ENUM            reduce using rule 14 (decl -> TRANS ( idents , idents , ident pairs ) idents idents .)
    STATE_DECL      reduce using rule 14 (decl -> TRANS ( idents , idents , ident pairs ) idents idents .)
    VOID            reduce using rule 14 (decl -> TRANS ( idents , idents , ident pairs ) idents idents .)
    IDENT           reduce using rule 14 (decl -> TRANS ( idents , idents , ident pairs ) idents idents .)
    }               reduce using rule 14 (decl -> TRANS ( idents , idents , ident pairs ) idents idents .)
    $end            reduce using rule 14 (decl -> TRANS ( idents , idents , ident pairs ) idents idents .)


state 321

    (84) statement -> PEEK ( var , type . pairs ) statements
    (65) pairs -> . , pairsx
    (66) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 50
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 339
    empty                          shift and go to state 51

state 322

    (77) exprs -> expr , exprs .

    ]               reduce using rule 77 (exprs -> expr , exprs .)
    )               reduce using rule 77 (exprs -> expr , exprs .)


state 323

    (103) aexpr -> aexpr DOT ident ( exprs . )

    )               shift and go to state 340


state 324

    (89) aexpr -> STATIC_CAST ( type , STRING . , expr )
    (126) literal -> STRING .

    ,               shift and go to state 341
    DOT             reduce using rule 126 (literal -> STRING .)
    [               reduce using rule 126 (literal -> STRING .)
    )               reduce using rule 126 (literal -> STRING .)
    STAR            reduce using rule 126 (literal -> STRING .)
    SLASH           reduce using rule 126 (literal -> STRING .)
    PLUS            reduce using rule 126 (literal -> STRING .)
    DASH            reduce using rule 126 (literal -> STRING .)
    LT              reduce using rule 126 (literal -> STRING .)
    GT              reduce using rule 126 (literal -> STRING .)
    LE              reduce using rule 126 (literal -> STRING .)
    GE              reduce using rule 126 (literal -> STRING .)
    EQ              reduce using rule 126 (literal -> STRING .)
    NE              reduce using rule 126 (literal -> STRING .)
    AND             reduce using rule 126 (literal -> STRING .)
    OR              reduce using rule 126 (literal -> STRING .)
    RIGHTSHIFT      reduce using rule 126 (literal -> STRING .)
    LEFTSHIFT       reduce using rule 126 (literal -> STRING .)


state 325

    (88) aexpr -> STATIC_CAST ( type , expr . )
    (107) expr -> expr . STAR expr
    (108) expr -> expr . SLASH expr
    (109) expr -> expr . PLUS expr
    (110) expr -> expr . DASH expr
    (111) expr -> expr . LT expr
    (112) expr -> expr . GT expr
    (113) expr -> expr . LE expr
    (114) expr -> expr . GE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . AND expr
    (118) expr -> expr . OR expr
    (119) expr -> expr . RIGHTSHIFT expr
    (120) expr -> expr . LEFTSHIFT expr

    )               shift and go to state 342
    STAR            shift and go to state 218
    SLASH           shift and go to state 226
    PLUS            shift and go to state 225
    DASH            shift and go to state 222
    LT              shift and go to state 223
    GT              shift and go to state 217
    LE              shift and go to state 224
    GE              shift and go to state 220
    EQ              shift and go to state 228
    NE              shift and go to state 221
    AND             shift and go to state 215
    OR              shift and go to state 230
    RIGHTSHIFT      shift and go to state 227
    LEFTSHIFT       shift and go to state 216


state 326

    (86) statement -> CHECK_ALLOCATE ( var ) SEMI .

    ENQUEUE         reduce using rule 86 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    STALL_AND_WAIT  reduce using rule 86 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    PEEK            reduce using rule 86 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    COPY_HEAD       reduce using rule 86 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    CHECK_ALLOCATE  reduce using rule 86 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    CHECK_STOP_SLOTS reduce using rule 86 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    RETURN          reduce using rule 86 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    NOT             reduce using rule 86 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    DASH            reduce using rule 86 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    IF              reduce using rule 86 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    STATIC_CAST     reduce using rule 86 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    NEW             reduce using rule 86 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    OOD             reduce using rule 86 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    (               reduce using rule 86 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    IS_VALID        reduce using rule 86 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    IS_INVALID      reduce using rule 86 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    STRING          reduce using rule 86 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    NUMBER          reduce using rule 86 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    FLOATNUMBER     reduce using rule 86 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    LIT_BOOL        reduce using rule 86 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    IDENT           reduce using rule 86 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    }               reduce using rule 86 (statement -> CHECK_ALLOCATE ( var ) SEMI .)


state 327

    (82) statement -> ENQUEUE ( var , type . pairs ) statements
    (65) pairs -> . , pairsx
    (66) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 50
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 343
    empty                          shift and go to state 51

state 328

    (85) statement -> COPY_HEAD ( var , var . pairs ) SEMI
    (65) pairs -> . , pairsx
    (66) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 50
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 344
    empty                          shift and go to state 51

state 329

    (105) aexpr -> type DOUBLE_COLON ident ( exprs . )

    )               shift and go to state 345


state 330

    (83) statement -> STALL_AND_WAIT ( var , var . ) SEMI

    )               shift and go to state 346


state 331

    (92) if_statement -> IF ( expr ) statements .
    (93) if_statement -> IF ( expr ) statements . ELSE statements
    (94) if_statement -> IF ( expr ) statements . ELSE if_statement

    ENQUEUE         reduce using rule 92 (if_statement -> IF ( expr ) statements .)
    STALL_AND_WAIT  reduce using rule 92 (if_statement -> IF ( expr ) statements .)
    PEEK            reduce using rule 92 (if_statement -> IF ( expr ) statements .)
    COPY_HEAD       reduce using rule 92 (if_statement -> IF ( expr ) statements .)
    CHECK_ALLOCATE  reduce using rule 92 (if_statement -> IF ( expr ) statements .)
    CHECK_STOP_SLOTS reduce using rule 92 (if_statement -> IF ( expr ) statements .)
    RETURN          reduce using rule 92 (if_statement -> IF ( expr ) statements .)
    NOT             reduce using rule 92 (if_statement -> IF ( expr ) statements .)
    DASH            reduce using rule 92 (if_statement -> IF ( expr ) statements .)
    IF              reduce using rule 92 (if_statement -> IF ( expr ) statements .)
    STATIC_CAST     reduce using rule 92 (if_statement -> IF ( expr ) statements .)
    NEW             reduce using rule 92 (if_statement -> IF ( expr ) statements .)
    OOD             reduce using rule 92 (if_statement -> IF ( expr ) statements .)
    (               reduce using rule 92 (if_statement -> IF ( expr ) statements .)
    IS_VALID        reduce using rule 92 (if_statement -> IF ( expr ) statements .)
    IS_INVALID      reduce using rule 92 (if_statement -> IF ( expr ) statements .)
    STRING          reduce using rule 92 (if_statement -> IF ( expr ) statements .)
    NUMBER          reduce using rule 92 (if_statement -> IF ( expr ) statements .)
    FLOATNUMBER     reduce using rule 92 (if_statement -> IF ( expr ) statements .)
    LIT_BOOL        reduce using rule 92 (if_statement -> IF ( expr ) statements .)
    IDENT           reduce using rule 92 (if_statement -> IF ( expr ) statements .)
    }               reduce using rule 92 (if_statement -> IF ( expr ) statements .)
    ELSE            shift and go to state 347


state 332

    (87) statement -> CHECK_STOP_SLOTS ( var , STRING . , STRING ) SEMI

    ,               shift and go to state 348


state 333

    (39) type_state -> ident , enumeration pairs SEMI .

    IDENT           reduce using rule 39 (type_state -> ident , enumeration pairs SEMI .)
    }               reduce using rule 39 (type_state -> ident , enumeration pairs SEMI .)


state 334

    (31) type_member -> type_or_void ident ( params ) pairs . statements
    (73) statements -> . { statements_inner }
    (74) statements -> . { }

    {               shift and go to state 113

    statements                     shift and go to state 349

state 335

    (40) types -> type , types .

    )               reduce using rule 40 (types -> type , types .)


state 336

    (40) types -> type . , types
    (41) types -> type .

    ,               shift and go to state 317
    )               reduce using rule 41 (types -> type .)


state 337

    (42) types -> empty .

    )               reduce using rule 42 (types -> empty .)


state 338

    (30) type_member -> type_or_void ident ( types ) pairs . SEMI

    SEMI            shift and go to state 350


state 339

    (84) statement -> PEEK ( var , type pairs . ) statements

    )               shift and go to state 351


state 340

    (103) aexpr -> aexpr DOT ident ( exprs ) .

    DOT             reduce using rule 103 (aexpr -> aexpr DOT ident ( exprs ) .)
    [               reduce using rule 103 (aexpr -> aexpr DOT ident ( exprs ) .)
    )               reduce using rule 103 (aexpr -> aexpr DOT ident ( exprs ) .)
    STAR            reduce using rule 103 (aexpr -> aexpr DOT ident ( exprs ) .)
    SLASH           reduce using rule 103 (aexpr -> aexpr DOT ident ( exprs ) .)
    PLUS            reduce using rule 103 (aexpr -> aexpr DOT ident ( exprs ) .)
    DASH            reduce using rule 103 (aexpr -> aexpr DOT ident ( exprs ) .)
    LT              reduce using rule 103 (aexpr -> aexpr DOT ident ( exprs ) .)
    GT              reduce using rule 103 (aexpr -> aexpr DOT ident ( exprs ) .)
    LE              reduce using rule 103 (aexpr -> aexpr DOT ident ( exprs ) .)
    GE              reduce using rule 103 (aexpr -> aexpr DOT ident ( exprs ) .)
    EQ              reduce using rule 103 (aexpr -> aexpr DOT ident ( exprs ) .)
    NE              reduce using rule 103 (aexpr -> aexpr DOT ident ( exprs ) .)
    AND             reduce using rule 103 (aexpr -> aexpr DOT ident ( exprs ) .)
    OR              reduce using rule 103 (aexpr -> aexpr DOT ident ( exprs ) .)
    RIGHTSHIFT      reduce using rule 103 (aexpr -> aexpr DOT ident ( exprs ) .)
    LEFTSHIFT       reduce using rule 103 (aexpr -> aexpr DOT ident ( exprs ) .)
    SEMI            reduce using rule 103 (aexpr -> aexpr DOT ident ( exprs ) .)
    ASSIGN          reduce using rule 103 (aexpr -> aexpr DOT ident ( exprs ) .)
    ,               reduce using rule 103 (aexpr -> aexpr DOT ident ( exprs ) .)
    ]               reduce using rule 103 (aexpr -> aexpr DOT ident ( exprs ) .)


state 341

    (89) aexpr -> STATIC_CAST ( type , STRING , . expr )
    (106) expr -> . aexpr
    (107) expr -> . expr STAR expr
    (108) expr -> . expr SLASH expr
    (109) expr -> . expr PLUS expr
    (110) expr -> . expr DASH expr
    (111) expr -> . expr LT expr
    (112) expr -> . expr GT expr
    (113) expr -> . expr LE expr
    (114) expr -> . expr GE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr AND expr
    (118) expr -> . expr OR expr
    (119) expr -> . expr RIGHTSHIFT expr
    (120) expr -> . expr LEFTSHIFT expr
    (121) expr -> . NOT expr
    (122) expr -> . DASH expr
    (88) aexpr -> . STATIC_CAST ( type , expr )
    (89) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (95) aexpr -> . var
    (96) aexpr -> . type ident
    (97) aexpr -> . literal
    (98) aexpr -> . enumeration
    (99) aexpr -> . ident ( exprs )
    (100) aexpr -> . NEW type
    (101) aexpr -> . OOD
    (102) aexpr -> . aexpr DOT ident
    (103) aexpr -> . aexpr DOT ident ( exprs )
    (104) aexpr -> . aexpr [ exprs ]
    (105) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (123) aexpr -> . ( expr )
    (124) aexpr -> . IS_VALID ( var )
    (125) aexpr -> . IS_INVALID ( var )
    (131) var -> . ident
    (45) type -> . typestr
    (126) literal -> . STRING
    (127) literal -> . NUMBER
    (128) literal -> . FLOATNUMBER
    (129) literal -> . LIT_BOOL
    (130) enumeration -> . ident : ident
    (64) ident -> . IDENT
    (43) typestr -> . typestr DOUBLE_COLON ident
    (44) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 160
    STATIC_CAST     shift and go to state 146
    NEW             shift and go to state 144
    OOD             shift and go to state 162
    (               shift and go to state 148
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 149
    STRING          shift and go to state 157
    NUMBER          shift and go to state 142
    FLOATNUMBER     shift and go to state 141
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 163
    expr                           shift and go to state 352
    enumeration                    shift and go to state 150
    literal                        shift and go to state 159
    var                            shift and go to state 154
    typestr                        shift and go to state 19
    type                           shift and go to state 156
    aexpr                          shift and go to state 145

state 342

    (88) aexpr -> STATIC_CAST ( type , expr ) .

    DOT             reduce using rule 88 (aexpr -> STATIC_CAST ( type , expr ) .)
    [               reduce using rule 88 (aexpr -> STATIC_CAST ( type , expr ) .)
    )               reduce using rule 88 (aexpr -> STATIC_CAST ( type , expr ) .)
    STAR            reduce using rule 88 (aexpr -> STATIC_CAST ( type , expr ) .)
    SLASH           reduce using rule 88 (aexpr -> STATIC_CAST ( type , expr ) .)
    PLUS            reduce using rule 88 (aexpr -> STATIC_CAST ( type , expr ) .)
    DASH            reduce using rule 88 (aexpr -> STATIC_CAST ( type , expr ) .)
    LT              reduce using rule 88 (aexpr -> STATIC_CAST ( type , expr ) .)
    GT              reduce using rule 88 (aexpr -> STATIC_CAST ( type , expr ) .)
    LE              reduce using rule 88 (aexpr -> STATIC_CAST ( type , expr ) .)
    GE              reduce using rule 88 (aexpr -> STATIC_CAST ( type , expr ) .)
    EQ              reduce using rule 88 (aexpr -> STATIC_CAST ( type , expr ) .)
    NE              reduce using rule 88 (aexpr -> STATIC_CAST ( type , expr ) .)
    AND             reduce using rule 88 (aexpr -> STATIC_CAST ( type , expr ) .)
    OR              reduce using rule 88 (aexpr -> STATIC_CAST ( type , expr ) .)
    RIGHTSHIFT      reduce using rule 88 (aexpr -> STATIC_CAST ( type , expr ) .)
    LEFTSHIFT       reduce using rule 88 (aexpr -> STATIC_CAST ( type , expr ) .)
    SEMI            reduce using rule 88 (aexpr -> STATIC_CAST ( type , expr ) .)
    ASSIGN          reduce using rule 88 (aexpr -> STATIC_CAST ( type , expr ) .)
    ,               reduce using rule 88 (aexpr -> STATIC_CAST ( type , expr ) .)
    ]               reduce using rule 88 (aexpr -> STATIC_CAST ( type , expr ) .)


state 343

    (82) statement -> ENQUEUE ( var , type pairs . ) statements

    )               shift and go to state 353


state 344

    (85) statement -> COPY_HEAD ( var , var pairs . ) SEMI

    )               shift and go to state 354


state 345

    (105) aexpr -> type DOUBLE_COLON ident ( exprs ) .

    DOT             reduce using rule 105 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    [               reduce using rule 105 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    )               reduce using rule 105 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    STAR            reduce using rule 105 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    SLASH           reduce using rule 105 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    PLUS            reduce using rule 105 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    DASH            reduce using rule 105 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    LT              reduce using rule 105 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    GT              reduce using rule 105 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    LE              reduce using rule 105 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    GE              reduce using rule 105 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    EQ              reduce using rule 105 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    NE              reduce using rule 105 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    AND             reduce using rule 105 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    OR              reduce using rule 105 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    RIGHTSHIFT      reduce using rule 105 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    LEFTSHIFT       reduce using rule 105 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    SEMI            reduce using rule 105 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    ASSIGN          reduce using rule 105 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    ,               reduce using rule 105 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    ]               reduce using rule 105 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)


state 346

    (83) statement -> STALL_AND_WAIT ( var , var ) . SEMI

    SEMI            shift and go to state 355


state 347

    (93) if_statement -> IF ( expr ) statements ELSE . statements
    (94) if_statement -> IF ( expr ) statements ELSE . if_statement
    (73) statements -> . { statements_inner }
    (74) statements -> . { }
    (92) if_statement -> . IF ( expr ) statements
    (93) if_statement -> . IF ( expr ) statements ELSE statements
    (94) if_statement -> . IF ( expr ) statements ELSE if_statement

    {               shift and go to state 113
    IF              shift and go to state 161

    if_statement                   shift and go to state 357
    statements                     shift and go to state 356

state 348

    (87) statement -> CHECK_STOP_SLOTS ( var , STRING , . STRING ) SEMI

    STRING          shift and go to state 358


state 349

    (31) type_member -> type_or_void ident ( params ) pairs statements .

    VOID            reduce using rule 31 (type_member -> type_or_void ident ( params ) pairs statements .)
    IDENT           reduce using rule 31 (type_member -> type_or_void ident ( params ) pairs statements .)
    }               reduce using rule 31 (type_member -> type_or_void ident ( params ) pairs statements .)


state 350

    (30) type_member -> type_or_void ident ( types ) pairs SEMI .

    VOID            reduce using rule 30 (type_member -> type_or_void ident ( types ) pairs SEMI .)
    IDENT           reduce using rule 30 (type_member -> type_or_void ident ( types ) pairs SEMI .)
    }               reduce using rule 30 (type_member -> type_or_void ident ( types ) pairs SEMI .)


state 351

    (84) statement -> PEEK ( var , type pairs ) . statements
    (73) statements -> . { statements_inner }
    (74) statements -> . { }

    {               shift and go to state 113

    statements                     shift and go to state 359

state 352

    (89) aexpr -> STATIC_CAST ( type , STRING , expr . )
    (107) expr -> expr . STAR expr
    (108) expr -> expr . SLASH expr
    (109) expr -> expr . PLUS expr
    (110) expr -> expr . DASH expr
    (111) expr -> expr . LT expr
    (112) expr -> expr . GT expr
    (113) expr -> expr . LE expr
    (114) expr -> expr . GE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . AND expr
    (118) expr -> expr . OR expr
    (119) expr -> expr . RIGHTSHIFT expr
    (120) expr -> expr . LEFTSHIFT expr

    )               shift and go to state 360
    STAR            shift and go to state 218
    SLASH           shift and go to state 226
    PLUS            shift and go to state 225
    DASH            shift and go to state 222
    LT              shift and go to state 223
    GT              shift and go to state 217
    LE              shift and go to state 224
    GE              shift and go to state 220
    EQ              shift and go to state 228
    NE              shift and go to state 221
    AND             shift and go to state 215
    OR              shift and go to state 230
    RIGHTSHIFT      shift and go to state 227
    LEFTSHIFT       shift and go to state 216


state 353

    (82) statement -> ENQUEUE ( var , type pairs ) . statements
    (73) statements -> . { statements_inner }
    (74) statements -> . { }

    {               shift and go to state 113

    statements                     shift and go to state 361

state 354

    (85) statement -> COPY_HEAD ( var , var pairs ) . SEMI

    SEMI            shift and go to state 362


state 355

    (83) statement -> STALL_AND_WAIT ( var , var ) SEMI .

    ENQUEUE         reduce using rule 83 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    STALL_AND_WAIT  reduce using rule 83 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    PEEK            reduce using rule 83 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    COPY_HEAD       reduce using rule 83 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    CHECK_ALLOCATE  reduce using rule 83 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    CHECK_STOP_SLOTS reduce using rule 83 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    RETURN          reduce using rule 83 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    NOT             reduce using rule 83 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    DASH            reduce using rule 83 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    IF              reduce using rule 83 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    STATIC_CAST     reduce using rule 83 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    NEW             reduce using rule 83 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    OOD             reduce using rule 83 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    (               reduce using rule 83 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    IS_VALID        reduce using rule 83 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    IS_INVALID      reduce using rule 83 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    STRING          reduce using rule 83 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    NUMBER          reduce using rule 83 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    FLOATNUMBER     reduce using rule 83 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    LIT_BOOL        reduce using rule 83 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    IDENT           reduce using rule 83 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    }               reduce using rule 83 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)


state 356

    (93) if_statement -> IF ( expr ) statements ELSE statements .

    ENQUEUE         reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE statements .)
    STALL_AND_WAIT  reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE statements .)
    PEEK            reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE statements .)
    COPY_HEAD       reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE statements .)
    CHECK_ALLOCATE  reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE statements .)
    CHECK_STOP_SLOTS reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE statements .)
    RETURN          reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE statements .)
    NOT             reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE statements .)
    DASH            reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE statements .)
    IF              reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE statements .)
    STATIC_CAST     reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE statements .)
    NEW             reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE statements .)
    OOD             reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE statements .)
    (               reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE statements .)
    IS_VALID        reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE statements .)
    IS_INVALID      reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE statements .)
    STRING          reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE statements .)
    NUMBER          reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE statements .)
    FLOATNUMBER     reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE statements .)
    LIT_BOOL        reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE statements .)
    IDENT           reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE statements .)
    }               reduce using rule 93 (if_statement -> IF ( expr ) statements ELSE statements .)


state 357

    (94) if_statement -> IF ( expr ) statements ELSE if_statement .

    ENQUEUE         reduce using rule 94 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    STALL_AND_WAIT  reduce using rule 94 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    PEEK            reduce using rule 94 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    COPY_HEAD       reduce using rule 94 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    CHECK_ALLOCATE  reduce using rule 94 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    CHECK_STOP_SLOTS reduce using rule 94 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    RETURN          reduce using rule 94 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    NOT             reduce using rule 94 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    DASH            reduce using rule 94 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    IF              reduce using rule 94 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    STATIC_CAST     reduce using rule 94 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    NEW             reduce using rule 94 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    OOD             reduce using rule 94 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    (               reduce using rule 94 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    IS_VALID        reduce using rule 94 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    IS_INVALID      reduce using rule 94 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    STRING          reduce using rule 94 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    NUMBER          reduce using rule 94 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    FLOATNUMBER     reduce using rule 94 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    LIT_BOOL        reduce using rule 94 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    IDENT           reduce using rule 94 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    }               reduce using rule 94 (if_statement -> IF ( expr ) statements ELSE if_statement .)


state 358

    (87) statement -> CHECK_STOP_SLOTS ( var , STRING , STRING . ) SEMI

    )               shift and go to state 363


state 359

    (84) statement -> PEEK ( var , type pairs ) statements .

    ENQUEUE         reduce using rule 84 (statement -> PEEK ( var , type pairs ) statements .)
    STALL_AND_WAIT  reduce using rule 84 (statement -> PEEK ( var , type pairs ) statements .)
    PEEK            reduce using rule 84 (statement -> PEEK ( var , type pairs ) statements .)
    COPY_HEAD       reduce using rule 84 (statement -> PEEK ( var , type pairs ) statements .)
    CHECK_ALLOCATE  reduce using rule 84 (statement -> PEEK ( var , type pairs ) statements .)
    CHECK_STOP_SLOTS reduce using rule 84 (statement -> PEEK ( var , type pairs ) statements .)
    RETURN          reduce using rule 84 (statement -> PEEK ( var , type pairs ) statements .)
    NOT             reduce using rule 84 (statement -> PEEK ( var , type pairs ) statements .)
    DASH            reduce using rule 84 (statement -> PEEK ( var , type pairs ) statements .)
    IF              reduce using rule 84 (statement -> PEEK ( var , type pairs ) statements .)
    STATIC_CAST     reduce using rule 84 (statement -> PEEK ( var , type pairs ) statements .)
    NEW             reduce using rule 84 (statement -> PEEK ( var , type pairs ) statements .)
    OOD             reduce using rule 84 (statement -> PEEK ( var , type pairs ) statements .)
    (               reduce using rule 84 (statement -> PEEK ( var , type pairs ) statements .)
    IS_VALID        reduce using rule 84 (statement -> PEEK ( var , type pairs ) statements .)
    IS_INVALID      reduce using rule 84 (statement -> PEEK ( var , type pairs ) statements .)
    STRING          reduce using rule 84 (statement -> PEEK ( var , type pairs ) statements .)
    NUMBER          reduce using rule 84 (statement -> PEEK ( var , type pairs ) statements .)
    FLOATNUMBER     reduce using rule 84 (statement -> PEEK ( var , type pairs ) statements .)
    LIT_BOOL        reduce using rule 84 (statement -> PEEK ( var , type pairs ) statements .)
    IDENT           reduce using rule 84 (statement -> PEEK ( var , type pairs ) statements .)
    }               reduce using rule 84 (statement -> PEEK ( var , type pairs ) statements .)


state 360

    (89) aexpr -> STATIC_CAST ( type , STRING , expr ) .

    DOT             reduce using rule 89 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    [               reduce using rule 89 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    )               reduce using rule 89 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    STAR            reduce using rule 89 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    SLASH           reduce using rule 89 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    PLUS            reduce using rule 89 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    DASH            reduce using rule 89 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    LT              reduce using rule 89 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    GT              reduce using rule 89 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    LE              reduce using rule 89 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    GE              reduce using rule 89 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    EQ              reduce using rule 89 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    NE              reduce using rule 89 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    AND             reduce using rule 89 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    OR              reduce using rule 89 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    RIGHTSHIFT      reduce using rule 89 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    LEFTSHIFT       reduce using rule 89 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    SEMI            reduce using rule 89 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    ASSIGN          reduce using rule 89 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    ,               reduce using rule 89 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    ]               reduce using rule 89 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)


state 361

    (82) statement -> ENQUEUE ( var , type pairs ) statements .

    ENQUEUE         reduce using rule 82 (statement -> ENQUEUE ( var , type pairs ) statements .)
    STALL_AND_WAIT  reduce using rule 82 (statement -> ENQUEUE ( var , type pairs ) statements .)
    PEEK            reduce using rule 82 (statement -> ENQUEUE ( var , type pairs ) statements .)
    COPY_HEAD       reduce using rule 82 (statement -> ENQUEUE ( var , type pairs ) statements .)
    CHECK_ALLOCATE  reduce using rule 82 (statement -> ENQUEUE ( var , type pairs ) statements .)
    CHECK_STOP_SLOTS reduce using rule 82 (statement -> ENQUEUE ( var , type pairs ) statements .)
    RETURN          reduce using rule 82 (statement -> ENQUEUE ( var , type pairs ) statements .)
    NOT             reduce using rule 82 (statement -> ENQUEUE ( var , type pairs ) statements .)
    DASH            reduce using rule 82 (statement -> ENQUEUE ( var , type pairs ) statements .)
    IF              reduce using rule 82 (statement -> ENQUEUE ( var , type pairs ) statements .)
    STATIC_CAST     reduce using rule 82 (statement -> ENQUEUE ( var , type pairs ) statements .)
    NEW             reduce using rule 82 (statement -> ENQUEUE ( var , type pairs ) statements .)
    OOD             reduce using rule 82 (statement -> ENQUEUE ( var , type pairs ) statements .)
    (               reduce using rule 82 (statement -> ENQUEUE ( var , type pairs ) statements .)
    IS_VALID        reduce using rule 82 (statement -> ENQUEUE ( var , type pairs ) statements .)
    IS_INVALID      reduce using rule 82 (statement -> ENQUEUE ( var , type pairs ) statements .)
    STRING          reduce using rule 82 (statement -> ENQUEUE ( var , type pairs ) statements .)
    NUMBER          reduce using rule 82 (statement -> ENQUEUE ( var , type pairs ) statements .)
    FLOATNUMBER     reduce using rule 82 (statement -> ENQUEUE ( var , type pairs ) statements .)
    LIT_BOOL        reduce using rule 82 (statement -> ENQUEUE ( var , type pairs ) statements .)
    IDENT           reduce using rule 82 (statement -> ENQUEUE ( var , type pairs ) statements .)
    }               reduce using rule 82 (statement -> ENQUEUE ( var , type pairs ) statements .)


state 362

    (85) statement -> COPY_HEAD ( var , var pairs ) SEMI .

    ENQUEUE         reduce using rule 85 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    STALL_AND_WAIT  reduce using rule 85 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    PEEK            reduce using rule 85 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    COPY_HEAD       reduce using rule 85 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    CHECK_ALLOCATE  reduce using rule 85 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    CHECK_STOP_SLOTS reduce using rule 85 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    RETURN          reduce using rule 85 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    NOT             reduce using rule 85 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    DASH            reduce using rule 85 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    IF              reduce using rule 85 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    STATIC_CAST     reduce using rule 85 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    NEW             reduce using rule 85 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    OOD             reduce using rule 85 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    (               reduce using rule 85 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    IS_VALID        reduce using rule 85 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    IS_INVALID      reduce using rule 85 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    STRING          reduce using rule 85 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    NUMBER          reduce using rule 85 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    FLOATNUMBER     reduce using rule 85 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    LIT_BOOL        reduce using rule 85 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    IDENT           reduce using rule 85 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    }               reduce using rule 85 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)


state 363

    (87) statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) . SEMI

    SEMI            shift and go to state 364


state 364

    (87) statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .

    ENQUEUE         reduce using rule 87 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    STALL_AND_WAIT  reduce using rule 87 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    PEEK            reduce using rule 87 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    COPY_HEAD       reduce using rule 87 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    CHECK_ALLOCATE  reduce using rule 87 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    CHECK_STOP_SLOTS reduce using rule 87 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    RETURN          reduce using rule 87 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    NOT             reduce using rule 87 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    DASH            reduce using rule 87 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    IF              reduce using rule 87 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    STATIC_CAST     reduce using rule 87 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    NEW             reduce using rule 87 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    OOD             reduce using rule 87 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    (               reduce using rule 87 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    IS_VALID        reduce using rule 87 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    IS_INVALID      reduce using rule 87 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    STRING          reduce using rule 87 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    NUMBER          reduce using rule 87 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    FLOATNUMBER     reduce using rule 87 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    LIT_BOOL        reduce using rule 87 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    IDENT           reduce using rule 87 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    }               reduce using rule 87 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DOUBLE_COLON in state 19 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 192 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 295 resolved as shift
WARNING: reduce/reduce conflict in state 291 resolved using rule (types -> empty)
WARNING: rejected rule (params -> empty) in state 291
